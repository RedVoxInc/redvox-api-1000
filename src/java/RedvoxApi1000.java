// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/redvox-api-1000.proto

public final class RedvoxApi1000 {
  private RedvoxApi1000() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface RedvoxPacket1000OrBuilder extends
      // @@protoc_insertion_point(interface_extends:RedvoxPacket1000)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * API Version
     * </pre>
     *
     * <code>uint32 api = 1;</code>
     * @return The api.
     */
    int getApi();

    /**
     * <pre>
     * User information
     * </pre>
     *
     * <code>string auth_email = 2;</code>
     * @return The authEmail.
     */
    java.lang.String getAuthEmail();
    /**
     * <pre>
     * User information
     * </pre>
     *
     * <code>string auth_email = 2;</code>
     * @return The bytes for authEmail.
     */
    com.google.protobuf.ByteString
        getAuthEmailBytes();

    /**
     * <pre>
     * The JWT token used for authentication
     * </pre>
     *
     * <code>string auth_token = 3;</code>
     * @return The authToken.
     */
    java.lang.String getAuthToken();
    /**
     * <pre>
     * The JWT token used for authentication
     * </pre>
     *
     * <code>string auth_token = 3;</code>
     * @return The bytes for authToken.
     */
    com.google.protobuf.ByteString
        getAuthTokenBytes();

    /**
     * <pre>
     * The assigned firebase token
     * </pre>
     *
     * <code>string firebase_token = 4;</code>
     * @return The firebaseToken.
     */
    java.lang.String getFirebaseToken();
    /**
     * <pre>
     * The assigned firebase token
     * </pre>
     *
     * <code>string firebase_token = 4;</code>
     * @return The bytes for firebaseToken.
     */
    com.google.protobuf.ByteString
        getFirebaseTokenBytes();

    /**
     * <pre>
     * Device information
     * </pre>
     *
     * <code>string device_id = 5;</code>
     * @return The deviceId.
     */
    java.lang.String getDeviceId();
    /**
     * <pre>
     * Device information
     * </pre>
     *
     * <code>string device_id = 5;</code>
     * @return The bytes for deviceId.
     */
    com.google.protobuf.ByteString
        getDeviceIdBytes();

    /**
     * <pre>
     * The app provided UUID
     * </pre>
     *
     * <code>string device_uuid = 6;</code>
     * @return The deviceUuid.
     */
    java.lang.String getDeviceUuid();
    /**
     * <pre>
     * The app provided UUID
     * </pre>
     *
     * <code>string device_uuid = 6;</code>
     * @return The bytes for deviceUuid.
     */
    com.google.protobuf.ByteString
        getDeviceUuidBytes();

    /**
     * <pre>
     * Make of the device
     * </pre>
     *
     * <code>string device_make = 7;</code>
     * @return The deviceMake.
     */
    java.lang.String getDeviceMake();
    /**
     * <pre>
     * Make of the device
     * </pre>
     *
     * <code>string device_make = 7;</code>
     * @return The bytes for deviceMake.
     */
    com.google.protobuf.ByteString
        getDeviceMakeBytes();

    /**
     * <pre>
     * Model of the device
     * </pre>
     *
     * <code>string device_model = 8;</code>
     * @return The deviceModel.
     */
    java.lang.String getDeviceModel();
    /**
     * <pre>
     * Model of the device
     * </pre>
     *
     * <code>string device_model = 8;</code>
     * @return The bytes for deviceModel.
     */
    com.google.protobuf.ByteString
        getDeviceModelBytes();

    /**
     * <pre>
     * OS of the device
     * </pre>
     *
     * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
     * @return The enum numeric value on the wire for deviceOs.
     */
    int getDeviceOsValue();
    /**
     * <pre>
     * OS of the device
     * </pre>
     *
     * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
     * @return The deviceOs.
     */
    RedvoxApi1000.RedvoxPacket1000.OsType getDeviceOs();

    /**
     * <pre>
     * OS version of the device
     * </pre>
     *
     * <code>string device_os_version = 10;</code>
     * @return The deviceOsVersion.
     */
    java.lang.String getDeviceOsVersion();
    /**
     * <pre>
     * OS version of the device
     * </pre>
     *
     * <code>string device_os_version = 10;</code>
     * @return The bytes for deviceOsVersion.
     */
    com.google.protobuf.ByteString
        getDeviceOsVersionBytes();

    /**
     * <pre>
     * App version on the device
     * </pre>
     *
     * <code>string device_app_version = 11;</code>
     * @return The deviceAppVersion.
     */
    java.lang.String getDeviceAppVersion();
    /**
     * <pre>
     * App version on the device
     * </pre>
     *
     * <code>string device_app_version = 11;</code>
     * @return The bytes for deviceAppVersion.
     */
    com.google.protobuf.ByteString
        getDeviceAppVersionBytes();

    /**
     * <pre>
     * Temperature of the device in degrees centigrade
     * </pre>
     *
     * <code>double device_temp_c = 12;</code>
     * @return The deviceTempC.
     */
    double getDeviceTempC();

    /**
     * <pre>
     * Device battery level as a percentage between 0% and 100%
     * </pre>
     *
     * <code>double device_battery_percent = 13;</code>
     * @return The deviceBatteryPercent.
     */
    double getDeviceBatteryPercent();

    /**
     * <pre>
     * Type of network connection
     * </pre>
     *
     * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
     * @return The enum numeric value on the wire for networkType.
     */
    int getNetworkTypeValue();
    /**
     * <pre>
     * Type of network connection
     * </pre>
     *
     * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
     * @return The networkType.
     */
    RedvoxApi1000.RedvoxPacket1000.NetworkType getNetworkType();

    /**
     * <pre>
     * A value representing the strength of the network connection
     * </pre>
     *
     * <code>double network_strength_db = 15;</code>
     * @return The networkStrengthDb.
     */
    double getNetworkStrengthDb();

    /**
     * <pre>
     * Packet information
     * </pre>
     *
     * <code>bool is_backfilled = 16;</code>
     * @return The isBackfilled.
     */
    boolean getIsBackfilled();

    /**
     * <pre>
     * Field for if this packet is private to the user or not
     * </pre>
     *
     * <code>bool is_private = 17;</code>
     * @return The isPrivate.
     */
    boolean getIsPrivate();

    /**
     * <pre>
     * Field that determines if the microphone data is scrambled or not (should be True for 8000Hz data)
     * </pre>
     *
     * <code>bool is_mic_scrambled = 18;</code>
     * @return The isMicScrambled.
     */
    boolean getIsMicScrambled();

    /**
     * <pre>
     * Size of the uncompressed packet
     * </pre>
     *
     * <code>double uncompressed_size_bytes = 19;</code>
     * @return The uncompressedSizeBytes.
     */
    double getUncompressedSizeBytes();

    /**
     * <pre>
     * Size of the compressed packet
     * </pre>
     *
     * <code>double compressed_size_bytes = 20;</code>
     * @return The compressedSizeBytes.
     */
    double getCompressedSizeBytes();

    /**
     * <pre>
     * Server information
     * </pre>
     *
     * <code>string auth_server_url = 21;</code>
     * @return The authServerUrl.
     */
    java.lang.String getAuthServerUrl();
    /**
     * <pre>
     * Server information
     * </pre>
     *
     * <code>string auth_server_url = 21;</code>
     * @return The bytes for authServerUrl.
     */
    com.google.protobuf.ByteString
        getAuthServerUrlBytes();

    /**
     * <pre>
     * URL of server used for time synchronization
     * </pre>
     *
     * <code>string synch_server_url = 22;</code>
     * @return The synchServerUrl.
     */
    java.lang.String getSynchServerUrl();
    /**
     * <pre>
     * URL of server used for time synchronization
     * </pre>
     *
     * <code>string synch_server_url = 22;</code>
     * @return The bytes for synchServerUrl.
     */
    com.google.protobuf.ByteString
        getSynchServerUrlBytes();

    /**
     * <pre>
     * URL or server used for data acquisition
     * </pre>
     *
     * <code>string acquisition_server_url = 23;</code>
     * @return The acquisitionServerUrl.
     */
    java.lang.String getAcquisitionServerUrl();
    /**
     * <pre>
     * URL or server used for data acquisition
     * </pre>
     *
     * <code>string acquisition_server_url = 23;</code>
     * @return The bytes for acquisitionServerUrl.
     */
    com.google.protobuf.ByteString
        getAcquisitionServerUrlBytes();

    /**
     * <pre>
     * Timing
     * </pre>
     *
     * <code>double packet_start_ts_us_wall = 24;</code>
     * @return The packetStartTsUsWall.
     */
    double getPacketStartTsUsWall();

    /**
     * <pre>
     * Start timestamp of the packet using machine time (corresponding to the first microphone sample)
     * </pre>
     *
     * <code>double packet_start_ts_us_mach = 25;</code>
     * @return The packetStartTsUsMach.
     */
    double getPacketStartTsUsMach();

    /**
     * <pre>
     * End timestamp of the packet using the wall clock (corresponding to the last microphone sample)
     * </pre>
     *
     * <code>double packet_end_ts_us_wall = 26;</code>
     * @return The packetEndTsUsWall.
     */
    double getPacketEndTsUsWall();

    /**
     * <pre>
     * End timestamp of the packet using machine time (corresponding to the last microphone sample)
     * </pre>
     *
     * <code>double packet_end_ts_us_mach = 27;</code>
     * @return The packetEndTsUsMach.
     */
    double getPacketEndTsUsMach();

    /**
     * <pre>
     * Timestamp that the packet arrived at the acquisition server
     * </pre>
     *
     * <code>double server_acquisition_arrival_ts_us = 28;</code>
     * @return The serverAcquisitionArrivalTsUs.
     */
    double getServerAcquisitionArrivalTsUs();

    /**
     * <pre>
     * The start of the app as machine time
     * </pre>
     *
     * <code>double app_start_ts_us_mach = 29;</code>
     * @return The appStartTsUsMach.
     */
    double getAppStartTsUsMach();

    /**
     * <pre>
     * An array of synchronization params from the synch server
     * </pre>
     *
     * <code>repeated double synch_params = 30;</code>
     * @return A list containing the synchParams.
     */
    java.util.List<java.lang.Double> getSynchParamsList();
    /**
     * <pre>
     * An array of synchronization params from the synch server
     * </pre>
     *
     * <code>repeated double synch_params = 30;</code>
     * @return The count of synchParams.
     */
    int getSynchParamsCount();
    /**
     * <pre>
     * An array of synchronization params from the synch server
     * </pre>
     *
     * <code>repeated double synch_params = 30;</code>
     * @param index The index of the element to return.
     * @return The synchParams at the given index.
     */
    double getSynchParams(int index);

    /**
     * <pre>
     * The best latency as determined from the synch params
     * </pre>
     *
     * <code>double best_latency_us = 31;</code>
     * @return The bestLatencyUs.
     */
    double getBestLatencyUs();

    /**
     * <pre>
     * The best offset as determined from the synch params
     * </pre>
     *
     * <code>double best_offset_us = 32;</code>
     * @return The bestOffsetUs.
     */
    double getBestOffsetUs();

    /**
     * <pre>
     * Channels
     * </pre>
     *
     * <code>.MicrophoneChannel microphone_channel = 33;</code>
     * @return Whether the microphoneChannel field is set.
     */
    boolean hasMicrophoneChannel();
    /**
     * <pre>
     * Channels
     * </pre>
     *
     * <code>.MicrophoneChannel microphone_channel = 33;</code>
     * @return The microphoneChannel.
     */
    RedvoxApi1000.MicrophoneChannel getMicrophoneChannel();
    /**
     * <pre>
     * Channels
     * </pre>
     *
     * <code>.MicrophoneChannel microphone_channel = 33;</code>
     */
    RedvoxApi1000.MicrophoneChannelOrBuilder getMicrophoneChannelOrBuilder();

    /**
     * <pre>
     * The barometer channel
     * </pre>
     *
     * <code>.SingleChannel barometer_channel = 34;</code>
     * @return Whether the barometerChannel field is set.
     */
    boolean hasBarometerChannel();
    /**
     * <pre>
     * The barometer channel
     * </pre>
     *
     * <code>.SingleChannel barometer_channel = 34;</code>
     * @return The barometerChannel.
     */
    RedvoxApi1000.SingleChannel getBarometerChannel();
    /**
     * <pre>
     * The barometer channel
     * </pre>
     *
     * <code>.SingleChannel barometer_channel = 34;</code>
     */
    RedvoxApi1000.SingleChannelOrBuilder getBarometerChannelOrBuilder();

    /**
     * <pre>
     * The location channel
     * </pre>
     *
     * <code>.LocationChannel location_channel = 35;</code>
     * @return Whether the locationChannel field is set.
     */
    boolean hasLocationChannel();
    /**
     * <pre>
     * The location channel
     * </pre>
     *
     * <code>.LocationChannel location_channel = 35;</code>
     * @return The locationChannel.
     */
    RedvoxApi1000.LocationChannel getLocationChannel();
    /**
     * <pre>
     * The location channel
     * </pre>
     *
     * <code>.LocationChannel location_channel = 35;</code>
     */
    RedvoxApi1000.LocationChannelOrBuilder getLocationChannelOrBuilder();

    /**
     * <pre>
     * The accelerometer channel
     * </pre>
     *
     * <code>.XyzChannel accelerometer_channel = 36;</code>
     * @return Whether the accelerometerChannel field is set.
     */
    boolean hasAccelerometerChannel();
    /**
     * <pre>
     * The accelerometer channel
     * </pre>
     *
     * <code>.XyzChannel accelerometer_channel = 36;</code>
     * @return The accelerometerChannel.
     */
    RedvoxApi1000.XyzChannel getAccelerometerChannel();
    /**
     * <pre>
     * The accelerometer channel
     * </pre>
     *
     * <code>.XyzChannel accelerometer_channel = 36;</code>
     */
    RedvoxApi1000.XyzChannelOrBuilder getAccelerometerChannelOrBuilder();

    /**
     * <pre>
     * The gyroscope channel
     * </pre>
     *
     * <code>.XyzChannel gyroscope_channel = 37;</code>
     * @return Whether the gyroscopeChannel field is set.
     */
    boolean hasGyroscopeChannel();
    /**
     * <pre>
     * The gyroscope channel
     * </pre>
     *
     * <code>.XyzChannel gyroscope_channel = 37;</code>
     * @return The gyroscopeChannel.
     */
    RedvoxApi1000.XyzChannel getGyroscopeChannel();
    /**
     * <pre>
     * The gyroscope channel
     * </pre>
     *
     * <code>.XyzChannel gyroscope_channel = 37;</code>
     */
    RedvoxApi1000.XyzChannelOrBuilder getGyroscopeChannelOrBuilder();

    /**
     * <pre>
     * The magnetometer channel
     * </pre>
     *
     * <code>.XyzChannel magnetometer_channel = 38;</code>
     * @return Whether the magnetometerChannel field is set.
     */
    boolean hasMagnetometerChannel();
    /**
     * <pre>
     * The magnetometer channel
     * </pre>
     *
     * <code>.XyzChannel magnetometer_channel = 38;</code>
     * @return The magnetometerChannel.
     */
    RedvoxApi1000.XyzChannel getMagnetometerChannel();
    /**
     * <pre>
     * The magnetometer channel
     * </pre>
     *
     * <code>.XyzChannel magnetometer_channel = 38;</code>
     */
    RedvoxApi1000.XyzChannelOrBuilder getMagnetometerChannelOrBuilder();

    /**
     * <pre>
     * The light channel
     * </pre>
     *
     * <code>.SingleChannel light_channel = 39;</code>
     * @return Whether the lightChannel field is set.
     */
    boolean hasLightChannel();
    /**
     * <pre>
     * The light channel
     * </pre>
     *
     * <code>.SingleChannel light_channel = 39;</code>
     * @return The lightChannel.
     */
    RedvoxApi1000.SingleChannel getLightChannel();
    /**
     * <pre>
     * The light channel
     * </pre>
     *
     * <code>.SingleChannel light_channel = 39;</code>
     */
    RedvoxApi1000.SingleChannelOrBuilder getLightChannelOrBuilder();

    /**
     * <pre>
     * The infrared channel
     * </pre>
     *
     * <code>.SingleChannel infrared_channel = 40;</code>
     * @return Whether the infraredChannel field is set.
     */
    boolean hasInfraredChannel();
    /**
     * <pre>
     * The infrared channel
     * </pre>
     *
     * <code>.SingleChannel infrared_channel = 40;</code>
     * @return The infraredChannel.
     */
    RedvoxApi1000.SingleChannel getInfraredChannel();
    /**
     * <pre>
     * The infrared channel
     * </pre>
     *
     * <code>.SingleChannel infrared_channel = 40;</code>
     */
    RedvoxApi1000.SingleChannelOrBuilder getInfraredChannelOrBuilder();

    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */
    int getMetadataCount();
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */
    boolean containsMetadata(
        java.lang.String key);
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMetadata();
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMetadataMap();
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */

    java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */

    java.lang.String getMetadataOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Message type for encoding API 1000 RedVox packets.
   * </pre>
   *
   * Protobuf type {@code RedvoxPacket1000}
   */
  public  static final class RedvoxPacket1000 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RedvoxPacket1000)
      RedvoxPacket1000OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RedvoxPacket1000.newBuilder() to construct.
    private RedvoxPacket1000(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RedvoxPacket1000() {
      authEmail_ = "";
      authToken_ = "";
      firebaseToken_ = "";
      deviceId_ = "";
      deviceUuid_ = "";
      deviceMake_ = "";
      deviceModel_ = "";
      deviceOs_ = 0;
      deviceOsVersion_ = "";
      deviceAppVersion_ = "";
      networkType_ = 0;
      authServerUrl_ = "";
      synchServerUrl_ = "";
      acquisitionServerUrl_ = "";
      synchParams_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RedvoxPacket1000();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RedvoxPacket1000(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              api_ = input.readUInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              authEmail_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              authToken_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              firebaseToken_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              deviceId_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              deviceUuid_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              deviceMake_ = s;
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              deviceModel_ = s;
              break;
            }
            case 72: {
              int rawValue = input.readEnum();

              deviceOs_ = rawValue;
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              deviceOsVersion_ = s;
              break;
            }
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();

              deviceAppVersion_ = s;
              break;
            }
            case 97: {

              deviceTempC_ = input.readDouble();
              break;
            }
            case 105: {

              deviceBatteryPercent_ = input.readDouble();
              break;
            }
            case 112: {
              int rawValue = input.readEnum();

              networkType_ = rawValue;
              break;
            }
            case 121: {

              networkStrengthDb_ = input.readDouble();
              break;
            }
            case 128: {

              isBackfilled_ = input.readBool();
              break;
            }
            case 136: {

              isPrivate_ = input.readBool();
              break;
            }
            case 144: {

              isMicScrambled_ = input.readBool();
              break;
            }
            case 153: {

              uncompressedSizeBytes_ = input.readDouble();
              break;
            }
            case 161: {

              compressedSizeBytes_ = input.readDouble();
              break;
            }
            case 170: {
              java.lang.String s = input.readStringRequireUtf8();

              authServerUrl_ = s;
              break;
            }
            case 178: {
              java.lang.String s = input.readStringRequireUtf8();

              synchServerUrl_ = s;
              break;
            }
            case 186: {
              java.lang.String s = input.readStringRequireUtf8();

              acquisitionServerUrl_ = s;
              break;
            }
            case 193: {

              packetStartTsUsWall_ = input.readDouble();
              break;
            }
            case 201: {

              packetStartTsUsMach_ = input.readDouble();
              break;
            }
            case 209: {

              packetEndTsUsWall_ = input.readDouble();
              break;
            }
            case 217: {

              packetEndTsUsMach_ = input.readDouble();
              break;
            }
            case 225: {

              serverAcquisitionArrivalTsUs_ = input.readDouble();
              break;
            }
            case 233: {

              appStartTsUsMach_ = input.readDouble();
              break;
            }
            case 241: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                synchParams_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              synchParams_.addDouble(input.readDouble());
              break;
            }
            case 242: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                synchParams_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                synchParams_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 249: {

              bestLatencyUs_ = input.readDouble();
              break;
            }
            case 257: {

              bestOffsetUs_ = input.readDouble();
              break;
            }
            case 266: {
              RedvoxApi1000.MicrophoneChannel.Builder subBuilder = null;
              if (microphoneChannel_ != null) {
                subBuilder = microphoneChannel_.toBuilder();
              }
              microphoneChannel_ = input.readMessage(RedvoxApi1000.MicrophoneChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(microphoneChannel_);
                microphoneChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 274: {
              RedvoxApi1000.SingleChannel.Builder subBuilder = null;
              if (barometerChannel_ != null) {
                subBuilder = barometerChannel_.toBuilder();
              }
              barometerChannel_ = input.readMessage(RedvoxApi1000.SingleChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(barometerChannel_);
                barometerChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 282: {
              RedvoxApi1000.LocationChannel.Builder subBuilder = null;
              if (locationChannel_ != null) {
                subBuilder = locationChannel_.toBuilder();
              }
              locationChannel_ = input.readMessage(RedvoxApi1000.LocationChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationChannel_);
                locationChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 290: {
              RedvoxApi1000.XyzChannel.Builder subBuilder = null;
              if (accelerometerChannel_ != null) {
                subBuilder = accelerometerChannel_.toBuilder();
              }
              accelerometerChannel_ = input.readMessage(RedvoxApi1000.XyzChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(accelerometerChannel_);
                accelerometerChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 298: {
              RedvoxApi1000.XyzChannel.Builder subBuilder = null;
              if (gyroscopeChannel_ != null) {
                subBuilder = gyroscopeChannel_.toBuilder();
              }
              gyroscopeChannel_ = input.readMessage(RedvoxApi1000.XyzChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gyroscopeChannel_);
                gyroscopeChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 306: {
              RedvoxApi1000.XyzChannel.Builder subBuilder = null;
              if (magnetometerChannel_ != null) {
                subBuilder = magnetometerChannel_.toBuilder();
              }
              magnetometerChannel_ = input.readMessage(RedvoxApi1000.XyzChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(magnetometerChannel_);
                magnetometerChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 314: {
              RedvoxApi1000.SingleChannel.Builder subBuilder = null;
              if (lightChannel_ != null) {
                subBuilder = lightChannel_.toBuilder();
              }
              lightChannel_ = input.readMessage(RedvoxApi1000.SingleChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lightChannel_);
                lightChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 322: {
              RedvoxApi1000.SingleChannel.Builder subBuilder = null;
              if (infraredChannel_ != null) {
                subBuilder = infraredChannel_.toBuilder();
              }
              infraredChannel_ = input.readMessage(RedvoxApi1000.SingleChannel.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(infraredChannel_);
                infraredChannel_ = subBuilder.buildPartial();
              }

              break;
            }
            case 330: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                metadata_ = com.google.protobuf.MapField.newMapField(
                    MetadataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              metadata_.getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          synchParams_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RedvoxApi1000.internal_static_RedvoxPacket1000_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 41:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RedvoxApi1000.internal_static_RedvoxPacket1000_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RedvoxApi1000.RedvoxPacket1000.class, RedvoxApi1000.RedvoxPacket1000.Builder.class);
    }

    /**
     * <pre>
     * An enumeration for type safe network types
     * </pre>
     *
     * Protobuf enum {@code RedvoxPacket1000.NetworkType}
     */
    public enum NetworkType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>WIFI = 0;</code>
       */
      WIFI(0),
      /**
       * <code>CELLULAR = 1;</code>
       */
      CELLULAR(1),
      /**
       * <code>NONE = 2;</code>
       */
      NONE(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>WIFI = 0;</code>
       */
      public static final int WIFI_VALUE = 0;
      /**
       * <code>CELLULAR = 1;</code>
       */
      public static final int CELLULAR_VALUE = 1;
      /**
       * <code>NONE = 2;</code>
       */
      public static final int NONE_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static NetworkType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static NetworkType forNumber(int value) {
        switch (value) {
          case 0: return WIFI;
          case 1: return CELLULAR;
          case 2: return NONE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NetworkType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          NetworkType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NetworkType>() {
              public NetworkType findValueByNumber(int number) {
                return NetworkType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return RedvoxApi1000.RedvoxPacket1000.getDescriptor().getEnumTypes().get(0);
      }

      private static final NetworkType[] VALUES = values();

      public static NetworkType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private NetworkType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:RedvoxPacket1000.NetworkType)
    }

    /**
     * <pre>
     * An enumeration for type sage OS types
     * </pre>
     *
     * Protobuf enum {@code RedvoxPacket1000.OsType}
     */
    public enum OsType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ANDROID = 0;</code>
       */
      ANDROID(0),
      /**
       * <code>IOS = 1;</code>
       */
      IOS(1),
      /**
       * <code>LINUX = 2;</code>
       */
      LINUX(2),
      /**
       * <code>WINDOWS = 3;</code>
       */
      WINDOWS(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>ANDROID = 0;</code>
       */
      public static final int ANDROID_VALUE = 0;
      /**
       * <code>IOS = 1;</code>
       */
      public static final int IOS_VALUE = 1;
      /**
       * <code>LINUX = 2;</code>
       */
      public static final int LINUX_VALUE = 2;
      /**
       * <code>WINDOWS = 3;</code>
       */
      public static final int WINDOWS_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OsType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static OsType forNumber(int value) {
        switch (value) {
          case 0: return ANDROID;
          case 1: return IOS;
          case 2: return LINUX;
          case 3: return WINDOWS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OsType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OsType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OsType>() {
              public OsType findValueByNumber(int number) {
                return OsType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return RedvoxApi1000.RedvoxPacket1000.getDescriptor().getEnumTypes().get(1);
      }

      private static final OsType[] VALUES = values();

      public static OsType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OsType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:RedvoxPacket1000.OsType)
    }

    public static final int API_FIELD_NUMBER = 1;
    private int api_;
    /**
     * <pre>
     * API Version
     * </pre>
     *
     * <code>uint32 api = 1;</code>
     * @return The api.
     */
    public int getApi() {
      return api_;
    }

    public static final int AUTH_EMAIL_FIELD_NUMBER = 2;
    private volatile java.lang.Object authEmail_;
    /**
     * <pre>
     * User information
     * </pre>
     *
     * <code>string auth_email = 2;</code>
     * @return The authEmail.
     */
    public java.lang.String getAuthEmail() {
      java.lang.Object ref = authEmail_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        authEmail_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * User information
     * </pre>
     *
     * <code>string auth_email = 2;</code>
     * @return The bytes for authEmail.
     */
    public com.google.protobuf.ByteString
        getAuthEmailBytes() {
      java.lang.Object ref = authEmail_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        authEmail_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int AUTH_TOKEN_FIELD_NUMBER = 3;
    private volatile java.lang.Object authToken_;
    /**
     * <pre>
     * The JWT token used for authentication
     * </pre>
     *
     * <code>string auth_token = 3;</code>
     * @return The authToken.
     */
    public java.lang.String getAuthToken() {
      java.lang.Object ref = authToken_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        authToken_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The JWT token used for authentication
     * </pre>
     *
     * <code>string auth_token = 3;</code>
     * @return The bytes for authToken.
     */
    public com.google.protobuf.ByteString
        getAuthTokenBytes() {
      java.lang.Object ref = authToken_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        authToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIREBASE_TOKEN_FIELD_NUMBER = 4;
    private volatile java.lang.Object firebaseToken_;
    /**
     * <pre>
     * The assigned firebase token
     * </pre>
     *
     * <code>string firebase_token = 4;</code>
     * @return The firebaseToken.
     */
    public java.lang.String getFirebaseToken() {
      java.lang.Object ref = firebaseToken_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        firebaseToken_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The assigned firebase token
     * </pre>
     *
     * <code>string firebase_token = 4;</code>
     * @return The bytes for firebaseToken.
     */
    public com.google.protobuf.ByteString
        getFirebaseTokenBytes() {
      java.lang.Object ref = firebaseToken_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        firebaseToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_ID_FIELD_NUMBER = 5;
    private volatile java.lang.Object deviceId_;
    /**
     * <pre>
     * Device information
     * </pre>
     *
     * <code>string device_id = 5;</code>
     * @return The deviceId.
     */
    public java.lang.String getDeviceId() {
      java.lang.Object ref = deviceId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Device information
     * </pre>
     *
     * <code>string device_id = 5;</code>
     * @return The bytes for deviceId.
     */
    public com.google.protobuf.ByteString
        getDeviceIdBytes() {
      java.lang.Object ref = deviceId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_UUID_FIELD_NUMBER = 6;
    private volatile java.lang.Object deviceUuid_;
    /**
     * <pre>
     * The app provided UUID
     * </pre>
     *
     * <code>string device_uuid = 6;</code>
     * @return The deviceUuid.
     */
    public java.lang.String getDeviceUuid() {
      java.lang.Object ref = deviceUuid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceUuid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The app provided UUID
     * </pre>
     *
     * <code>string device_uuid = 6;</code>
     * @return The bytes for deviceUuid.
     */
    public com.google.protobuf.ByteString
        getDeviceUuidBytes() {
      java.lang.Object ref = deviceUuid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceUuid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_MAKE_FIELD_NUMBER = 7;
    private volatile java.lang.Object deviceMake_;
    /**
     * <pre>
     * Make of the device
     * </pre>
     *
     * <code>string device_make = 7;</code>
     * @return The deviceMake.
     */
    public java.lang.String getDeviceMake() {
      java.lang.Object ref = deviceMake_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceMake_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Make of the device
     * </pre>
     *
     * <code>string device_make = 7;</code>
     * @return The bytes for deviceMake.
     */
    public com.google.protobuf.ByteString
        getDeviceMakeBytes() {
      java.lang.Object ref = deviceMake_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceMake_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_MODEL_FIELD_NUMBER = 8;
    private volatile java.lang.Object deviceModel_;
    /**
     * <pre>
     * Model of the device
     * </pre>
     *
     * <code>string device_model = 8;</code>
     * @return The deviceModel.
     */
    public java.lang.String getDeviceModel() {
      java.lang.Object ref = deviceModel_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceModel_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Model of the device
     * </pre>
     *
     * <code>string device_model = 8;</code>
     * @return The bytes for deviceModel.
     */
    public com.google.protobuf.ByteString
        getDeviceModelBytes() {
      java.lang.Object ref = deviceModel_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceModel_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_OS_FIELD_NUMBER = 9;
    private int deviceOs_;
    /**
     * <pre>
     * OS of the device
     * </pre>
     *
     * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
     * @return The enum numeric value on the wire for deviceOs.
     */
    public int getDeviceOsValue() {
      return deviceOs_;
    }
    /**
     * <pre>
     * OS of the device
     * </pre>
     *
     * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
     * @return The deviceOs.
     */
    public RedvoxApi1000.RedvoxPacket1000.OsType getDeviceOs() {
      @SuppressWarnings("deprecation")
      RedvoxApi1000.RedvoxPacket1000.OsType result = RedvoxApi1000.RedvoxPacket1000.OsType.valueOf(deviceOs_);
      return result == null ? RedvoxApi1000.RedvoxPacket1000.OsType.UNRECOGNIZED : result;
    }

    public static final int DEVICE_OS_VERSION_FIELD_NUMBER = 10;
    private volatile java.lang.Object deviceOsVersion_;
    /**
     * <pre>
     * OS version of the device
     * </pre>
     *
     * <code>string device_os_version = 10;</code>
     * @return The deviceOsVersion.
     */
    public java.lang.String getDeviceOsVersion() {
      java.lang.Object ref = deviceOsVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceOsVersion_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * OS version of the device
     * </pre>
     *
     * <code>string device_os_version = 10;</code>
     * @return The bytes for deviceOsVersion.
     */
    public com.google.protobuf.ByteString
        getDeviceOsVersionBytes() {
      java.lang.Object ref = deviceOsVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceOsVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_APP_VERSION_FIELD_NUMBER = 11;
    private volatile java.lang.Object deviceAppVersion_;
    /**
     * <pre>
     * App version on the device
     * </pre>
     *
     * <code>string device_app_version = 11;</code>
     * @return The deviceAppVersion.
     */
    public java.lang.String getDeviceAppVersion() {
      java.lang.Object ref = deviceAppVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceAppVersion_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * App version on the device
     * </pre>
     *
     * <code>string device_app_version = 11;</code>
     * @return The bytes for deviceAppVersion.
     */
    public com.google.protobuf.ByteString
        getDeviceAppVersionBytes() {
      java.lang.Object ref = deviceAppVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceAppVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_TEMP_C_FIELD_NUMBER = 12;
    private double deviceTempC_;
    /**
     * <pre>
     * Temperature of the device in degrees centigrade
     * </pre>
     *
     * <code>double device_temp_c = 12;</code>
     * @return The deviceTempC.
     */
    public double getDeviceTempC() {
      return deviceTempC_;
    }

    public static final int DEVICE_BATTERY_PERCENT_FIELD_NUMBER = 13;
    private double deviceBatteryPercent_;
    /**
     * <pre>
     * Device battery level as a percentage between 0% and 100%
     * </pre>
     *
     * <code>double device_battery_percent = 13;</code>
     * @return The deviceBatteryPercent.
     */
    public double getDeviceBatteryPercent() {
      return deviceBatteryPercent_;
    }

    public static final int NETWORK_TYPE_FIELD_NUMBER = 14;
    private int networkType_;
    /**
     * <pre>
     * Type of network connection
     * </pre>
     *
     * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
     * @return The enum numeric value on the wire for networkType.
     */
    public int getNetworkTypeValue() {
      return networkType_;
    }
    /**
     * <pre>
     * Type of network connection
     * </pre>
     *
     * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
     * @return The networkType.
     */
    public RedvoxApi1000.RedvoxPacket1000.NetworkType getNetworkType() {
      @SuppressWarnings("deprecation")
      RedvoxApi1000.RedvoxPacket1000.NetworkType result = RedvoxApi1000.RedvoxPacket1000.NetworkType.valueOf(networkType_);
      return result == null ? RedvoxApi1000.RedvoxPacket1000.NetworkType.UNRECOGNIZED : result;
    }

    public static final int NETWORK_STRENGTH_DB_FIELD_NUMBER = 15;
    private double networkStrengthDb_;
    /**
     * <pre>
     * A value representing the strength of the network connection
     * </pre>
     *
     * <code>double network_strength_db = 15;</code>
     * @return The networkStrengthDb.
     */
    public double getNetworkStrengthDb() {
      return networkStrengthDb_;
    }

    public static final int IS_BACKFILLED_FIELD_NUMBER = 16;
    private boolean isBackfilled_;
    /**
     * <pre>
     * Packet information
     * </pre>
     *
     * <code>bool is_backfilled = 16;</code>
     * @return The isBackfilled.
     */
    public boolean getIsBackfilled() {
      return isBackfilled_;
    }

    public static final int IS_PRIVATE_FIELD_NUMBER = 17;
    private boolean isPrivate_;
    /**
     * <pre>
     * Field for if this packet is private to the user or not
     * </pre>
     *
     * <code>bool is_private = 17;</code>
     * @return The isPrivate.
     */
    public boolean getIsPrivate() {
      return isPrivate_;
    }

    public static final int IS_MIC_SCRAMBLED_FIELD_NUMBER = 18;
    private boolean isMicScrambled_;
    /**
     * <pre>
     * Field that determines if the microphone data is scrambled or not (should be True for 8000Hz data)
     * </pre>
     *
     * <code>bool is_mic_scrambled = 18;</code>
     * @return The isMicScrambled.
     */
    public boolean getIsMicScrambled() {
      return isMicScrambled_;
    }

    public static final int UNCOMPRESSED_SIZE_BYTES_FIELD_NUMBER = 19;
    private double uncompressedSizeBytes_;
    /**
     * <pre>
     * Size of the uncompressed packet
     * </pre>
     *
     * <code>double uncompressed_size_bytes = 19;</code>
     * @return The uncompressedSizeBytes.
     */
    public double getUncompressedSizeBytes() {
      return uncompressedSizeBytes_;
    }

    public static final int COMPRESSED_SIZE_BYTES_FIELD_NUMBER = 20;
    private double compressedSizeBytes_;
    /**
     * <pre>
     * Size of the compressed packet
     * </pre>
     *
     * <code>double compressed_size_bytes = 20;</code>
     * @return The compressedSizeBytes.
     */
    public double getCompressedSizeBytes() {
      return compressedSizeBytes_;
    }

    public static final int AUTH_SERVER_URL_FIELD_NUMBER = 21;
    private volatile java.lang.Object authServerUrl_;
    /**
     * <pre>
     * Server information
     * </pre>
     *
     * <code>string auth_server_url = 21;</code>
     * @return The authServerUrl.
     */
    public java.lang.String getAuthServerUrl() {
      java.lang.Object ref = authServerUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        authServerUrl_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Server information
     * </pre>
     *
     * <code>string auth_server_url = 21;</code>
     * @return The bytes for authServerUrl.
     */
    public com.google.protobuf.ByteString
        getAuthServerUrlBytes() {
      java.lang.Object ref = authServerUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        authServerUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SYNCH_SERVER_URL_FIELD_NUMBER = 22;
    private volatile java.lang.Object synchServerUrl_;
    /**
     * <pre>
     * URL of server used for time synchronization
     * </pre>
     *
     * <code>string synch_server_url = 22;</code>
     * @return The synchServerUrl.
     */
    public java.lang.String getSynchServerUrl() {
      java.lang.Object ref = synchServerUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        synchServerUrl_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * URL of server used for time synchronization
     * </pre>
     *
     * <code>string synch_server_url = 22;</code>
     * @return The bytes for synchServerUrl.
     */
    public com.google.protobuf.ByteString
        getSynchServerUrlBytes() {
      java.lang.Object ref = synchServerUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        synchServerUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ACQUISITION_SERVER_URL_FIELD_NUMBER = 23;
    private volatile java.lang.Object acquisitionServerUrl_;
    /**
     * <pre>
     * URL or server used for data acquisition
     * </pre>
     *
     * <code>string acquisition_server_url = 23;</code>
     * @return The acquisitionServerUrl.
     */
    public java.lang.String getAcquisitionServerUrl() {
      java.lang.Object ref = acquisitionServerUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        acquisitionServerUrl_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * URL or server used for data acquisition
     * </pre>
     *
     * <code>string acquisition_server_url = 23;</code>
     * @return The bytes for acquisitionServerUrl.
     */
    public com.google.protobuf.ByteString
        getAcquisitionServerUrlBytes() {
      java.lang.Object ref = acquisitionServerUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        acquisitionServerUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PACKET_START_TS_US_WALL_FIELD_NUMBER = 24;
    private double packetStartTsUsWall_;
    /**
     * <pre>
     * Timing
     * </pre>
     *
     * <code>double packet_start_ts_us_wall = 24;</code>
     * @return The packetStartTsUsWall.
     */
    public double getPacketStartTsUsWall() {
      return packetStartTsUsWall_;
    }

    public static final int PACKET_START_TS_US_MACH_FIELD_NUMBER = 25;
    private double packetStartTsUsMach_;
    /**
     * <pre>
     * Start timestamp of the packet using machine time (corresponding to the first microphone sample)
     * </pre>
     *
     * <code>double packet_start_ts_us_mach = 25;</code>
     * @return The packetStartTsUsMach.
     */
    public double getPacketStartTsUsMach() {
      return packetStartTsUsMach_;
    }

    public static final int PACKET_END_TS_US_WALL_FIELD_NUMBER = 26;
    private double packetEndTsUsWall_;
    /**
     * <pre>
     * End timestamp of the packet using the wall clock (corresponding to the last microphone sample)
     * </pre>
     *
     * <code>double packet_end_ts_us_wall = 26;</code>
     * @return The packetEndTsUsWall.
     */
    public double getPacketEndTsUsWall() {
      return packetEndTsUsWall_;
    }

    public static final int PACKET_END_TS_US_MACH_FIELD_NUMBER = 27;
    private double packetEndTsUsMach_;
    /**
     * <pre>
     * End timestamp of the packet using machine time (corresponding to the last microphone sample)
     * </pre>
     *
     * <code>double packet_end_ts_us_mach = 27;</code>
     * @return The packetEndTsUsMach.
     */
    public double getPacketEndTsUsMach() {
      return packetEndTsUsMach_;
    }

    public static final int SERVER_ACQUISITION_ARRIVAL_TS_US_FIELD_NUMBER = 28;
    private double serverAcquisitionArrivalTsUs_;
    /**
     * <pre>
     * Timestamp that the packet arrived at the acquisition server
     * </pre>
     *
     * <code>double server_acquisition_arrival_ts_us = 28;</code>
     * @return The serverAcquisitionArrivalTsUs.
     */
    public double getServerAcquisitionArrivalTsUs() {
      return serverAcquisitionArrivalTsUs_;
    }

    public static final int APP_START_TS_US_MACH_FIELD_NUMBER = 29;
    private double appStartTsUsMach_;
    /**
     * <pre>
     * The start of the app as machine time
     * </pre>
     *
     * <code>double app_start_ts_us_mach = 29;</code>
     * @return The appStartTsUsMach.
     */
    public double getAppStartTsUsMach() {
      return appStartTsUsMach_;
    }

    public static final int SYNCH_PARAMS_FIELD_NUMBER = 30;
    private com.google.protobuf.Internal.DoubleList synchParams_;
    /**
     * <pre>
     * An array of synchronization params from the synch server
     * </pre>
     *
     * <code>repeated double synch_params = 30;</code>
     * @return A list containing the synchParams.
     */
    public java.util.List<java.lang.Double>
        getSynchParamsList() {
      return synchParams_;
    }
    /**
     * <pre>
     * An array of synchronization params from the synch server
     * </pre>
     *
     * <code>repeated double synch_params = 30;</code>
     * @return The count of synchParams.
     */
    public int getSynchParamsCount() {
      return synchParams_.size();
    }
    /**
     * <pre>
     * An array of synchronization params from the synch server
     * </pre>
     *
     * <code>repeated double synch_params = 30;</code>
     * @param index The index of the element to return.
     * @return The synchParams at the given index.
     */
    public double getSynchParams(int index) {
      return synchParams_.getDouble(index);
    }
    private int synchParamsMemoizedSerializedSize = -1;

    public static final int BEST_LATENCY_US_FIELD_NUMBER = 31;
    private double bestLatencyUs_;
    /**
     * <pre>
     * The best latency as determined from the synch params
     * </pre>
     *
     * <code>double best_latency_us = 31;</code>
     * @return The bestLatencyUs.
     */
    public double getBestLatencyUs() {
      return bestLatencyUs_;
    }

    public static final int BEST_OFFSET_US_FIELD_NUMBER = 32;
    private double bestOffsetUs_;
    /**
     * <pre>
     * The best offset as determined from the synch params
     * </pre>
     *
     * <code>double best_offset_us = 32;</code>
     * @return The bestOffsetUs.
     */
    public double getBestOffsetUs() {
      return bestOffsetUs_;
    }

    public static final int MICROPHONE_CHANNEL_FIELD_NUMBER = 33;
    private RedvoxApi1000.MicrophoneChannel microphoneChannel_;
    /**
     * <pre>
     * Channels
     * </pre>
     *
     * <code>.MicrophoneChannel microphone_channel = 33;</code>
     * @return Whether the microphoneChannel field is set.
     */
    public boolean hasMicrophoneChannel() {
      return microphoneChannel_ != null;
    }
    /**
     * <pre>
     * Channels
     * </pre>
     *
     * <code>.MicrophoneChannel microphone_channel = 33;</code>
     * @return The microphoneChannel.
     */
    public RedvoxApi1000.MicrophoneChannel getMicrophoneChannel() {
      return microphoneChannel_ == null ? RedvoxApi1000.MicrophoneChannel.getDefaultInstance() : microphoneChannel_;
    }
    /**
     * <pre>
     * Channels
     * </pre>
     *
     * <code>.MicrophoneChannel microphone_channel = 33;</code>
     */
    public RedvoxApi1000.MicrophoneChannelOrBuilder getMicrophoneChannelOrBuilder() {
      return getMicrophoneChannel();
    }

    public static final int BAROMETER_CHANNEL_FIELD_NUMBER = 34;
    private RedvoxApi1000.SingleChannel barometerChannel_;
    /**
     * <pre>
     * The barometer channel
     * </pre>
     *
     * <code>.SingleChannel barometer_channel = 34;</code>
     * @return Whether the barometerChannel field is set.
     */
    public boolean hasBarometerChannel() {
      return barometerChannel_ != null;
    }
    /**
     * <pre>
     * The barometer channel
     * </pre>
     *
     * <code>.SingleChannel barometer_channel = 34;</code>
     * @return The barometerChannel.
     */
    public RedvoxApi1000.SingleChannel getBarometerChannel() {
      return barometerChannel_ == null ? RedvoxApi1000.SingleChannel.getDefaultInstance() : barometerChannel_;
    }
    /**
     * <pre>
     * The barometer channel
     * </pre>
     *
     * <code>.SingleChannel barometer_channel = 34;</code>
     */
    public RedvoxApi1000.SingleChannelOrBuilder getBarometerChannelOrBuilder() {
      return getBarometerChannel();
    }

    public static final int LOCATION_CHANNEL_FIELD_NUMBER = 35;
    private RedvoxApi1000.LocationChannel locationChannel_;
    /**
     * <pre>
     * The location channel
     * </pre>
     *
     * <code>.LocationChannel location_channel = 35;</code>
     * @return Whether the locationChannel field is set.
     */
    public boolean hasLocationChannel() {
      return locationChannel_ != null;
    }
    /**
     * <pre>
     * The location channel
     * </pre>
     *
     * <code>.LocationChannel location_channel = 35;</code>
     * @return The locationChannel.
     */
    public RedvoxApi1000.LocationChannel getLocationChannel() {
      return locationChannel_ == null ? RedvoxApi1000.LocationChannel.getDefaultInstance() : locationChannel_;
    }
    /**
     * <pre>
     * The location channel
     * </pre>
     *
     * <code>.LocationChannel location_channel = 35;</code>
     */
    public RedvoxApi1000.LocationChannelOrBuilder getLocationChannelOrBuilder() {
      return getLocationChannel();
    }

    public static final int ACCELEROMETER_CHANNEL_FIELD_NUMBER = 36;
    private RedvoxApi1000.XyzChannel accelerometerChannel_;
    /**
     * <pre>
     * The accelerometer channel
     * </pre>
     *
     * <code>.XyzChannel accelerometer_channel = 36;</code>
     * @return Whether the accelerometerChannel field is set.
     */
    public boolean hasAccelerometerChannel() {
      return accelerometerChannel_ != null;
    }
    /**
     * <pre>
     * The accelerometer channel
     * </pre>
     *
     * <code>.XyzChannel accelerometer_channel = 36;</code>
     * @return The accelerometerChannel.
     */
    public RedvoxApi1000.XyzChannel getAccelerometerChannel() {
      return accelerometerChannel_ == null ? RedvoxApi1000.XyzChannel.getDefaultInstance() : accelerometerChannel_;
    }
    /**
     * <pre>
     * The accelerometer channel
     * </pre>
     *
     * <code>.XyzChannel accelerometer_channel = 36;</code>
     */
    public RedvoxApi1000.XyzChannelOrBuilder getAccelerometerChannelOrBuilder() {
      return getAccelerometerChannel();
    }

    public static final int GYROSCOPE_CHANNEL_FIELD_NUMBER = 37;
    private RedvoxApi1000.XyzChannel gyroscopeChannel_;
    /**
     * <pre>
     * The gyroscope channel
     * </pre>
     *
     * <code>.XyzChannel gyroscope_channel = 37;</code>
     * @return Whether the gyroscopeChannel field is set.
     */
    public boolean hasGyroscopeChannel() {
      return gyroscopeChannel_ != null;
    }
    /**
     * <pre>
     * The gyroscope channel
     * </pre>
     *
     * <code>.XyzChannel gyroscope_channel = 37;</code>
     * @return The gyroscopeChannel.
     */
    public RedvoxApi1000.XyzChannel getGyroscopeChannel() {
      return gyroscopeChannel_ == null ? RedvoxApi1000.XyzChannel.getDefaultInstance() : gyroscopeChannel_;
    }
    /**
     * <pre>
     * The gyroscope channel
     * </pre>
     *
     * <code>.XyzChannel gyroscope_channel = 37;</code>
     */
    public RedvoxApi1000.XyzChannelOrBuilder getGyroscopeChannelOrBuilder() {
      return getGyroscopeChannel();
    }

    public static final int MAGNETOMETER_CHANNEL_FIELD_NUMBER = 38;
    private RedvoxApi1000.XyzChannel magnetometerChannel_;
    /**
     * <pre>
     * The magnetometer channel
     * </pre>
     *
     * <code>.XyzChannel magnetometer_channel = 38;</code>
     * @return Whether the magnetometerChannel field is set.
     */
    public boolean hasMagnetometerChannel() {
      return magnetometerChannel_ != null;
    }
    /**
     * <pre>
     * The magnetometer channel
     * </pre>
     *
     * <code>.XyzChannel magnetometer_channel = 38;</code>
     * @return The magnetometerChannel.
     */
    public RedvoxApi1000.XyzChannel getMagnetometerChannel() {
      return magnetometerChannel_ == null ? RedvoxApi1000.XyzChannel.getDefaultInstance() : magnetometerChannel_;
    }
    /**
     * <pre>
     * The magnetometer channel
     * </pre>
     *
     * <code>.XyzChannel magnetometer_channel = 38;</code>
     */
    public RedvoxApi1000.XyzChannelOrBuilder getMagnetometerChannelOrBuilder() {
      return getMagnetometerChannel();
    }

    public static final int LIGHT_CHANNEL_FIELD_NUMBER = 39;
    private RedvoxApi1000.SingleChannel lightChannel_;
    /**
     * <pre>
     * The light channel
     * </pre>
     *
     * <code>.SingleChannel light_channel = 39;</code>
     * @return Whether the lightChannel field is set.
     */
    public boolean hasLightChannel() {
      return lightChannel_ != null;
    }
    /**
     * <pre>
     * The light channel
     * </pre>
     *
     * <code>.SingleChannel light_channel = 39;</code>
     * @return The lightChannel.
     */
    public RedvoxApi1000.SingleChannel getLightChannel() {
      return lightChannel_ == null ? RedvoxApi1000.SingleChannel.getDefaultInstance() : lightChannel_;
    }
    /**
     * <pre>
     * The light channel
     * </pre>
     *
     * <code>.SingleChannel light_channel = 39;</code>
     */
    public RedvoxApi1000.SingleChannelOrBuilder getLightChannelOrBuilder() {
      return getLightChannel();
    }

    public static final int INFRARED_CHANNEL_FIELD_NUMBER = 40;
    private RedvoxApi1000.SingleChannel infraredChannel_;
    /**
     * <pre>
     * The infrared channel
     * </pre>
     *
     * <code>.SingleChannel infrared_channel = 40;</code>
     * @return Whether the infraredChannel field is set.
     */
    public boolean hasInfraredChannel() {
      return infraredChannel_ != null;
    }
    /**
     * <pre>
     * The infrared channel
     * </pre>
     *
     * <code>.SingleChannel infrared_channel = 40;</code>
     * @return The infraredChannel.
     */
    public RedvoxApi1000.SingleChannel getInfraredChannel() {
      return infraredChannel_ == null ? RedvoxApi1000.SingleChannel.getDefaultInstance() : infraredChannel_;
    }
    /**
     * <pre>
     * The infrared channel
     * </pre>
     *
     * <code>.SingleChannel infrared_channel = 40;</code>
     */
    public RedvoxApi1000.SingleChannelOrBuilder getInfraredChannelOrBuilder() {
      return getInfraredChannel();
    }

    public static final int METADATA_FIELD_NUMBER = 41;
    private static final class MetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  RedvoxApi1000.internal_static_RedvoxPacket1000_MetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }

    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 41;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (api_ != 0) {
        output.writeUInt32(1, api_);
      }
      if (!getAuthEmailBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, authEmail_);
      }
      if (!getAuthTokenBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, authToken_);
      }
      if (!getFirebaseTokenBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, firebaseToken_);
      }
      if (!getDeviceIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, deviceId_);
      }
      if (!getDeviceUuidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, deviceUuid_);
      }
      if (!getDeviceMakeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, deviceMake_);
      }
      if (!getDeviceModelBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, deviceModel_);
      }
      if (deviceOs_ != RedvoxApi1000.RedvoxPacket1000.OsType.ANDROID.getNumber()) {
        output.writeEnum(9, deviceOs_);
      }
      if (!getDeviceOsVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, deviceOsVersion_);
      }
      if (!getDeviceAppVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, deviceAppVersion_);
      }
      if (deviceTempC_ != 0D) {
        output.writeDouble(12, deviceTempC_);
      }
      if (deviceBatteryPercent_ != 0D) {
        output.writeDouble(13, deviceBatteryPercent_);
      }
      if (networkType_ != RedvoxApi1000.RedvoxPacket1000.NetworkType.WIFI.getNumber()) {
        output.writeEnum(14, networkType_);
      }
      if (networkStrengthDb_ != 0D) {
        output.writeDouble(15, networkStrengthDb_);
      }
      if (isBackfilled_ != false) {
        output.writeBool(16, isBackfilled_);
      }
      if (isPrivate_ != false) {
        output.writeBool(17, isPrivate_);
      }
      if (isMicScrambled_ != false) {
        output.writeBool(18, isMicScrambled_);
      }
      if (uncompressedSizeBytes_ != 0D) {
        output.writeDouble(19, uncompressedSizeBytes_);
      }
      if (compressedSizeBytes_ != 0D) {
        output.writeDouble(20, compressedSizeBytes_);
      }
      if (!getAuthServerUrlBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 21, authServerUrl_);
      }
      if (!getSynchServerUrlBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 22, synchServerUrl_);
      }
      if (!getAcquisitionServerUrlBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 23, acquisitionServerUrl_);
      }
      if (packetStartTsUsWall_ != 0D) {
        output.writeDouble(24, packetStartTsUsWall_);
      }
      if (packetStartTsUsMach_ != 0D) {
        output.writeDouble(25, packetStartTsUsMach_);
      }
      if (packetEndTsUsWall_ != 0D) {
        output.writeDouble(26, packetEndTsUsWall_);
      }
      if (packetEndTsUsMach_ != 0D) {
        output.writeDouble(27, packetEndTsUsMach_);
      }
      if (serverAcquisitionArrivalTsUs_ != 0D) {
        output.writeDouble(28, serverAcquisitionArrivalTsUs_);
      }
      if (appStartTsUsMach_ != 0D) {
        output.writeDouble(29, appStartTsUsMach_);
      }
      if (getSynchParamsList().size() > 0) {
        output.writeUInt32NoTag(242);
        output.writeUInt32NoTag(synchParamsMemoizedSerializedSize);
      }
      for (int i = 0; i < synchParams_.size(); i++) {
        output.writeDoubleNoTag(synchParams_.getDouble(i));
      }
      if (bestLatencyUs_ != 0D) {
        output.writeDouble(31, bestLatencyUs_);
      }
      if (bestOffsetUs_ != 0D) {
        output.writeDouble(32, bestOffsetUs_);
      }
      if (microphoneChannel_ != null) {
        output.writeMessage(33, getMicrophoneChannel());
      }
      if (barometerChannel_ != null) {
        output.writeMessage(34, getBarometerChannel());
      }
      if (locationChannel_ != null) {
        output.writeMessage(35, getLocationChannel());
      }
      if (accelerometerChannel_ != null) {
        output.writeMessage(36, getAccelerometerChannel());
      }
      if (gyroscopeChannel_ != null) {
        output.writeMessage(37, getGyroscopeChannel());
      }
      if (magnetometerChannel_ != null) {
        output.writeMessage(38, getMagnetometerChannel());
      }
      if (lightChannel_ != null) {
        output.writeMessage(39, getLightChannel());
      }
      if (infraredChannel_ != null) {
        output.writeMessage(40, getInfraredChannel());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMetadata(),
          MetadataDefaultEntryHolder.defaultEntry,
          41);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (api_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, api_);
      }
      if (!getAuthEmailBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, authEmail_);
      }
      if (!getAuthTokenBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, authToken_);
      }
      if (!getFirebaseTokenBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, firebaseToken_);
      }
      if (!getDeviceIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, deviceId_);
      }
      if (!getDeviceUuidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, deviceUuid_);
      }
      if (!getDeviceMakeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, deviceMake_);
      }
      if (!getDeviceModelBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, deviceModel_);
      }
      if (deviceOs_ != RedvoxApi1000.RedvoxPacket1000.OsType.ANDROID.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, deviceOs_);
      }
      if (!getDeviceOsVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, deviceOsVersion_);
      }
      if (!getDeviceAppVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, deviceAppVersion_);
      }
      if (deviceTempC_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, deviceTempC_);
      }
      if (deviceBatteryPercent_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, deviceBatteryPercent_);
      }
      if (networkType_ != RedvoxApi1000.RedvoxPacket1000.NetworkType.WIFI.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, networkType_);
      }
      if (networkStrengthDb_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, networkStrengthDb_);
      }
      if (isBackfilled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, isBackfilled_);
      }
      if (isPrivate_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, isPrivate_);
      }
      if (isMicScrambled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, isMicScrambled_);
      }
      if (uncompressedSizeBytes_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(19, uncompressedSizeBytes_);
      }
      if (compressedSizeBytes_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(20, compressedSizeBytes_);
      }
      if (!getAuthServerUrlBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(21, authServerUrl_);
      }
      if (!getSynchServerUrlBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(22, synchServerUrl_);
      }
      if (!getAcquisitionServerUrlBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(23, acquisitionServerUrl_);
      }
      if (packetStartTsUsWall_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(24, packetStartTsUsWall_);
      }
      if (packetStartTsUsMach_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(25, packetStartTsUsMach_);
      }
      if (packetEndTsUsWall_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(26, packetEndTsUsWall_);
      }
      if (packetEndTsUsMach_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(27, packetEndTsUsMach_);
      }
      if (serverAcquisitionArrivalTsUs_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(28, serverAcquisitionArrivalTsUs_);
      }
      if (appStartTsUsMach_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(29, appStartTsUsMach_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSynchParamsList().size();
        size += dataSize;
        if (!getSynchParamsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        synchParamsMemoizedSerializedSize = dataSize;
      }
      if (bestLatencyUs_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(31, bestLatencyUs_);
      }
      if (bestOffsetUs_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(32, bestOffsetUs_);
      }
      if (microphoneChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, getMicrophoneChannel());
      }
      if (barometerChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, getBarometerChannel());
      }
      if (locationChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, getLocationChannel());
      }
      if (accelerometerChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, getAccelerometerChannel());
      }
      if (gyroscopeChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, getGyroscopeChannel());
      }
      if (magnetometerChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, getMagnetometerChannel());
      }
      if (lightChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, getLightChannel());
      }
      if (infraredChannel_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, getInfraredChannel());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(41, metadata__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RedvoxApi1000.RedvoxPacket1000)) {
        return super.equals(obj);
      }
      RedvoxApi1000.RedvoxPacket1000 other = (RedvoxApi1000.RedvoxPacket1000) obj;

      if (getApi()
          != other.getApi()) return false;
      if (!getAuthEmail()
          .equals(other.getAuthEmail())) return false;
      if (!getAuthToken()
          .equals(other.getAuthToken())) return false;
      if (!getFirebaseToken()
          .equals(other.getFirebaseToken())) return false;
      if (!getDeviceId()
          .equals(other.getDeviceId())) return false;
      if (!getDeviceUuid()
          .equals(other.getDeviceUuid())) return false;
      if (!getDeviceMake()
          .equals(other.getDeviceMake())) return false;
      if (!getDeviceModel()
          .equals(other.getDeviceModel())) return false;
      if (deviceOs_ != other.deviceOs_) return false;
      if (!getDeviceOsVersion()
          .equals(other.getDeviceOsVersion())) return false;
      if (!getDeviceAppVersion()
          .equals(other.getDeviceAppVersion())) return false;
      if (java.lang.Double.doubleToLongBits(getDeviceTempC())
          != java.lang.Double.doubleToLongBits(
              other.getDeviceTempC())) return false;
      if (java.lang.Double.doubleToLongBits(getDeviceBatteryPercent())
          != java.lang.Double.doubleToLongBits(
              other.getDeviceBatteryPercent())) return false;
      if (networkType_ != other.networkType_) return false;
      if (java.lang.Double.doubleToLongBits(getNetworkStrengthDb())
          != java.lang.Double.doubleToLongBits(
              other.getNetworkStrengthDb())) return false;
      if (getIsBackfilled()
          != other.getIsBackfilled()) return false;
      if (getIsPrivate()
          != other.getIsPrivate()) return false;
      if (getIsMicScrambled()
          != other.getIsMicScrambled()) return false;
      if (java.lang.Double.doubleToLongBits(getUncompressedSizeBytes())
          != java.lang.Double.doubleToLongBits(
              other.getUncompressedSizeBytes())) return false;
      if (java.lang.Double.doubleToLongBits(getCompressedSizeBytes())
          != java.lang.Double.doubleToLongBits(
              other.getCompressedSizeBytes())) return false;
      if (!getAuthServerUrl()
          .equals(other.getAuthServerUrl())) return false;
      if (!getSynchServerUrl()
          .equals(other.getSynchServerUrl())) return false;
      if (!getAcquisitionServerUrl()
          .equals(other.getAcquisitionServerUrl())) return false;
      if (java.lang.Double.doubleToLongBits(getPacketStartTsUsWall())
          != java.lang.Double.doubleToLongBits(
              other.getPacketStartTsUsWall())) return false;
      if (java.lang.Double.doubleToLongBits(getPacketStartTsUsMach())
          != java.lang.Double.doubleToLongBits(
              other.getPacketStartTsUsMach())) return false;
      if (java.lang.Double.doubleToLongBits(getPacketEndTsUsWall())
          != java.lang.Double.doubleToLongBits(
              other.getPacketEndTsUsWall())) return false;
      if (java.lang.Double.doubleToLongBits(getPacketEndTsUsMach())
          != java.lang.Double.doubleToLongBits(
              other.getPacketEndTsUsMach())) return false;
      if (java.lang.Double.doubleToLongBits(getServerAcquisitionArrivalTsUs())
          != java.lang.Double.doubleToLongBits(
              other.getServerAcquisitionArrivalTsUs())) return false;
      if (java.lang.Double.doubleToLongBits(getAppStartTsUsMach())
          != java.lang.Double.doubleToLongBits(
              other.getAppStartTsUsMach())) return false;
      if (!getSynchParamsList()
          .equals(other.getSynchParamsList())) return false;
      if (java.lang.Double.doubleToLongBits(getBestLatencyUs())
          != java.lang.Double.doubleToLongBits(
              other.getBestLatencyUs())) return false;
      if (java.lang.Double.doubleToLongBits(getBestOffsetUs())
          != java.lang.Double.doubleToLongBits(
              other.getBestOffsetUs())) return false;
      if (hasMicrophoneChannel() != other.hasMicrophoneChannel()) return false;
      if (hasMicrophoneChannel()) {
        if (!getMicrophoneChannel()
            .equals(other.getMicrophoneChannel())) return false;
      }
      if (hasBarometerChannel() != other.hasBarometerChannel()) return false;
      if (hasBarometerChannel()) {
        if (!getBarometerChannel()
            .equals(other.getBarometerChannel())) return false;
      }
      if (hasLocationChannel() != other.hasLocationChannel()) return false;
      if (hasLocationChannel()) {
        if (!getLocationChannel()
            .equals(other.getLocationChannel())) return false;
      }
      if (hasAccelerometerChannel() != other.hasAccelerometerChannel()) return false;
      if (hasAccelerometerChannel()) {
        if (!getAccelerometerChannel()
            .equals(other.getAccelerometerChannel())) return false;
      }
      if (hasGyroscopeChannel() != other.hasGyroscopeChannel()) return false;
      if (hasGyroscopeChannel()) {
        if (!getGyroscopeChannel()
            .equals(other.getGyroscopeChannel())) return false;
      }
      if (hasMagnetometerChannel() != other.hasMagnetometerChannel()) return false;
      if (hasMagnetometerChannel()) {
        if (!getMagnetometerChannel()
            .equals(other.getMagnetometerChannel())) return false;
      }
      if (hasLightChannel() != other.hasLightChannel()) return false;
      if (hasLightChannel()) {
        if (!getLightChannel()
            .equals(other.getLightChannel())) return false;
      }
      if (hasInfraredChannel() != other.hasInfraredChannel()) return false;
      if (hasInfraredChannel()) {
        if (!getInfraredChannel()
            .equals(other.getInfraredChannel())) return false;
      }
      if (!internalGetMetadata().equals(
          other.internalGetMetadata())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + API_FIELD_NUMBER;
      hash = (53 * hash) + getApi();
      hash = (37 * hash) + AUTH_EMAIL_FIELD_NUMBER;
      hash = (53 * hash) + getAuthEmail().hashCode();
      hash = (37 * hash) + AUTH_TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getAuthToken().hashCode();
      hash = (37 * hash) + FIREBASE_TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getFirebaseToken().hashCode();
      hash = (37 * hash) + DEVICE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDeviceId().hashCode();
      hash = (37 * hash) + DEVICE_UUID_FIELD_NUMBER;
      hash = (53 * hash) + getDeviceUuid().hashCode();
      hash = (37 * hash) + DEVICE_MAKE_FIELD_NUMBER;
      hash = (53 * hash) + getDeviceMake().hashCode();
      hash = (37 * hash) + DEVICE_MODEL_FIELD_NUMBER;
      hash = (53 * hash) + getDeviceModel().hashCode();
      hash = (37 * hash) + DEVICE_OS_FIELD_NUMBER;
      hash = (53 * hash) + deviceOs_;
      hash = (37 * hash) + DEVICE_OS_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getDeviceOsVersion().hashCode();
      hash = (37 * hash) + DEVICE_APP_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getDeviceAppVersion().hashCode();
      hash = (37 * hash) + DEVICE_TEMP_C_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getDeviceTempC()));
      hash = (37 * hash) + DEVICE_BATTERY_PERCENT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getDeviceBatteryPercent()));
      hash = (37 * hash) + NETWORK_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + networkType_;
      hash = (37 * hash) + NETWORK_STRENGTH_DB_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getNetworkStrengthDb()));
      hash = (37 * hash) + IS_BACKFILLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsBackfilled());
      hash = (37 * hash) + IS_PRIVATE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsPrivate());
      hash = (37 * hash) + IS_MIC_SCRAMBLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsMicScrambled());
      hash = (37 * hash) + UNCOMPRESSED_SIZE_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getUncompressedSizeBytes()));
      hash = (37 * hash) + COMPRESSED_SIZE_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCompressedSizeBytes()));
      hash = (37 * hash) + AUTH_SERVER_URL_FIELD_NUMBER;
      hash = (53 * hash) + getAuthServerUrl().hashCode();
      hash = (37 * hash) + SYNCH_SERVER_URL_FIELD_NUMBER;
      hash = (53 * hash) + getSynchServerUrl().hashCode();
      hash = (37 * hash) + ACQUISITION_SERVER_URL_FIELD_NUMBER;
      hash = (53 * hash) + getAcquisitionServerUrl().hashCode();
      hash = (37 * hash) + PACKET_START_TS_US_WALL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPacketStartTsUsWall()));
      hash = (37 * hash) + PACKET_START_TS_US_MACH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPacketStartTsUsMach()));
      hash = (37 * hash) + PACKET_END_TS_US_WALL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPacketEndTsUsWall()));
      hash = (37 * hash) + PACKET_END_TS_US_MACH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPacketEndTsUsMach()));
      hash = (37 * hash) + SERVER_ACQUISITION_ARRIVAL_TS_US_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getServerAcquisitionArrivalTsUs()));
      hash = (37 * hash) + APP_START_TS_US_MACH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAppStartTsUsMach()));
      if (getSynchParamsCount() > 0) {
        hash = (37 * hash) + SYNCH_PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getSynchParamsList().hashCode();
      }
      hash = (37 * hash) + BEST_LATENCY_US_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getBestLatencyUs()));
      hash = (37 * hash) + BEST_OFFSET_US_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getBestOffsetUs()));
      if (hasMicrophoneChannel()) {
        hash = (37 * hash) + MICROPHONE_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getMicrophoneChannel().hashCode();
      }
      if (hasBarometerChannel()) {
        hash = (37 * hash) + BAROMETER_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getBarometerChannel().hashCode();
      }
      if (hasLocationChannel()) {
        hash = (37 * hash) + LOCATION_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getLocationChannel().hashCode();
      }
      if (hasAccelerometerChannel()) {
        hash = (37 * hash) + ACCELEROMETER_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getAccelerometerChannel().hashCode();
      }
      if (hasGyroscopeChannel()) {
        hash = (37 * hash) + GYROSCOPE_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getGyroscopeChannel().hashCode();
      }
      if (hasMagnetometerChannel()) {
        hash = (37 * hash) + MAGNETOMETER_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getMagnetometerChannel().hashCode();
      }
      if (hasLightChannel()) {
        hash = (37 * hash) + LIGHT_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getLightChannel().hashCode();
      }
      if (hasInfraredChannel()) {
        hash = (37 * hash) + INFRARED_CHANNEL_FIELD_NUMBER;
        hash = (53 * hash) + getInfraredChannel().hashCode();
      }
      if (!internalGetMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMetadata().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.RedvoxPacket1000 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RedvoxApi1000.RedvoxPacket1000 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message type for encoding API 1000 RedVox packets.
     * </pre>
     *
     * Protobuf type {@code RedvoxPacket1000}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RedvoxPacket1000)
        RedvoxApi1000.RedvoxPacket1000OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RedvoxApi1000.internal_static_RedvoxPacket1000_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 41:
            return internalGetMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 41:
            return internalGetMutableMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RedvoxApi1000.internal_static_RedvoxPacket1000_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RedvoxApi1000.RedvoxPacket1000.class, RedvoxApi1000.RedvoxPacket1000.Builder.class);
      }

      // Construct using RedvoxApi1000.RedvoxPacket1000.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        api_ = 0;

        authEmail_ = "";

        authToken_ = "";

        firebaseToken_ = "";

        deviceId_ = "";

        deviceUuid_ = "";

        deviceMake_ = "";

        deviceModel_ = "";

        deviceOs_ = 0;

        deviceOsVersion_ = "";

        deviceAppVersion_ = "";

        deviceTempC_ = 0D;

        deviceBatteryPercent_ = 0D;

        networkType_ = 0;

        networkStrengthDb_ = 0D;

        isBackfilled_ = false;

        isPrivate_ = false;

        isMicScrambled_ = false;

        uncompressedSizeBytes_ = 0D;

        compressedSizeBytes_ = 0D;

        authServerUrl_ = "";

        synchServerUrl_ = "";

        acquisitionServerUrl_ = "";

        packetStartTsUsWall_ = 0D;

        packetStartTsUsMach_ = 0D;

        packetEndTsUsWall_ = 0D;

        packetEndTsUsMach_ = 0D;

        serverAcquisitionArrivalTsUs_ = 0D;

        appStartTsUsMach_ = 0D;

        synchParams_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        bestLatencyUs_ = 0D;

        bestOffsetUs_ = 0D;

        if (microphoneChannelBuilder_ == null) {
          microphoneChannel_ = null;
        } else {
          microphoneChannel_ = null;
          microphoneChannelBuilder_ = null;
        }
        if (barometerChannelBuilder_ == null) {
          barometerChannel_ = null;
        } else {
          barometerChannel_ = null;
          barometerChannelBuilder_ = null;
        }
        if (locationChannelBuilder_ == null) {
          locationChannel_ = null;
        } else {
          locationChannel_ = null;
          locationChannelBuilder_ = null;
        }
        if (accelerometerChannelBuilder_ == null) {
          accelerometerChannel_ = null;
        } else {
          accelerometerChannel_ = null;
          accelerometerChannelBuilder_ = null;
        }
        if (gyroscopeChannelBuilder_ == null) {
          gyroscopeChannel_ = null;
        } else {
          gyroscopeChannel_ = null;
          gyroscopeChannelBuilder_ = null;
        }
        if (magnetometerChannelBuilder_ == null) {
          magnetometerChannel_ = null;
        } else {
          magnetometerChannel_ = null;
          magnetometerChannelBuilder_ = null;
        }
        if (lightChannelBuilder_ == null) {
          lightChannel_ = null;
        } else {
          lightChannel_ = null;
          lightChannelBuilder_ = null;
        }
        if (infraredChannelBuilder_ == null) {
          infraredChannel_ = null;
        } else {
          infraredChannel_ = null;
          infraredChannelBuilder_ = null;
        }
        internalGetMutableMetadata().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RedvoxApi1000.internal_static_RedvoxPacket1000_descriptor;
      }

      @java.lang.Override
      public RedvoxApi1000.RedvoxPacket1000 getDefaultInstanceForType() {
        return RedvoxApi1000.RedvoxPacket1000.getDefaultInstance();
      }

      @java.lang.Override
      public RedvoxApi1000.RedvoxPacket1000 build() {
        RedvoxApi1000.RedvoxPacket1000 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public RedvoxApi1000.RedvoxPacket1000 buildPartial() {
        RedvoxApi1000.RedvoxPacket1000 result = new RedvoxApi1000.RedvoxPacket1000(this);
        int from_bitField0_ = bitField0_;
        result.api_ = api_;
        result.authEmail_ = authEmail_;
        result.authToken_ = authToken_;
        result.firebaseToken_ = firebaseToken_;
        result.deviceId_ = deviceId_;
        result.deviceUuid_ = deviceUuid_;
        result.deviceMake_ = deviceMake_;
        result.deviceModel_ = deviceModel_;
        result.deviceOs_ = deviceOs_;
        result.deviceOsVersion_ = deviceOsVersion_;
        result.deviceAppVersion_ = deviceAppVersion_;
        result.deviceTempC_ = deviceTempC_;
        result.deviceBatteryPercent_ = deviceBatteryPercent_;
        result.networkType_ = networkType_;
        result.networkStrengthDb_ = networkStrengthDb_;
        result.isBackfilled_ = isBackfilled_;
        result.isPrivate_ = isPrivate_;
        result.isMicScrambled_ = isMicScrambled_;
        result.uncompressedSizeBytes_ = uncompressedSizeBytes_;
        result.compressedSizeBytes_ = compressedSizeBytes_;
        result.authServerUrl_ = authServerUrl_;
        result.synchServerUrl_ = synchServerUrl_;
        result.acquisitionServerUrl_ = acquisitionServerUrl_;
        result.packetStartTsUsWall_ = packetStartTsUsWall_;
        result.packetStartTsUsMach_ = packetStartTsUsMach_;
        result.packetEndTsUsWall_ = packetEndTsUsWall_;
        result.packetEndTsUsMach_ = packetEndTsUsMach_;
        result.serverAcquisitionArrivalTsUs_ = serverAcquisitionArrivalTsUs_;
        result.appStartTsUsMach_ = appStartTsUsMach_;
        if (((bitField0_ & 0x00000001) != 0)) {
          synchParams_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.synchParams_ = synchParams_;
        result.bestLatencyUs_ = bestLatencyUs_;
        result.bestOffsetUs_ = bestOffsetUs_;
        if (microphoneChannelBuilder_ == null) {
          result.microphoneChannel_ = microphoneChannel_;
        } else {
          result.microphoneChannel_ = microphoneChannelBuilder_.build();
        }
        if (barometerChannelBuilder_ == null) {
          result.barometerChannel_ = barometerChannel_;
        } else {
          result.barometerChannel_ = barometerChannelBuilder_.build();
        }
        if (locationChannelBuilder_ == null) {
          result.locationChannel_ = locationChannel_;
        } else {
          result.locationChannel_ = locationChannelBuilder_.build();
        }
        if (accelerometerChannelBuilder_ == null) {
          result.accelerometerChannel_ = accelerometerChannel_;
        } else {
          result.accelerometerChannel_ = accelerometerChannelBuilder_.build();
        }
        if (gyroscopeChannelBuilder_ == null) {
          result.gyroscopeChannel_ = gyroscopeChannel_;
        } else {
          result.gyroscopeChannel_ = gyroscopeChannelBuilder_.build();
        }
        if (magnetometerChannelBuilder_ == null) {
          result.magnetometerChannel_ = magnetometerChannel_;
        } else {
          result.magnetometerChannel_ = magnetometerChannelBuilder_.build();
        }
        if (lightChannelBuilder_ == null) {
          result.lightChannel_ = lightChannel_;
        } else {
          result.lightChannel_ = lightChannelBuilder_.build();
        }
        if (infraredChannelBuilder_ == null) {
          result.infraredChannel_ = infraredChannel_;
        } else {
          result.infraredChannel_ = infraredChannelBuilder_.build();
        }
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RedvoxApi1000.RedvoxPacket1000) {
          return mergeFrom((RedvoxApi1000.RedvoxPacket1000)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RedvoxApi1000.RedvoxPacket1000 other) {
        if (other == RedvoxApi1000.RedvoxPacket1000.getDefaultInstance()) return this;
        if (other.getApi() != 0) {
          setApi(other.getApi());
        }
        if (!other.getAuthEmail().isEmpty()) {
          authEmail_ = other.authEmail_;
          onChanged();
        }
        if (!other.getAuthToken().isEmpty()) {
          authToken_ = other.authToken_;
          onChanged();
        }
        if (!other.getFirebaseToken().isEmpty()) {
          firebaseToken_ = other.firebaseToken_;
          onChanged();
        }
        if (!other.getDeviceId().isEmpty()) {
          deviceId_ = other.deviceId_;
          onChanged();
        }
        if (!other.getDeviceUuid().isEmpty()) {
          deviceUuid_ = other.deviceUuid_;
          onChanged();
        }
        if (!other.getDeviceMake().isEmpty()) {
          deviceMake_ = other.deviceMake_;
          onChanged();
        }
        if (!other.getDeviceModel().isEmpty()) {
          deviceModel_ = other.deviceModel_;
          onChanged();
        }
        if (other.deviceOs_ != 0) {
          setDeviceOsValue(other.getDeviceOsValue());
        }
        if (!other.getDeviceOsVersion().isEmpty()) {
          deviceOsVersion_ = other.deviceOsVersion_;
          onChanged();
        }
        if (!other.getDeviceAppVersion().isEmpty()) {
          deviceAppVersion_ = other.deviceAppVersion_;
          onChanged();
        }
        if (other.getDeviceTempC() != 0D) {
          setDeviceTempC(other.getDeviceTempC());
        }
        if (other.getDeviceBatteryPercent() != 0D) {
          setDeviceBatteryPercent(other.getDeviceBatteryPercent());
        }
        if (other.networkType_ != 0) {
          setNetworkTypeValue(other.getNetworkTypeValue());
        }
        if (other.getNetworkStrengthDb() != 0D) {
          setNetworkStrengthDb(other.getNetworkStrengthDb());
        }
        if (other.getIsBackfilled() != false) {
          setIsBackfilled(other.getIsBackfilled());
        }
        if (other.getIsPrivate() != false) {
          setIsPrivate(other.getIsPrivate());
        }
        if (other.getIsMicScrambled() != false) {
          setIsMicScrambled(other.getIsMicScrambled());
        }
        if (other.getUncompressedSizeBytes() != 0D) {
          setUncompressedSizeBytes(other.getUncompressedSizeBytes());
        }
        if (other.getCompressedSizeBytes() != 0D) {
          setCompressedSizeBytes(other.getCompressedSizeBytes());
        }
        if (!other.getAuthServerUrl().isEmpty()) {
          authServerUrl_ = other.authServerUrl_;
          onChanged();
        }
        if (!other.getSynchServerUrl().isEmpty()) {
          synchServerUrl_ = other.synchServerUrl_;
          onChanged();
        }
        if (!other.getAcquisitionServerUrl().isEmpty()) {
          acquisitionServerUrl_ = other.acquisitionServerUrl_;
          onChanged();
        }
        if (other.getPacketStartTsUsWall() != 0D) {
          setPacketStartTsUsWall(other.getPacketStartTsUsWall());
        }
        if (other.getPacketStartTsUsMach() != 0D) {
          setPacketStartTsUsMach(other.getPacketStartTsUsMach());
        }
        if (other.getPacketEndTsUsWall() != 0D) {
          setPacketEndTsUsWall(other.getPacketEndTsUsWall());
        }
        if (other.getPacketEndTsUsMach() != 0D) {
          setPacketEndTsUsMach(other.getPacketEndTsUsMach());
        }
        if (other.getServerAcquisitionArrivalTsUs() != 0D) {
          setServerAcquisitionArrivalTsUs(other.getServerAcquisitionArrivalTsUs());
        }
        if (other.getAppStartTsUsMach() != 0D) {
          setAppStartTsUsMach(other.getAppStartTsUsMach());
        }
        if (!other.synchParams_.isEmpty()) {
          if (synchParams_.isEmpty()) {
            synchParams_ = other.synchParams_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSynchParamsIsMutable();
            synchParams_.addAll(other.synchParams_);
          }
          onChanged();
        }
        if (other.getBestLatencyUs() != 0D) {
          setBestLatencyUs(other.getBestLatencyUs());
        }
        if (other.getBestOffsetUs() != 0D) {
          setBestOffsetUs(other.getBestOffsetUs());
        }
        if (other.hasMicrophoneChannel()) {
          mergeMicrophoneChannel(other.getMicrophoneChannel());
        }
        if (other.hasBarometerChannel()) {
          mergeBarometerChannel(other.getBarometerChannel());
        }
        if (other.hasLocationChannel()) {
          mergeLocationChannel(other.getLocationChannel());
        }
        if (other.hasAccelerometerChannel()) {
          mergeAccelerometerChannel(other.getAccelerometerChannel());
        }
        if (other.hasGyroscopeChannel()) {
          mergeGyroscopeChannel(other.getGyroscopeChannel());
        }
        if (other.hasMagnetometerChannel()) {
          mergeMagnetometerChannel(other.getMagnetometerChannel());
        }
        if (other.hasLightChannel()) {
          mergeLightChannel(other.getLightChannel());
        }
        if (other.hasInfraredChannel()) {
          mergeInfraredChannel(other.getInfraredChannel());
        }
        internalGetMutableMetadata().mergeFrom(
            other.internalGetMetadata());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RedvoxApi1000.RedvoxPacket1000 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RedvoxApi1000.RedvoxPacket1000) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int api_ ;
      /**
       * <pre>
       * API Version
       * </pre>
       *
       * <code>uint32 api = 1;</code>
       * @return The api.
       */
      public int getApi() {
        return api_;
      }
      /**
       * <pre>
       * API Version
       * </pre>
       *
       * <code>uint32 api = 1;</code>
       * @param value The api to set.
       * @return This builder for chaining.
       */
      public Builder setApi(int value) {
        
        api_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * API Version
       * </pre>
       *
       * <code>uint32 api = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearApi() {
        
        api_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object authEmail_ = "";
      /**
       * <pre>
       * User information
       * </pre>
       *
       * <code>string auth_email = 2;</code>
       * @return The authEmail.
       */
      public java.lang.String getAuthEmail() {
        java.lang.Object ref = authEmail_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          authEmail_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * User information
       * </pre>
       *
       * <code>string auth_email = 2;</code>
       * @return The bytes for authEmail.
       */
      public com.google.protobuf.ByteString
          getAuthEmailBytes() {
        java.lang.Object ref = authEmail_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          authEmail_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * User information
       * </pre>
       *
       * <code>string auth_email = 2;</code>
       * @param value The authEmail to set.
       * @return This builder for chaining.
       */
      public Builder setAuthEmail(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        authEmail_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * User information
       * </pre>
       *
       * <code>string auth_email = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuthEmail() {
        
        authEmail_ = getDefaultInstance().getAuthEmail();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * User information
       * </pre>
       *
       * <code>string auth_email = 2;</code>
       * @param value The bytes for authEmail to set.
       * @return This builder for chaining.
       */
      public Builder setAuthEmailBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        authEmail_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object authToken_ = "";
      /**
       * <pre>
       * The JWT token used for authentication
       * </pre>
       *
       * <code>string auth_token = 3;</code>
       * @return The authToken.
       */
      public java.lang.String getAuthToken() {
        java.lang.Object ref = authToken_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          authToken_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The JWT token used for authentication
       * </pre>
       *
       * <code>string auth_token = 3;</code>
       * @return The bytes for authToken.
       */
      public com.google.protobuf.ByteString
          getAuthTokenBytes() {
        java.lang.Object ref = authToken_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          authToken_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The JWT token used for authentication
       * </pre>
       *
       * <code>string auth_token = 3;</code>
       * @param value The authToken to set.
       * @return This builder for chaining.
       */
      public Builder setAuthToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        authToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The JWT token used for authentication
       * </pre>
       *
       * <code>string auth_token = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuthToken() {
        
        authToken_ = getDefaultInstance().getAuthToken();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The JWT token used for authentication
       * </pre>
       *
       * <code>string auth_token = 3;</code>
       * @param value The bytes for authToken to set.
       * @return This builder for chaining.
       */
      public Builder setAuthTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        authToken_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object firebaseToken_ = "";
      /**
       * <pre>
       * The assigned firebase token
       * </pre>
       *
       * <code>string firebase_token = 4;</code>
       * @return The firebaseToken.
       */
      public java.lang.String getFirebaseToken() {
        java.lang.Object ref = firebaseToken_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          firebaseToken_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The assigned firebase token
       * </pre>
       *
       * <code>string firebase_token = 4;</code>
       * @return The bytes for firebaseToken.
       */
      public com.google.protobuf.ByteString
          getFirebaseTokenBytes() {
        java.lang.Object ref = firebaseToken_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          firebaseToken_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The assigned firebase token
       * </pre>
       *
       * <code>string firebase_token = 4;</code>
       * @param value The firebaseToken to set.
       * @return This builder for chaining.
       */
      public Builder setFirebaseToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        firebaseToken_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The assigned firebase token
       * </pre>
       *
       * <code>string firebase_token = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFirebaseToken() {
        
        firebaseToken_ = getDefaultInstance().getFirebaseToken();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The assigned firebase token
       * </pre>
       *
       * <code>string firebase_token = 4;</code>
       * @param value The bytes for firebaseToken to set.
       * @return This builder for chaining.
       */
      public Builder setFirebaseTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        firebaseToken_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object deviceId_ = "";
      /**
       * <pre>
       * Device information
       * </pre>
       *
       * <code>string device_id = 5;</code>
       * @return The deviceId.
       */
      public java.lang.String getDeviceId() {
        java.lang.Object ref = deviceId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deviceId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Device information
       * </pre>
       *
       * <code>string device_id = 5;</code>
       * @return The bytes for deviceId.
       */
      public com.google.protobuf.ByteString
          getDeviceIdBytes() {
        java.lang.Object ref = deviceId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Device information
       * </pre>
       *
       * <code>string device_id = 5;</code>
       * @param value The deviceId to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deviceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Device information
       * </pre>
       *
       * <code>string device_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceId() {
        
        deviceId_ = getDefaultInstance().getDeviceId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Device information
       * </pre>
       *
       * <code>string device_id = 5;</code>
       * @param value The bytes for deviceId to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deviceId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object deviceUuid_ = "";
      /**
       * <pre>
       * The app provided UUID
       * </pre>
       *
       * <code>string device_uuid = 6;</code>
       * @return The deviceUuid.
       */
      public java.lang.String getDeviceUuid() {
        java.lang.Object ref = deviceUuid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deviceUuid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The app provided UUID
       * </pre>
       *
       * <code>string device_uuid = 6;</code>
       * @return The bytes for deviceUuid.
       */
      public com.google.protobuf.ByteString
          getDeviceUuidBytes() {
        java.lang.Object ref = deviceUuid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceUuid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The app provided UUID
       * </pre>
       *
       * <code>string device_uuid = 6;</code>
       * @param value The deviceUuid to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceUuid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deviceUuid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The app provided UUID
       * </pre>
       *
       * <code>string device_uuid = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceUuid() {
        
        deviceUuid_ = getDefaultInstance().getDeviceUuid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The app provided UUID
       * </pre>
       *
       * <code>string device_uuid = 6;</code>
       * @param value The bytes for deviceUuid to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceUuidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deviceUuid_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object deviceMake_ = "";
      /**
       * <pre>
       * Make of the device
       * </pre>
       *
       * <code>string device_make = 7;</code>
       * @return The deviceMake.
       */
      public java.lang.String getDeviceMake() {
        java.lang.Object ref = deviceMake_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deviceMake_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Make of the device
       * </pre>
       *
       * <code>string device_make = 7;</code>
       * @return The bytes for deviceMake.
       */
      public com.google.protobuf.ByteString
          getDeviceMakeBytes() {
        java.lang.Object ref = deviceMake_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceMake_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Make of the device
       * </pre>
       *
       * <code>string device_make = 7;</code>
       * @param value The deviceMake to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceMake(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deviceMake_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Make of the device
       * </pre>
       *
       * <code>string device_make = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceMake() {
        
        deviceMake_ = getDefaultInstance().getDeviceMake();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Make of the device
       * </pre>
       *
       * <code>string device_make = 7;</code>
       * @param value The bytes for deviceMake to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceMakeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deviceMake_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object deviceModel_ = "";
      /**
       * <pre>
       * Model of the device
       * </pre>
       *
       * <code>string device_model = 8;</code>
       * @return The deviceModel.
       */
      public java.lang.String getDeviceModel() {
        java.lang.Object ref = deviceModel_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deviceModel_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Model of the device
       * </pre>
       *
       * <code>string device_model = 8;</code>
       * @return The bytes for deviceModel.
       */
      public com.google.protobuf.ByteString
          getDeviceModelBytes() {
        java.lang.Object ref = deviceModel_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceModel_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Model of the device
       * </pre>
       *
       * <code>string device_model = 8;</code>
       * @param value The deviceModel to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceModel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deviceModel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Model of the device
       * </pre>
       *
       * <code>string device_model = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceModel() {
        
        deviceModel_ = getDefaultInstance().getDeviceModel();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Model of the device
       * </pre>
       *
       * <code>string device_model = 8;</code>
       * @param value The bytes for deviceModel to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceModelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deviceModel_ = value;
        onChanged();
        return this;
      }

      private int deviceOs_ = 0;
      /**
       * <pre>
       * OS of the device
       * </pre>
       *
       * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
       * @return The enum numeric value on the wire for deviceOs.
       */
      public int getDeviceOsValue() {
        return deviceOs_;
      }
      /**
       * <pre>
       * OS of the device
       * </pre>
       *
       * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
       * @param value The enum numeric value on the wire for deviceOs to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceOsValue(int value) {
        deviceOs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * OS of the device
       * </pre>
       *
       * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
       * @return The deviceOs.
       */
      public RedvoxApi1000.RedvoxPacket1000.OsType getDeviceOs() {
        @SuppressWarnings("deprecation")
        RedvoxApi1000.RedvoxPacket1000.OsType result = RedvoxApi1000.RedvoxPacket1000.OsType.valueOf(deviceOs_);
        return result == null ? RedvoxApi1000.RedvoxPacket1000.OsType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * OS of the device
       * </pre>
       *
       * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
       * @param value The deviceOs to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceOs(RedvoxApi1000.RedvoxPacket1000.OsType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        deviceOs_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * OS of the device
       * </pre>
       *
       * <code>.RedvoxPacket1000.OsType device_os = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceOs() {
        
        deviceOs_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object deviceOsVersion_ = "";
      /**
       * <pre>
       * OS version of the device
       * </pre>
       *
       * <code>string device_os_version = 10;</code>
       * @return The deviceOsVersion.
       */
      public java.lang.String getDeviceOsVersion() {
        java.lang.Object ref = deviceOsVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deviceOsVersion_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * OS version of the device
       * </pre>
       *
       * <code>string device_os_version = 10;</code>
       * @return The bytes for deviceOsVersion.
       */
      public com.google.protobuf.ByteString
          getDeviceOsVersionBytes() {
        java.lang.Object ref = deviceOsVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceOsVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * OS version of the device
       * </pre>
       *
       * <code>string device_os_version = 10;</code>
       * @param value The deviceOsVersion to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceOsVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deviceOsVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * OS version of the device
       * </pre>
       *
       * <code>string device_os_version = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceOsVersion() {
        
        deviceOsVersion_ = getDefaultInstance().getDeviceOsVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * OS version of the device
       * </pre>
       *
       * <code>string device_os_version = 10;</code>
       * @param value The bytes for deviceOsVersion to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceOsVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deviceOsVersion_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object deviceAppVersion_ = "";
      /**
       * <pre>
       * App version on the device
       * </pre>
       *
       * <code>string device_app_version = 11;</code>
       * @return The deviceAppVersion.
       */
      public java.lang.String getDeviceAppVersion() {
        java.lang.Object ref = deviceAppVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deviceAppVersion_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * App version on the device
       * </pre>
       *
       * <code>string device_app_version = 11;</code>
       * @return The bytes for deviceAppVersion.
       */
      public com.google.protobuf.ByteString
          getDeviceAppVersionBytes() {
        java.lang.Object ref = deviceAppVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceAppVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * App version on the device
       * </pre>
       *
       * <code>string device_app_version = 11;</code>
       * @param value The deviceAppVersion to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceAppVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deviceAppVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * App version on the device
       * </pre>
       *
       * <code>string device_app_version = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceAppVersion() {
        
        deviceAppVersion_ = getDefaultInstance().getDeviceAppVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * App version on the device
       * </pre>
       *
       * <code>string device_app_version = 11;</code>
       * @param value The bytes for deviceAppVersion to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceAppVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deviceAppVersion_ = value;
        onChanged();
        return this;
      }

      private double deviceTempC_ ;
      /**
       * <pre>
       * Temperature of the device in degrees centigrade
       * </pre>
       *
       * <code>double device_temp_c = 12;</code>
       * @return The deviceTempC.
       */
      public double getDeviceTempC() {
        return deviceTempC_;
      }
      /**
       * <pre>
       * Temperature of the device in degrees centigrade
       * </pre>
       *
       * <code>double device_temp_c = 12;</code>
       * @param value The deviceTempC to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceTempC(double value) {
        
        deviceTempC_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Temperature of the device in degrees centigrade
       * </pre>
       *
       * <code>double device_temp_c = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceTempC() {
        
        deviceTempC_ = 0D;
        onChanged();
        return this;
      }

      private double deviceBatteryPercent_ ;
      /**
       * <pre>
       * Device battery level as a percentage between 0% and 100%
       * </pre>
       *
       * <code>double device_battery_percent = 13;</code>
       * @return The deviceBatteryPercent.
       */
      public double getDeviceBatteryPercent() {
        return deviceBatteryPercent_;
      }
      /**
       * <pre>
       * Device battery level as a percentage between 0% and 100%
       * </pre>
       *
       * <code>double device_battery_percent = 13;</code>
       * @param value The deviceBatteryPercent to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceBatteryPercent(double value) {
        
        deviceBatteryPercent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Device battery level as a percentage between 0% and 100%
       * </pre>
       *
       * <code>double device_battery_percent = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceBatteryPercent() {
        
        deviceBatteryPercent_ = 0D;
        onChanged();
        return this;
      }

      private int networkType_ = 0;
      /**
       * <pre>
       * Type of network connection
       * </pre>
       *
       * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
       * @return The enum numeric value on the wire for networkType.
       */
      public int getNetworkTypeValue() {
        return networkType_;
      }
      /**
       * <pre>
       * Type of network connection
       * </pre>
       *
       * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
       * @param value The enum numeric value on the wire for networkType to set.
       * @return This builder for chaining.
       */
      public Builder setNetworkTypeValue(int value) {
        networkType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of network connection
       * </pre>
       *
       * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
       * @return The networkType.
       */
      public RedvoxApi1000.RedvoxPacket1000.NetworkType getNetworkType() {
        @SuppressWarnings("deprecation")
        RedvoxApi1000.RedvoxPacket1000.NetworkType result = RedvoxApi1000.RedvoxPacket1000.NetworkType.valueOf(networkType_);
        return result == null ? RedvoxApi1000.RedvoxPacket1000.NetworkType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type of network connection
       * </pre>
       *
       * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
       * @param value The networkType to set.
       * @return This builder for chaining.
       */
      public Builder setNetworkType(RedvoxApi1000.RedvoxPacket1000.NetworkType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        networkType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of network connection
       * </pre>
       *
       * <code>.RedvoxPacket1000.NetworkType network_type = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearNetworkType() {
        
        networkType_ = 0;
        onChanged();
        return this;
      }

      private double networkStrengthDb_ ;
      /**
       * <pre>
       * A value representing the strength of the network connection
       * </pre>
       *
       * <code>double network_strength_db = 15;</code>
       * @return The networkStrengthDb.
       */
      public double getNetworkStrengthDb() {
        return networkStrengthDb_;
      }
      /**
       * <pre>
       * A value representing the strength of the network connection
       * </pre>
       *
       * <code>double network_strength_db = 15;</code>
       * @param value The networkStrengthDb to set.
       * @return This builder for chaining.
       */
      public Builder setNetworkStrengthDb(double value) {
        
        networkStrengthDb_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A value representing the strength of the network connection
       * </pre>
       *
       * <code>double network_strength_db = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearNetworkStrengthDb() {
        
        networkStrengthDb_ = 0D;
        onChanged();
        return this;
      }

      private boolean isBackfilled_ ;
      /**
       * <pre>
       * Packet information
       * </pre>
       *
       * <code>bool is_backfilled = 16;</code>
       * @return The isBackfilled.
       */
      public boolean getIsBackfilled() {
        return isBackfilled_;
      }
      /**
       * <pre>
       * Packet information
       * </pre>
       *
       * <code>bool is_backfilled = 16;</code>
       * @param value The isBackfilled to set.
       * @return This builder for chaining.
       */
      public Builder setIsBackfilled(boolean value) {
        
        isBackfilled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Packet information
       * </pre>
       *
       * <code>bool is_backfilled = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsBackfilled() {
        
        isBackfilled_ = false;
        onChanged();
        return this;
      }

      private boolean isPrivate_ ;
      /**
       * <pre>
       * Field for if this packet is private to the user or not
       * </pre>
       *
       * <code>bool is_private = 17;</code>
       * @return The isPrivate.
       */
      public boolean getIsPrivate() {
        return isPrivate_;
      }
      /**
       * <pre>
       * Field for if this packet is private to the user or not
       * </pre>
       *
       * <code>bool is_private = 17;</code>
       * @param value The isPrivate to set.
       * @return This builder for chaining.
       */
      public Builder setIsPrivate(boolean value) {
        
        isPrivate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field for if this packet is private to the user or not
       * </pre>
       *
       * <code>bool is_private = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsPrivate() {
        
        isPrivate_ = false;
        onChanged();
        return this;
      }

      private boolean isMicScrambled_ ;
      /**
       * <pre>
       * Field that determines if the microphone data is scrambled or not (should be True for 8000Hz data)
       * </pre>
       *
       * <code>bool is_mic_scrambled = 18;</code>
       * @return The isMicScrambled.
       */
      public boolean getIsMicScrambled() {
        return isMicScrambled_;
      }
      /**
       * <pre>
       * Field that determines if the microphone data is scrambled or not (should be True for 8000Hz data)
       * </pre>
       *
       * <code>bool is_mic_scrambled = 18;</code>
       * @param value The isMicScrambled to set.
       * @return This builder for chaining.
       */
      public Builder setIsMicScrambled(boolean value) {
        
        isMicScrambled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field that determines if the microphone data is scrambled or not (should be True for 8000Hz data)
       * </pre>
       *
       * <code>bool is_mic_scrambled = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsMicScrambled() {
        
        isMicScrambled_ = false;
        onChanged();
        return this;
      }

      private double uncompressedSizeBytes_ ;
      /**
       * <pre>
       * Size of the uncompressed packet
       * </pre>
       *
       * <code>double uncompressed_size_bytes = 19;</code>
       * @return The uncompressedSizeBytes.
       */
      public double getUncompressedSizeBytes() {
        return uncompressedSizeBytes_;
      }
      /**
       * <pre>
       * Size of the uncompressed packet
       * </pre>
       *
       * <code>double uncompressed_size_bytes = 19;</code>
       * @param value The uncompressedSizeBytes to set.
       * @return This builder for chaining.
       */
      public Builder setUncompressedSizeBytes(double value) {
        
        uncompressedSizeBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Size of the uncompressed packet
       * </pre>
       *
       * <code>double uncompressed_size_bytes = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearUncompressedSizeBytes() {
        
        uncompressedSizeBytes_ = 0D;
        onChanged();
        return this;
      }

      private double compressedSizeBytes_ ;
      /**
       * <pre>
       * Size of the compressed packet
       * </pre>
       *
       * <code>double compressed_size_bytes = 20;</code>
       * @return The compressedSizeBytes.
       */
      public double getCompressedSizeBytes() {
        return compressedSizeBytes_;
      }
      /**
       * <pre>
       * Size of the compressed packet
       * </pre>
       *
       * <code>double compressed_size_bytes = 20;</code>
       * @param value The compressedSizeBytes to set.
       * @return This builder for chaining.
       */
      public Builder setCompressedSizeBytes(double value) {
        
        compressedSizeBytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Size of the compressed packet
       * </pre>
       *
       * <code>double compressed_size_bytes = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearCompressedSizeBytes() {
        
        compressedSizeBytes_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object authServerUrl_ = "";
      /**
       * <pre>
       * Server information
       * </pre>
       *
       * <code>string auth_server_url = 21;</code>
       * @return The authServerUrl.
       */
      public java.lang.String getAuthServerUrl() {
        java.lang.Object ref = authServerUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          authServerUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Server information
       * </pre>
       *
       * <code>string auth_server_url = 21;</code>
       * @return The bytes for authServerUrl.
       */
      public com.google.protobuf.ByteString
          getAuthServerUrlBytes() {
        java.lang.Object ref = authServerUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          authServerUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Server information
       * </pre>
       *
       * <code>string auth_server_url = 21;</code>
       * @param value The authServerUrl to set.
       * @return This builder for chaining.
       */
      public Builder setAuthServerUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        authServerUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server information
       * </pre>
       *
       * <code>string auth_server_url = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearAuthServerUrl() {
        
        authServerUrl_ = getDefaultInstance().getAuthServerUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Server information
       * </pre>
       *
       * <code>string auth_server_url = 21;</code>
       * @param value The bytes for authServerUrl to set.
       * @return This builder for chaining.
       */
      public Builder setAuthServerUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        authServerUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object synchServerUrl_ = "";
      /**
       * <pre>
       * URL of server used for time synchronization
       * </pre>
       *
       * <code>string synch_server_url = 22;</code>
       * @return The synchServerUrl.
       */
      public java.lang.String getSynchServerUrl() {
        java.lang.Object ref = synchServerUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          synchServerUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * URL of server used for time synchronization
       * </pre>
       *
       * <code>string synch_server_url = 22;</code>
       * @return The bytes for synchServerUrl.
       */
      public com.google.protobuf.ByteString
          getSynchServerUrlBytes() {
        java.lang.Object ref = synchServerUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          synchServerUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * URL of server used for time synchronization
       * </pre>
       *
       * <code>string synch_server_url = 22;</code>
       * @param value The synchServerUrl to set.
       * @return This builder for chaining.
       */
      public Builder setSynchServerUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        synchServerUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL of server used for time synchronization
       * </pre>
       *
       * <code>string synch_server_url = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearSynchServerUrl() {
        
        synchServerUrl_ = getDefaultInstance().getSynchServerUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL of server used for time synchronization
       * </pre>
       *
       * <code>string synch_server_url = 22;</code>
       * @param value The bytes for synchServerUrl to set.
       * @return This builder for chaining.
       */
      public Builder setSynchServerUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        synchServerUrl_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object acquisitionServerUrl_ = "";
      /**
       * <pre>
       * URL or server used for data acquisition
       * </pre>
       *
       * <code>string acquisition_server_url = 23;</code>
       * @return The acquisitionServerUrl.
       */
      public java.lang.String getAcquisitionServerUrl() {
        java.lang.Object ref = acquisitionServerUrl_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          acquisitionServerUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * URL or server used for data acquisition
       * </pre>
       *
       * <code>string acquisition_server_url = 23;</code>
       * @return The bytes for acquisitionServerUrl.
       */
      public com.google.protobuf.ByteString
          getAcquisitionServerUrlBytes() {
        java.lang.Object ref = acquisitionServerUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          acquisitionServerUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * URL or server used for data acquisition
       * </pre>
       *
       * <code>string acquisition_server_url = 23;</code>
       * @param value The acquisitionServerUrl to set.
       * @return This builder for chaining.
       */
      public Builder setAcquisitionServerUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        acquisitionServerUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL or server used for data acquisition
       * </pre>
       *
       * <code>string acquisition_server_url = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearAcquisitionServerUrl() {
        
        acquisitionServerUrl_ = getDefaultInstance().getAcquisitionServerUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL or server used for data acquisition
       * </pre>
       *
       * <code>string acquisition_server_url = 23;</code>
       * @param value The bytes for acquisitionServerUrl to set.
       * @return This builder for chaining.
       */
      public Builder setAcquisitionServerUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        acquisitionServerUrl_ = value;
        onChanged();
        return this;
      }

      private double packetStartTsUsWall_ ;
      /**
       * <pre>
       * Timing
       * </pre>
       *
       * <code>double packet_start_ts_us_wall = 24;</code>
       * @return The packetStartTsUsWall.
       */
      public double getPacketStartTsUsWall() {
        return packetStartTsUsWall_;
      }
      /**
       * <pre>
       * Timing
       * </pre>
       *
       * <code>double packet_start_ts_us_wall = 24;</code>
       * @param value The packetStartTsUsWall to set.
       * @return This builder for chaining.
       */
      public Builder setPacketStartTsUsWall(double value) {
        
        packetStartTsUsWall_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Timing
       * </pre>
       *
       * <code>double packet_start_ts_us_wall = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearPacketStartTsUsWall() {
        
        packetStartTsUsWall_ = 0D;
        onChanged();
        return this;
      }

      private double packetStartTsUsMach_ ;
      /**
       * <pre>
       * Start timestamp of the packet using machine time (corresponding to the first microphone sample)
       * </pre>
       *
       * <code>double packet_start_ts_us_mach = 25;</code>
       * @return The packetStartTsUsMach.
       */
      public double getPacketStartTsUsMach() {
        return packetStartTsUsMach_;
      }
      /**
       * <pre>
       * Start timestamp of the packet using machine time (corresponding to the first microphone sample)
       * </pre>
       *
       * <code>double packet_start_ts_us_mach = 25;</code>
       * @param value The packetStartTsUsMach to set.
       * @return This builder for chaining.
       */
      public Builder setPacketStartTsUsMach(double value) {
        
        packetStartTsUsMach_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Start timestamp of the packet using machine time (corresponding to the first microphone sample)
       * </pre>
       *
       * <code>double packet_start_ts_us_mach = 25;</code>
       * @return This builder for chaining.
       */
      public Builder clearPacketStartTsUsMach() {
        
        packetStartTsUsMach_ = 0D;
        onChanged();
        return this;
      }

      private double packetEndTsUsWall_ ;
      /**
       * <pre>
       * End timestamp of the packet using the wall clock (corresponding to the last microphone sample)
       * </pre>
       *
       * <code>double packet_end_ts_us_wall = 26;</code>
       * @return The packetEndTsUsWall.
       */
      public double getPacketEndTsUsWall() {
        return packetEndTsUsWall_;
      }
      /**
       * <pre>
       * End timestamp of the packet using the wall clock (corresponding to the last microphone sample)
       * </pre>
       *
       * <code>double packet_end_ts_us_wall = 26;</code>
       * @param value The packetEndTsUsWall to set.
       * @return This builder for chaining.
       */
      public Builder setPacketEndTsUsWall(double value) {
        
        packetEndTsUsWall_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * End timestamp of the packet using the wall clock (corresponding to the last microphone sample)
       * </pre>
       *
       * <code>double packet_end_ts_us_wall = 26;</code>
       * @return This builder for chaining.
       */
      public Builder clearPacketEndTsUsWall() {
        
        packetEndTsUsWall_ = 0D;
        onChanged();
        return this;
      }

      private double packetEndTsUsMach_ ;
      /**
       * <pre>
       * End timestamp of the packet using machine time (corresponding to the last microphone sample)
       * </pre>
       *
       * <code>double packet_end_ts_us_mach = 27;</code>
       * @return The packetEndTsUsMach.
       */
      public double getPacketEndTsUsMach() {
        return packetEndTsUsMach_;
      }
      /**
       * <pre>
       * End timestamp of the packet using machine time (corresponding to the last microphone sample)
       * </pre>
       *
       * <code>double packet_end_ts_us_mach = 27;</code>
       * @param value The packetEndTsUsMach to set.
       * @return This builder for chaining.
       */
      public Builder setPacketEndTsUsMach(double value) {
        
        packetEndTsUsMach_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * End timestamp of the packet using machine time (corresponding to the last microphone sample)
       * </pre>
       *
       * <code>double packet_end_ts_us_mach = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearPacketEndTsUsMach() {
        
        packetEndTsUsMach_ = 0D;
        onChanged();
        return this;
      }

      private double serverAcquisitionArrivalTsUs_ ;
      /**
       * <pre>
       * Timestamp that the packet arrived at the acquisition server
       * </pre>
       *
       * <code>double server_acquisition_arrival_ts_us = 28;</code>
       * @return The serverAcquisitionArrivalTsUs.
       */
      public double getServerAcquisitionArrivalTsUs() {
        return serverAcquisitionArrivalTsUs_;
      }
      /**
       * <pre>
       * Timestamp that the packet arrived at the acquisition server
       * </pre>
       *
       * <code>double server_acquisition_arrival_ts_us = 28;</code>
       * @param value The serverAcquisitionArrivalTsUs to set.
       * @return This builder for chaining.
       */
      public Builder setServerAcquisitionArrivalTsUs(double value) {
        
        serverAcquisitionArrivalTsUs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Timestamp that the packet arrived at the acquisition server
       * </pre>
       *
       * <code>double server_acquisition_arrival_ts_us = 28;</code>
       * @return This builder for chaining.
       */
      public Builder clearServerAcquisitionArrivalTsUs() {
        
        serverAcquisitionArrivalTsUs_ = 0D;
        onChanged();
        return this;
      }

      private double appStartTsUsMach_ ;
      /**
       * <pre>
       * The start of the app as machine time
       * </pre>
       *
       * <code>double app_start_ts_us_mach = 29;</code>
       * @return The appStartTsUsMach.
       */
      public double getAppStartTsUsMach() {
        return appStartTsUsMach_;
      }
      /**
       * <pre>
       * The start of the app as machine time
       * </pre>
       *
       * <code>double app_start_ts_us_mach = 29;</code>
       * @param value The appStartTsUsMach to set.
       * @return This builder for chaining.
       */
      public Builder setAppStartTsUsMach(double value) {
        
        appStartTsUsMach_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The start of the app as machine time
       * </pre>
       *
       * <code>double app_start_ts_us_mach = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearAppStartTsUsMach() {
        
        appStartTsUsMach_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList synchParams_ = emptyDoubleList();
      private void ensureSynchParamsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          synchParams_ = mutableCopy(synchParams_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * An array of synchronization params from the synch server
       * </pre>
       *
       * <code>repeated double synch_params = 30;</code>
       * @return A list containing the synchParams.
       */
      public java.util.List<java.lang.Double>
          getSynchParamsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(synchParams_) : synchParams_;
      }
      /**
       * <pre>
       * An array of synchronization params from the synch server
       * </pre>
       *
       * <code>repeated double synch_params = 30;</code>
       * @return The count of synchParams.
       */
      public int getSynchParamsCount() {
        return synchParams_.size();
      }
      /**
       * <pre>
       * An array of synchronization params from the synch server
       * </pre>
       *
       * <code>repeated double synch_params = 30;</code>
       * @param index The index of the element to return.
       * @return The synchParams at the given index.
       */
      public double getSynchParams(int index) {
        return synchParams_.getDouble(index);
      }
      /**
       * <pre>
       * An array of synchronization params from the synch server
       * </pre>
       *
       * <code>repeated double synch_params = 30;</code>
       * @param index The index to set the value at.
       * @param value The synchParams to set.
       * @return This builder for chaining.
       */
      public Builder setSynchParams(
          int index, double value) {
        ensureSynchParamsIsMutable();
        synchParams_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An array of synchronization params from the synch server
       * </pre>
       *
       * <code>repeated double synch_params = 30;</code>
       * @param value The synchParams to add.
       * @return This builder for chaining.
       */
      public Builder addSynchParams(double value) {
        ensureSynchParamsIsMutable();
        synchParams_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An array of synchronization params from the synch server
       * </pre>
       *
       * <code>repeated double synch_params = 30;</code>
       * @param values The synchParams to add.
       * @return This builder for chaining.
       */
      public Builder addAllSynchParams(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSynchParamsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, synchParams_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An array of synchronization params from the synch server
       * </pre>
       *
       * <code>repeated double synch_params = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearSynchParams() {
        synchParams_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private double bestLatencyUs_ ;
      /**
       * <pre>
       * The best latency as determined from the synch params
       * </pre>
       *
       * <code>double best_latency_us = 31;</code>
       * @return The bestLatencyUs.
       */
      public double getBestLatencyUs() {
        return bestLatencyUs_;
      }
      /**
       * <pre>
       * The best latency as determined from the synch params
       * </pre>
       *
       * <code>double best_latency_us = 31;</code>
       * @param value The bestLatencyUs to set.
       * @return This builder for chaining.
       */
      public Builder setBestLatencyUs(double value) {
        
        bestLatencyUs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The best latency as determined from the synch params
       * </pre>
       *
       * <code>double best_latency_us = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearBestLatencyUs() {
        
        bestLatencyUs_ = 0D;
        onChanged();
        return this;
      }

      private double bestOffsetUs_ ;
      /**
       * <pre>
       * The best offset as determined from the synch params
       * </pre>
       *
       * <code>double best_offset_us = 32;</code>
       * @return The bestOffsetUs.
       */
      public double getBestOffsetUs() {
        return bestOffsetUs_;
      }
      /**
       * <pre>
       * The best offset as determined from the synch params
       * </pre>
       *
       * <code>double best_offset_us = 32;</code>
       * @param value The bestOffsetUs to set.
       * @return This builder for chaining.
       */
      public Builder setBestOffsetUs(double value) {
        
        bestOffsetUs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The best offset as determined from the synch params
       * </pre>
       *
       * <code>double best_offset_us = 32;</code>
       * @return This builder for chaining.
       */
      public Builder clearBestOffsetUs() {
        
        bestOffsetUs_ = 0D;
        onChanged();
        return this;
      }

      private RedvoxApi1000.MicrophoneChannel microphoneChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.MicrophoneChannel, RedvoxApi1000.MicrophoneChannel.Builder, RedvoxApi1000.MicrophoneChannelOrBuilder> microphoneChannelBuilder_;
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       * @return Whether the microphoneChannel field is set.
       */
      public boolean hasMicrophoneChannel() {
        return microphoneChannelBuilder_ != null || microphoneChannel_ != null;
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       * @return The microphoneChannel.
       */
      public RedvoxApi1000.MicrophoneChannel getMicrophoneChannel() {
        if (microphoneChannelBuilder_ == null) {
          return microphoneChannel_ == null ? RedvoxApi1000.MicrophoneChannel.getDefaultInstance() : microphoneChannel_;
        } else {
          return microphoneChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       */
      public Builder setMicrophoneChannel(RedvoxApi1000.MicrophoneChannel value) {
        if (microphoneChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          microphoneChannel_ = value;
          onChanged();
        } else {
          microphoneChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       */
      public Builder setMicrophoneChannel(
          RedvoxApi1000.MicrophoneChannel.Builder builderForValue) {
        if (microphoneChannelBuilder_ == null) {
          microphoneChannel_ = builderForValue.build();
          onChanged();
        } else {
          microphoneChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       */
      public Builder mergeMicrophoneChannel(RedvoxApi1000.MicrophoneChannel value) {
        if (microphoneChannelBuilder_ == null) {
          if (microphoneChannel_ != null) {
            microphoneChannel_ =
              RedvoxApi1000.MicrophoneChannel.newBuilder(microphoneChannel_).mergeFrom(value).buildPartial();
          } else {
            microphoneChannel_ = value;
          }
          onChanged();
        } else {
          microphoneChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       */
      public Builder clearMicrophoneChannel() {
        if (microphoneChannelBuilder_ == null) {
          microphoneChannel_ = null;
          onChanged();
        } else {
          microphoneChannel_ = null;
          microphoneChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       */
      public RedvoxApi1000.MicrophoneChannel.Builder getMicrophoneChannelBuilder() {
        
        onChanged();
        return getMicrophoneChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       */
      public RedvoxApi1000.MicrophoneChannelOrBuilder getMicrophoneChannelOrBuilder() {
        if (microphoneChannelBuilder_ != null) {
          return microphoneChannelBuilder_.getMessageOrBuilder();
        } else {
          return microphoneChannel_ == null ?
              RedvoxApi1000.MicrophoneChannel.getDefaultInstance() : microphoneChannel_;
        }
      }
      /**
       * <pre>
       * Channels
       * </pre>
       *
       * <code>.MicrophoneChannel microphone_channel = 33;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.MicrophoneChannel, RedvoxApi1000.MicrophoneChannel.Builder, RedvoxApi1000.MicrophoneChannelOrBuilder> 
          getMicrophoneChannelFieldBuilder() {
        if (microphoneChannelBuilder_ == null) {
          microphoneChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.MicrophoneChannel, RedvoxApi1000.MicrophoneChannel.Builder, RedvoxApi1000.MicrophoneChannelOrBuilder>(
                  getMicrophoneChannel(),
                  getParentForChildren(),
                  isClean());
          microphoneChannel_ = null;
        }
        return microphoneChannelBuilder_;
      }

      private RedvoxApi1000.SingleChannel barometerChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder> barometerChannelBuilder_;
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       * @return Whether the barometerChannel field is set.
       */
      public boolean hasBarometerChannel() {
        return barometerChannelBuilder_ != null || barometerChannel_ != null;
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       * @return The barometerChannel.
       */
      public RedvoxApi1000.SingleChannel getBarometerChannel() {
        if (barometerChannelBuilder_ == null) {
          return barometerChannel_ == null ? RedvoxApi1000.SingleChannel.getDefaultInstance() : barometerChannel_;
        } else {
          return barometerChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       */
      public Builder setBarometerChannel(RedvoxApi1000.SingleChannel value) {
        if (barometerChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          barometerChannel_ = value;
          onChanged();
        } else {
          barometerChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       */
      public Builder setBarometerChannel(
          RedvoxApi1000.SingleChannel.Builder builderForValue) {
        if (barometerChannelBuilder_ == null) {
          barometerChannel_ = builderForValue.build();
          onChanged();
        } else {
          barometerChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       */
      public Builder mergeBarometerChannel(RedvoxApi1000.SingleChannel value) {
        if (barometerChannelBuilder_ == null) {
          if (barometerChannel_ != null) {
            barometerChannel_ =
              RedvoxApi1000.SingleChannel.newBuilder(barometerChannel_).mergeFrom(value).buildPartial();
          } else {
            barometerChannel_ = value;
          }
          onChanged();
        } else {
          barometerChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       */
      public Builder clearBarometerChannel() {
        if (barometerChannelBuilder_ == null) {
          barometerChannel_ = null;
          onChanged();
        } else {
          barometerChannel_ = null;
          barometerChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       */
      public RedvoxApi1000.SingleChannel.Builder getBarometerChannelBuilder() {
        
        onChanged();
        return getBarometerChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       */
      public RedvoxApi1000.SingleChannelOrBuilder getBarometerChannelOrBuilder() {
        if (barometerChannelBuilder_ != null) {
          return barometerChannelBuilder_.getMessageOrBuilder();
        } else {
          return barometerChannel_ == null ?
              RedvoxApi1000.SingleChannel.getDefaultInstance() : barometerChannel_;
        }
      }
      /**
       * <pre>
       * The barometer channel
       * </pre>
       *
       * <code>.SingleChannel barometer_channel = 34;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder> 
          getBarometerChannelFieldBuilder() {
        if (barometerChannelBuilder_ == null) {
          barometerChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder>(
                  getBarometerChannel(),
                  getParentForChildren(),
                  isClean());
          barometerChannel_ = null;
        }
        return barometerChannelBuilder_;
      }

      private RedvoxApi1000.LocationChannel locationChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.LocationChannel, RedvoxApi1000.LocationChannel.Builder, RedvoxApi1000.LocationChannelOrBuilder> locationChannelBuilder_;
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       * @return Whether the locationChannel field is set.
       */
      public boolean hasLocationChannel() {
        return locationChannelBuilder_ != null || locationChannel_ != null;
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       * @return The locationChannel.
       */
      public RedvoxApi1000.LocationChannel getLocationChannel() {
        if (locationChannelBuilder_ == null) {
          return locationChannel_ == null ? RedvoxApi1000.LocationChannel.getDefaultInstance() : locationChannel_;
        } else {
          return locationChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       */
      public Builder setLocationChannel(RedvoxApi1000.LocationChannel value) {
        if (locationChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationChannel_ = value;
          onChanged();
        } else {
          locationChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       */
      public Builder setLocationChannel(
          RedvoxApi1000.LocationChannel.Builder builderForValue) {
        if (locationChannelBuilder_ == null) {
          locationChannel_ = builderForValue.build();
          onChanged();
        } else {
          locationChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       */
      public Builder mergeLocationChannel(RedvoxApi1000.LocationChannel value) {
        if (locationChannelBuilder_ == null) {
          if (locationChannel_ != null) {
            locationChannel_ =
              RedvoxApi1000.LocationChannel.newBuilder(locationChannel_).mergeFrom(value).buildPartial();
          } else {
            locationChannel_ = value;
          }
          onChanged();
        } else {
          locationChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       */
      public Builder clearLocationChannel() {
        if (locationChannelBuilder_ == null) {
          locationChannel_ = null;
          onChanged();
        } else {
          locationChannel_ = null;
          locationChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       */
      public RedvoxApi1000.LocationChannel.Builder getLocationChannelBuilder() {
        
        onChanged();
        return getLocationChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       */
      public RedvoxApi1000.LocationChannelOrBuilder getLocationChannelOrBuilder() {
        if (locationChannelBuilder_ != null) {
          return locationChannelBuilder_.getMessageOrBuilder();
        } else {
          return locationChannel_ == null ?
              RedvoxApi1000.LocationChannel.getDefaultInstance() : locationChannel_;
        }
      }
      /**
       * <pre>
       * The location channel
       * </pre>
       *
       * <code>.LocationChannel location_channel = 35;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.LocationChannel, RedvoxApi1000.LocationChannel.Builder, RedvoxApi1000.LocationChannelOrBuilder> 
          getLocationChannelFieldBuilder() {
        if (locationChannelBuilder_ == null) {
          locationChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.LocationChannel, RedvoxApi1000.LocationChannel.Builder, RedvoxApi1000.LocationChannelOrBuilder>(
                  getLocationChannel(),
                  getParentForChildren(),
                  isClean());
          locationChannel_ = null;
        }
        return locationChannelBuilder_;
      }

      private RedvoxApi1000.XyzChannel accelerometerChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder> accelerometerChannelBuilder_;
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       * @return Whether the accelerometerChannel field is set.
       */
      public boolean hasAccelerometerChannel() {
        return accelerometerChannelBuilder_ != null || accelerometerChannel_ != null;
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       * @return The accelerometerChannel.
       */
      public RedvoxApi1000.XyzChannel getAccelerometerChannel() {
        if (accelerometerChannelBuilder_ == null) {
          return accelerometerChannel_ == null ? RedvoxApi1000.XyzChannel.getDefaultInstance() : accelerometerChannel_;
        } else {
          return accelerometerChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       */
      public Builder setAccelerometerChannel(RedvoxApi1000.XyzChannel value) {
        if (accelerometerChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          accelerometerChannel_ = value;
          onChanged();
        } else {
          accelerometerChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       */
      public Builder setAccelerometerChannel(
          RedvoxApi1000.XyzChannel.Builder builderForValue) {
        if (accelerometerChannelBuilder_ == null) {
          accelerometerChannel_ = builderForValue.build();
          onChanged();
        } else {
          accelerometerChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       */
      public Builder mergeAccelerometerChannel(RedvoxApi1000.XyzChannel value) {
        if (accelerometerChannelBuilder_ == null) {
          if (accelerometerChannel_ != null) {
            accelerometerChannel_ =
              RedvoxApi1000.XyzChannel.newBuilder(accelerometerChannel_).mergeFrom(value).buildPartial();
          } else {
            accelerometerChannel_ = value;
          }
          onChanged();
        } else {
          accelerometerChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       */
      public Builder clearAccelerometerChannel() {
        if (accelerometerChannelBuilder_ == null) {
          accelerometerChannel_ = null;
          onChanged();
        } else {
          accelerometerChannel_ = null;
          accelerometerChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       */
      public RedvoxApi1000.XyzChannel.Builder getAccelerometerChannelBuilder() {
        
        onChanged();
        return getAccelerometerChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       */
      public RedvoxApi1000.XyzChannelOrBuilder getAccelerometerChannelOrBuilder() {
        if (accelerometerChannelBuilder_ != null) {
          return accelerometerChannelBuilder_.getMessageOrBuilder();
        } else {
          return accelerometerChannel_ == null ?
              RedvoxApi1000.XyzChannel.getDefaultInstance() : accelerometerChannel_;
        }
      }
      /**
       * <pre>
       * The accelerometer channel
       * </pre>
       *
       * <code>.XyzChannel accelerometer_channel = 36;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder> 
          getAccelerometerChannelFieldBuilder() {
        if (accelerometerChannelBuilder_ == null) {
          accelerometerChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder>(
                  getAccelerometerChannel(),
                  getParentForChildren(),
                  isClean());
          accelerometerChannel_ = null;
        }
        return accelerometerChannelBuilder_;
      }

      private RedvoxApi1000.XyzChannel gyroscopeChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder> gyroscopeChannelBuilder_;
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       * @return Whether the gyroscopeChannel field is set.
       */
      public boolean hasGyroscopeChannel() {
        return gyroscopeChannelBuilder_ != null || gyroscopeChannel_ != null;
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       * @return The gyroscopeChannel.
       */
      public RedvoxApi1000.XyzChannel getGyroscopeChannel() {
        if (gyroscopeChannelBuilder_ == null) {
          return gyroscopeChannel_ == null ? RedvoxApi1000.XyzChannel.getDefaultInstance() : gyroscopeChannel_;
        } else {
          return gyroscopeChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       */
      public Builder setGyroscopeChannel(RedvoxApi1000.XyzChannel value) {
        if (gyroscopeChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gyroscopeChannel_ = value;
          onChanged();
        } else {
          gyroscopeChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       */
      public Builder setGyroscopeChannel(
          RedvoxApi1000.XyzChannel.Builder builderForValue) {
        if (gyroscopeChannelBuilder_ == null) {
          gyroscopeChannel_ = builderForValue.build();
          onChanged();
        } else {
          gyroscopeChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       */
      public Builder mergeGyroscopeChannel(RedvoxApi1000.XyzChannel value) {
        if (gyroscopeChannelBuilder_ == null) {
          if (gyroscopeChannel_ != null) {
            gyroscopeChannel_ =
              RedvoxApi1000.XyzChannel.newBuilder(gyroscopeChannel_).mergeFrom(value).buildPartial();
          } else {
            gyroscopeChannel_ = value;
          }
          onChanged();
        } else {
          gyroscopeChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       */
      public Builder clearGyroscopeChannel() {
        if (gyroscopeChannelBuilder_ == null) {
          gyroscopeChannel_ = null;
          onChanged();
        } else {
          gyroscopeChannel_ = null;
          gyroscopeChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       */
      public RedvoxApi1000.XyzChannel.Builder getGyroscopeChannelBuilder() {
        
        onChanged();
        return getGyroscopeChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       */
      public RedvoxApi1000.XyzChannelOrBuilder getGyroscopeChannelOrBuilder() {
        if (gyroscopeChannelBuilder_ != null) {
          return gyroscopeChannelBuilder_.getMessageOrBuilder();
        } else {
          return gyroscopeChannel_ == null ?
              RedvoxApi1000.XyzChannel.getDefaultInstance() : gyroscopeChannel_;
        }
      }
      /**
       * <pre>
       * The gyroscope channel
       * </pre>
       *
       * <code>.XyzChannel gyroscope_channel = 37;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder> 
          getGyroscopeChannelFieldBuilder() {
        if (gyroscopeChannelBuilder_ == null) {
          gyroscopeChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder>(
                  getGyroscopeChannel(),
                  getParentForChildren(),
                  isClean());
          gyroscopeChannel_ = null;
        }
        return gyroscopeChannelBuilder_;
      }

      private RedvoxApi1000.XyzChannel magnetometerChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder> magnetometerChannelBuilder_;
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       * @return Whether the magnetometerChannel field is set.
       */
      public boolean hasMagnetometerChannel() {
        return magnetometerChannelBuilder_ != null || magnetometerChannel_ != null;
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       * @return The magnetometerChannel.
       */
      public RedvoxApi1000.XyzChannel getMagnetometerChannel() {
        if (magnetometerChannelBuilder_ == null) {
          return magnetometerChannel_ == null ? RedvoxApi1000.XyzChannel.getDefaultInstance() : magnetometerChannel_;
        } else {
          return magnetometerChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       */
      public Builder setMagnetometerChannel(RedvoxApi1000.XyzChannel value) {
        if (magnetometerChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          magnetometerChannel_ = value;
          onChanged();
        } else {
          magnetometerChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       */
      public Builder setMagnetometerChannel(
          RedvoxApi1000.XyzChannel.Builder builderForValue) {
        if (magnetometerChannelBuilder_ == null) {
          magnetometerChannel_ = builderForValue.build();
          onChanged();
        } else {
          magnetometerChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       */
      public Builder mergeMagnetometerChannel(RedvoxApi1000.XyzChannel value) {
        if (magnetometerChannelBuilder_ == null) {
          if (magnetometerChannel_ != null) {
            magnetometerChannel_ =
              RedvoxApi1000.XyzChannel.newBuilder(magnetometerChannel_).mergeFrom(value).buildPartial();
          } else {
            magnetometerChannel_ = value;
          }
          onChanged();
        } else {
          magnetometerChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       */
      public Builder clearMagnetometerChannel() {
        if (magnetometerChannelBuilder_ == null) {
          magnetometerChannel_ = null;
          onChanged();
        } else {
          magnetometerChannel_ = null;
          magnetometerChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       */
      public RedvoxApi1000.XyzChannel.Builder getMagnetometerChannelBuilder() {
        
        onChanged();
        return getMagnetometerChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       */
      public RedvoxApi1000.XyzChannelOrBuilder getMagnetometerChannelOrBuilder() {
        if (magnetometerChannelBuilder_ != null) {
          return magnetometerChannelBuilder_.getMessageOrBuilder();
        } else {
          return magnetometerChannel_ == null ?
              RedvoxApi1000.XyzChannel.getDefaultInstance() : magnetometerChannel_;
        }
      }
      /**
       * <pre>
       * The magnetometer channel
       * </pre>
       *
       * <code>.XyzChannel magnetometer_channel = 38;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder> 
          getMagnetometerChannelFieldBuilder() {
        if (magnetometerChannelBuilder_ == null) {
          magnetometerChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.XyzChannel, RedvoxApi1000.XyzChannel.Builder, RedvoxApi1000.XyzChannelOrBuilder>(
                  getMagnetometerChannel(),
                  getParentForChildren(),
                  isClean());
          magnetometerChannel_ = null;
        }
        return magnetometerChannelBuilder_;
      }

      private RedvoxApi1000.SingleChannel lightChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder> lightChannelBuilder_;
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       * @return Whether the lightChannel field is set.
       */
      public boolean hasLightChannel() {
        return lightChannelBuilder_ != null || lightChannel_ != null;
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       * @return The lightChannel.
       */
      public RedvoxApi1000.SingleChannel getLightChannel() {
        if (lightChannelBuilder_ == null) {
          return lightChannel_ == null ? RedvoxApi1000.SingleChannel.getDefaultInstance() : lightChannel_;
        } else {
          return lightChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       */
      public Builder setLightChannel(RedvoxApi1000.SingleChannel value) {
        if (lightChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lightChannel_ = value;
          onChanged();
        } else {
          lightChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       */
      public Builder setLightChannel(
          RedvoxApi1000.SingleChannel.Builder builderForValue) {
        if (lightChannelBuilder_ == null) {
          lightChannel_ = builderForValue.build();
          onChanged();
        } else {
          lightChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       */
      public Builder mergeLightChannel(RedvoxApi1000.SingleChannel value) {
        if (lightChannelBuilder_ == null) {
          if (lightChannel_ != null) {
            lightChannel_ =
              RedvoxApi1000.SingleChannel.newBuilder(lightChannel_).mergeFrom(value).buildPartial();
          } else {
            lightChannel_ = value;
          }
          onChanged();
        } else {
          lightChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       */
      public Builder clearLightChannel() {
        if (lightChannelBuilder_ == null) {
          lightChannel_ = null;
          onChanged();
        } else {
          lightChannel_ = null;
          lightChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       */
      public RedvoxApi1000.SingleChannel.Builder getLightChannelBuilder() {
        
        onChanged();
        return getLightChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       */
      public RedvoxApi1000.SingleChannelOrBuilder getLightChannelOrBuilder() {
        if (lightChannelBuilder_ != null) {
          return lightChannelBuilder_.getMessageOrBuilder();
        } else {
          return lightChannel_ == null ?
              RedvoxApi1000.SingleChannel.getDefaultInstance() : lightChannel_;
        }
      }
      /**
       * <pre>
       * The light channel
       * </pre>
       *
       * <code>.SingleChannel light_channel = 39;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder> 
          getLightChannelFieldBuilder() {
        if (lightChannelBuilder_ == null) {
          lightChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder>(
                  getLightChannel(),
                  getParentForChildren(),
                  isClean());
          lightChannel_ = null;
        }
        return lightChannelBuilder_;
      }

      private RedvoxApi1000.SingleChannel infraredChannel_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder> infraredChannelBuilder_;
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       * @return Whether the infraredChannel field is set.
       */
      public boolean hasInfraredChannel() {
        return infraredChannelBuilder_ != null || infraredChannel_ != null;
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       * @return The infraredChannel.
       */
      public RedvoxApi1000.SingleChannel getInfraredChannel() {
        if (infraredChannelBuilder_ == null) {
          return infraredChannel_ == null ? RedvoxApi1000.SingleChannel.getDefaultInstance() : infraredChannel_;
        } else {
          return infraredChannelBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       */
      public Builder setInfraredChannel(RedvoxApi1000.SingleChannel value) {
        if (infraredChannelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          infraredChannel_ = value;
          onChanged();
        } else {
          infraredChannelBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       */
      public Builder setInfraredChannel(
          RedvoxApi1000.SingleChannel.Builder builderForValue) {
        if (infraredChannelBuilder_ == null) {
          infraredChannel_ = builderForValue.build();
          onChanged();
        } else {
          infraredChannelBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       */
      public Builder mergeInfraredChannel(RedvoxApi1000.SingleChannel value) {
        if (infraredChannelBuilder_ == null) {
          if (infraredChannel_ != null) {
            infraredChannel_ =
              RedvoxApi1000.SingleChannel.newBuilder(infraredChannel_).mergeFrom(value).buildPartial();
          } else {
            infraredChannel_ = value;
          }
          onChanged();
        } else {
          infraredChannelBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       */
      public Builder clearInfraredChannel() {
        if (infraredChannelBuilder_ == null) {
          infraredChannel_ = null;
          onChanged();
        } else {
          infraredChannel_ = null;
          infraredChannelBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       */
      public RedvoxApi1000.SingleChannel.Builder getInfraredChannelBuilder() {
        
        onChanged();
        return getInfraredChannelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       */
      public RedvoxApi1000.SingleChannelOrBuilder getInfraredChannelOrBuilder() {
        if (infraredChannelBuilder_ != null) {
          return infraredChannelBuilder_.getMessageOrBuilder();
        } else {
          return infraredChannel_ == null ?
              RedvoxApi1000.SingleChannel.getDefaultInstance() : infraredChannel_;
        }
      }
      /**
       * <pre>
       * The infrared channel
       * </pre>
       *
       * <code>.SingleChannel infrared_channel = 40;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder> 
          getInfraredChannelFieldBuilder() {
        if (infraredChannelBuilder_ == null) {
          infraredChannelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SingleChannel, RedvoxApi1000.SingleChannel.Builder, RedvoxApi1000.SingleChannelOrBuilder>(
                  getInfraredChannel(),
                  getParentForChildren(),
                  isClean());
          infraredChannel_ = null;
        }
        return infraredChannelBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> metadata_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMetadata() {
        if (metadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        return metadata_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableMetadata() {
        onChanged();;
        if (metadata_ == null) {
          metadata_ = com.google.protobuf.MapField.newMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        if (!metadata_.isMutable()) {
          metadata_ = metadata_.copy();
        }
        return metadata_;
      }

      public int getMetadataCount() {
        return internalGetMetadata().getMap().size();
      }
      /**
       * <pre>
       * Metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 41;</code>
       */

      public boolean containsMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMetadataMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return getMetadataMap();
      }
      /**
       * <pre>
       * Metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 41;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
        return internalGetMetadata().getMap();
      }
      /**
       * <pre>
       * Metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 41;</code>
       */

      public java.lang.String getMetadataOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 41;</code>
       */

      public java.lang.String getMetadataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMetadata() {
        internalGetMutableMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 41;</code>
       */

      public Builder removeMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableMetadata() {
        return internalGetMutableMetadata().getMutableMap();
      }
      /**
       * <pre>
       * Metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 41;</code>
       */
      public Builder putMetadata(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 41;</code>
       */

      public Builder putAllMetadata(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableMetadata().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RedvoxPacket1000)
    }

    // @@protoc_insertion_point(class_scope:RedvoxPacket1000)
    private static final RedvoxApi1000.RedvoxPacket1000 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RedvoxApi1000.RedvoxPacket1000();
    }

    public static RedvoxApi1000.RedvoxPacket1000 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RedvoxPacket1000>
        PARSER = new com.google.protobuf.AbstractParser<RedvoxPacket1000>() {
      @java.lang.Override
      public RedvoxPacket1000 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RedvoxPacket1000(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RedvoxPacket1000> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RedvoxPacket1000> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public RedvoxApi1000.RedvoxPacket1000 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MicrophoneChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MicrophoneChannel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name or description of the microphone sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    java.lang.String getSensorDescription();
    /**
     * <pre>
     * The name or description of the microphone sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    com.google.protobuf.ByteString
        getSensorDescriptionBytes();

    /**
     * <pre>
     * Timestamp of the first microphone sample
     * </pre>
     *
     * <code>double first_sample_ts_us = 2;</code>
     * @return The firstSampleTsUs.
     */
    double getFirstSampleTsUs();

    /**
     * <pre>
     * Microphone sample rate in Hz
     * </pre>
     *
     * <code>double sample_rate_hz = 3;</code>
     * @return The sampleRateHz.
     */
    double getSampleRateHz();

    /**
     * <pre>
     * List of microphone samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return A list containing the samples.
     */
    java.util.List<java.lang.Double> getSamplesList();
    /**
     * <pre>
     * List of microphone samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return The count of samples.
     */
    int getSamplesCount();
    /**
     * <pre>
     * List of microphone samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @param index The index of the element to return.
     * @return The samples at the given index.
     */
    double getSamples(int index);

    /**
     * <pre>
     * Statistics for microphone samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 5;</code>
     * @return Whether the sampleStatistics field is set.
     */
    boolean hasSampleStatistics();
    /**
     * <pre>
     * Statistics for microphone samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 5;</code>
     * @return The sampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getSampleStatistics();
    /**
     * <pre>
     * Statistics for microphone samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 5;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getSampleStatisticsOrBuilder();

    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */
    int getMetadataCount();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */
    boolean containsMetadata(
        java.lang.String key);
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMetadata();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMetadataMap();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    java.lang.String getMetadataOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Message type for microphone channels
   * </pre>
   *
   * Protobuf type {@code MicrophoneChannel}
   */
  public  static final class MicrophoneChannel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MicrophoneChannel)
      MicrophoneChannelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MicrophoneChannel.newBuilder() to construct.
    private MicrophoneChannel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MicrophoneChannel() {
      sensorDescription_ = "";
      samples_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MicrophoneChannel();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MicrophoneChannel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              sensorDescription_ = s;
              break;
            }
            case 17: {

              firstSampleTsUs_ = input.readDouble();
              break;
            }
            case 25: {

              sampleRateHz_ = input.readDouble();
              break;
            }
            case 33: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                samples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              samples_.addDouble(input.readDouble());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                samples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                samples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (sampleStatistics_ != null) {
                subBuilder = sampleStatistics_.toBuilder();
              }
              sampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sampleStatistics_);
                sampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                metadata_ = com.google.protobuf.MapField.newMapField(
                    MetadataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              metadata_.getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          samples_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RedvoxApi1000.internal_static_MicrophoneChannel_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RedvoxApi1000.internal_static_MicrophoneChannel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RedvoxApi1000.MicrophoneChannel.class, RedvoxApi1000.MicrophoneChannel.Builder.class);
    }

    public static final int SENSOR_DESCRIPTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object sensorDescription_;
    /**
     * <pre>
     * The name or description of the microphone sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    public java.lang.String getSensorDescription() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sensorDescription_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name or description of the microphone sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    public com.google.protobuf.ByteString
        getSensorDescriptionBytes() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sensorDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIRST_SAMPLE_TS_US_FIELD_NUMBER = 2;
    private double firstSampleTsUs_;
    /**
     * <pre>
     * Timestamp of the first microphone sample
     * </pre>
     *
     * <code>double first_sample_ts_us = 2;</code>
     * @return The firstSampleTsUs.
     */
    public double getFirstSampleTsUs() {
      return firstSampleTsUs_;
    }

    public static final int SAMPLE_RATE_HZ_FIELD_NUMBER = 3;
    private double sampleRateHz_;
    /**
     * <pre>
     * Microphone sample rate in Hz
     * </pre>
     *
     * <code>double sample_rate_hz = 3;</code>
     * @return The sampleRateHz.
     */
    public double getSampleRateHz() {
      return sampleRateHz_;
    }

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.DoubleList samples_;
    /**
     * <pre>
     * List of microphone samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return A list containing the samples.
     */
    public java.util.List<java.lang.Double>
        getSamplesList() {
      return samples_;
    }
    /**
     * <pre>
     * List of microphone samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return The count of samples.
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <pre>
     * List of microphone samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @param index The index of the element to return.
     * @return The samples at the given index.
     */
    public double getSamples(int index) {
      return samples_.getDouble(index);
    }
    private int samplesMemoizedSerializedSize = -1;

    public static final int SAMPLE_STATISTICS_FIELD_NUMBER = 5;
    private RedvoxApi1000.SummaryStatistics sampleStatistics_;
    /**
     * <pre>
     * Statistics for microphone samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 5;</code>
     * @return Whether the sampleStatistics field is set.
     */
    public boolean hasSampleStatistics() {
      return sampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for microphone samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 5;</code>
     * @return The sampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getSampleStatistics() {
      return sampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for microphone samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 5;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleStatisticsOrBuilder() {
      return getSampleStatistics();
    }

    public static final int METADATA_FIELD_NUMBER = 6;
    private static final class MetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  RedvoxApi1000.internal_static_MicrophoneChannel_MetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }

    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!getSensorDescriptionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sensorDescription_);
      }
      if (firstSampleTsUs_ != 0D) {
        output.writeDouble(2, firstSampleTsUs_);
      }
      if (sampleRateHz_ != 0D) {
        output.writeDouble(3, sampleRateHz_);
      }
      if (getSamplesList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(samplesMemoizedSerializedSize);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeDoubleNoTag(samples_.getDouble(i));
      }
      if (sampleStatistics_ != null) {
        output.writeMessage(5, getSampleStatistics());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMetadata(),
          MetadataDefaultEntryHolder.defaultEntry,
          6);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSensorDescriptionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sensorDescription_);
      }
      if (firstSampleTsUs_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, firstSampleTsUs_);
      }
      if (sampleRateHz_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, sampleRateHz_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSamplesList().size();
        size += dataSize;
        if (!getSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        samplesMemoizedSerializedSize = dataSize;
      }
      if (sampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSampleStatistics());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, metadata__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RedvoxApi1000.MicrophoneChannel)) {
        return super.equals(obj);
      }
      RedvoxApi1000.MicrophoneChannel other = (RedvoxApi1000.MicrophoneChannel) obj;

      if (!getSensorDescription()
          .equals(other.getSensorDescription())) return false;
      if (java.lang.Double.doubleToLongBits(getFirstSampleTsUs())
          != java.lang.Double.doubleToLongBits(
              other.getFirstSampleTsUs())) return false;
      if (java.lang.Double.doubleToLongBits(getSampleRateHz())
          != java.lang.Double.doubleToLongBits(
              other.getSampleRateHz())) return false;
      if (!getSamplesList()
          .equals(other.getSamplesList())) return false;
      if (hasSampleStatistics() != other.hasSampleStatistics()) return false;
      if (hasSampleStatistics()) {
        if (!getSampleStatistics()
            .equals(other.getSampleStatistics())) return false;
      }
      if (!internalGetMetadata().equals(
          other.internalGetMetadata())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SENSOR_DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getSensorDescription().hashCode();
      hash = (37 * hash) + FIRST_SAMPLE_TS_US_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getFirstSampleTsUs()));
      hash = (37 * hash) + SAMPLE_RATE_HZ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSampleRateHz()));
      if (getSamplesCount() > 0) {
        hash = (37 * hash) + SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getSamplesList().hashCode();
      }
      if (hasSampleStatistics()) {
        hash = (37 * hash) + SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getSampleStatistics().hashCode();
      }
      if (!internalGetMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMetadata().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.MicrophoneChannel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.MicrophoneChannel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.MicrophoneChannel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RedvoxApi1000.MicrophoneChannel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message type for microphone channels
     * </pre>
     *
     * Protobuf type {@code MicrophoneChannel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MicrophoneChannel)
        RedvoxApi1000.MicrophoneChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RedvoxApi1000.internal_static_MicrophoneChannel_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RedvoxApi1000.internal_static_MicrophoneChannel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RedvoxApi1000.MicrophoneChannel.class, RedvoxApi1000.MicrophoneChannel.Builder.class);
      }

      // Construct using RedvoxApi1000.MicrophoneChannel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        sensorDescription_ = "";

        firstSampleTsUs_ = 0D;

        sampleRateHz_ = 0D;

        samples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (sampleStatisticsBuilder_ == null) {
          sampleStatistics_ = null;
        } else {
          sampleStatistics_ = null;
          sampleStatisticsBuilder_ = null;
        }
        internalGetMutableMetadata().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RedvoxApi1000.internal_static_MicrophoneChannel_descriptor;
      }

      @java.lang.Override
      public RedvoxApi1000.MicrophoneChannel getDefaultInstanceForType() {
        return RedvoxApi1000.MicrophoneChannel.getDefaultInstance();
      }

      @java.lang.Override
      public RedvoxApi1000.MicrophoneChannel build() {
        RedvoxApi1000.MicrophoneChannel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public RedvoxApi1000.MicrophoneChannel buildPartial() {
        RedvoxApi1000.MicrophoneChannel result = new RedvoxApi1000.MicrophoneChannel(this);
        int from_bitField0_ = bitField0_;
        result.sensorDescription_ = sensorDescription_;
        result.firstSampleTsUs_ = firstSampleTsUs_;
        result.sampleRateHz_ = sampleRateHz_;
        if (((bitField0_ & 0x00000001) != 0)) {
          samples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.samples_ = samples_;
        if (sampleStatisticsBuilder_ == null) {
          result.sampleStatistics_ = sampleStatistics_;
        } else {
          result.sampleStatistics_ = sampleStatisticsBuilder_.build();
        }
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RedvoxApi1000.MicrophoneChannel) {
          return mergeFrom((RedvoxApi1000.MicrophoneChannel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RedvoxApi1000.MicrophoneChannel other) {
        if (other == RedvoxApi1000.MicrophoneChannel.getDefaultInstance()) return this;
        if (!other.getSensorDescription().isEmpty()) {
          sensorDescription_ = other.sensorDescription_;
          onChanged();
        }
        if (other.getFirstSampleTsUs() != 0D) {
          setFirstSampleTsUs(other.getFirstSampleTsUs());
        }
        if (other.getSampleRateHz() != 0D) {
          setSampleRateHz(other.getSampleRateHz());
        }
        if (!other.samples_.isEmpty()) {
          if (samples_.isEmpty()) {
            samples_ = other.samples_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSamplesIsMutable();
            samples_.addAll(other.samples_);
          }
          onChanged();
        }
        if (other.hasSampleStatistics()) {
          mergeSampleStatistics(other.getSampleStatistics());
        }
        internalGetMutableMetadata().mergeFrom(
            other.internalGetMetadata());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RedvoxApi1000.MicrophoneChannel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RedvoxApi1000.MicrophoneChannel) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object sensorDescription_ = "";
      /**
       * <pre>
       * The name or description of the microphone sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The sensorDescription.
       */
      public java.lang.String getSensorDescription() {
        java.lang.Object ref = sensorDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sensorDescription_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the microphone sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The bytes for sensorDescription.
       */
      public com.google.protobuf.ByteString
          getSensorDescriptionBytes() {
        java.lang.Object ref = sensorDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sensorDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the microphone sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sensorDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the microphone sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorDescription() {
        
        sensorDescription_ = getDefaultInstance().getSensorDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the microphone sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The bytes for sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sensorDescription_ = value;
        onChanged();
        return this;
      }

      private double firstSampleTsUs_ ;
      /**
       * <pre>
       * Timestamp of the first microphone sample
       * </pre>
       *
       * <code>double first_sample_ts_us = 2;</code>
       * @return The firstSampleTsUs.
       */
      public double getFirstSampleTsUs() {
        return firstSampleTsUs_;
      }
      /**
       * <pre>
       * Timestamp of the first microphone sample
       * </pre>
       *
       * <code>double first_sample_ts_us = 2;</code>
       * @param value The firstSampleTsUs to set.
       * @return This builder for chaining.
       */
      public Builder setFirstSampleTsUs(double value) {
        
        firstSampleTsUs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Timestamp of the first microphone sample
       * </pre>
       *
       * <code>double first_sample_ts_us = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFirstSampleTsUs() {
        
        firstSampleTsUs_ = 0D;
        onChanged();
        return this;
      }

      private double sampleRateHz_ ;
      /**
       * <pre>
       * Microphone sample rate in Hz
       * </pre>
       *
       * <code>double sample_rate_hz = 3;</code>
       * @return The sampleRateHz.
       */
      public double getSampleRateHz() {
        return sampleRateHz_;
      }
      /**
       * <pre>
       * Microphone sample rate in Hz
       * </pre>
       *
       * <code>double sample_rate_hz = 3;</code>
       * @param value The sampleRateHz to set.
       * @return This builder for chaining.
       */
      public Builder setSampleRateHz(double value) {
        
        sampleRateHz_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Microphone sample rate in Hz
       * </pre>
       *
       * <code>double sample_rate_hz = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleRateHz() {
        
        sampleRateHz_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList samples_ = emptyDoubleList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          samples_ = mutableCopy(samples_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * List of microphone samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @return A list containing the samples.
       */
      public java.util.List<java.lang.Double>
          getSamplesList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(samples_) : samples_;
      }
      /**
       * <pre>
       * List of microphone samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @return The count of samples.
       */
      public int getSamplesCount() {
        return samples_.size();
      }
      /**
       * <pre>
       * List of microphone samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param index The index of the element to return.
       * @return The samples at the given index.
       */
      public double getSamples(int index) {
        return samples_.getDouble(index);
      }
      /**
       * <pre>
       * List of microphone samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param index The index to set the value at.
       * @param value The samples to set.
       * @return This builder for chaining.
       */
      public Builder setSamples(
          int index, double value) {
        ensureSamplesIsMutable();
        samples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of microphone samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param value The samples to add.
       * @return This builder for chaining.
       */
      public Builder addSamples(double value) {
        ensureSamplesIsMutable();
        samples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of microphone samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param values The samples to add.
       * @return This builder for chaining.
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, samples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of microphone samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSamples() {
        samples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private RedvoxApi1000.SummaryStatistics sampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> sampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       * @return Whether the sampleStatistics field is set.
       */
      public boolean hasSampleStatistics() {
        return sampleStatisticsBuilder_ != null || sampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       * @return The sampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getSampleStatistics() {
        if (sampleStatisticsBuilder_ == null) {
          return sampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleStatistics_;
        } else {
          return sampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       */
      public Builder setSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sampleStatistics_ = value;
          onChanged();
        } else {
          sampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       */
      public Builder setSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (sampleStatisticsBuilder_ == null) {
          sampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          sampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       */
      public Builder mergeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleStatisticsBuilder_ == null) {
          if (sampleStatistics_ != null) {
            sampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(sampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            sampleStatistics_ = value;
          }
          onChanged();
        } else {
          sampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       */
      public Builder clearSampleStatistics() {
        if (sampleStatisticsBuilder_ == null) {
          sampleStatistics_ = null;
          onChanged();
        } else {
          sampleStatistics_ = null;
          sampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getSampleStatisticsBuilder() {
        
        onChanged();
        return getSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleStatisticsOrBuilder() {
        if (sampleStatisticsBuilder_ != null) {
          return sampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return sampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for microphone samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getSampleStatisticsFieldBuilder() {
        if (sampleStatisticsBuilder_ == null) {
          sampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          sampleStatistics_ = null;
        }
        return sampleStatisticsBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> metadata_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMetadata() {
        if (metadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        return metadata_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableMetadata() {
        onChanged();;
        if (metadata_ == null) {
          metadata_ = com.google.protobuf.MapField.newMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        if (!metadata_.isMutable()) {
          metadata_ = metadata_.copy();
        }
        return metadata_;
      }

      public int getMetadataCount() {
        return internalGetMetadata().getMap().size();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public boolean containsMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMetadataMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return getMetadataMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
        return internalGetMetadata().getMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public java.lang.String getMetadataOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public java.lang.String getMetadataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMetadata() {
        internalGetMutableMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public Builder removeMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableMetadata() {
        return internalGetMutableMetadata().getMutableMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */
      public Builder putMetadata(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public Builder putAllMetadata(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableMetadata().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:MicrophoneChannel)
    }

    // @@protoc_insertion_point(class_scope:MicrophoneChannel)
    private static final RedvoxApi1000.MicrophoneChannel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RedvoxApi1000.MicrophoneChannel();
    }

    public static RedvoxApi1000.MicrophoneChannel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MicrophoneChannel>
        PARSER = new com.google.protobuf.AbstractParser<MicrophoneChannel>() {
      @java.lang.Override
      public MicrophoneChannel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MicrophoneChannel(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MicrophoneChannel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MicrophoneChannel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public RedvoxApi1000.MicrophoneChannel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SingleChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SingleChannel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    java.lang.String getSensorDescription();
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    com.google.protobuf.ByteString
        getSensorDescriptionBytes();

    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    double getMeanSampleRateHz();

    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    java.util.List<java.lang.Double> getSampleTsUsList();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    int getSampleTsUsCount();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    double getSampleTsUs(int index);

    /**
     * <pre>
     * A list of samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return A list containing the samples.
     */
    java.util.List<java.lang.Double> getSamplesList();
    /**
     * <pre>
     * A list of samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return The count of samples.
     */
    int getSamplesCount();
    /**
     * <pre>
     * A list of samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @param index The index of the element to return.
     * @return The samples at the given index.
     */
    double getSamples(int index);

    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    boolean hasSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return The sampleRateStatistics.
     */
    RedvoxApi1000.SummaryStatistics getSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 6;</code>
     * @return Whether the sampleStatistics field is set.
     */
    boolean hasSampleStatistics();
    /**
     * <pre>
     * Statistics for samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 6;</code>
     * @return The sampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getSampleStatistics();
    /**
     * <pre>
     * Statistics for samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 6;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getSampleStatisticsOrBuilder();

    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */
    int getMetadataCount();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */
    boolean containsMetadata(
        java.lang.String key);
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMetadata();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMetadataMap();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */

    java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */

    java.lang.String getMetadataOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Message type for non-microphone single channel sensors (barometer, light, infrared)
   * </pre>
   *
   * Protobuf type {@code SingleChannel}
   */
  public  static final class SingleChannel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SingleChannel)
      SingleChannelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SingleChannel.newBuilder() to construct.
    private SingleChannel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SingleChannel() {
      sensorDescription_ = "";
      sampleTsUs_ = emptyDoubleList();
      samples_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SingleChannel();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SingleChannel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              sensorDescription_ = s;
              break;
            }
            case 17: {

              meanSampleRateHz_ = input.readDouble();
              break;
            }
            case 25: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              sampleTsUs_.addDouble(input.readDouble());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                sampleTsUs_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 33: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                samples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000002;
              }
              samples_.addDouble(input.readDouble());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                samples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                samples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (sampleRateStatistics_ != null) {
                subBuilder = sampleRateStatistics_.toBuilder();
              }
              sampleRateStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sampleRateStatistics_);
                sampleRateStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (sampleStatistics_ != null) {
                subBuilder = sampleStatistics_.toBuilder();
              }
              sampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sampleStatistics_);
                sampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                metadata_ = com.google.protobuf.MapField.newMapField(
                    MetadataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              metadata_.getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          samples_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RedvoxApi1000.internal_static_SingleChannel_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RedvoxApi1000.internal_static_SingleChannel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RedvoxApi1000.SingleChannel.class, RedvoxApi1000.SingleChannel.Builder.class);
    }

    public static final int SENSOR_DESCRIPTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object sensorDescription_;
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    public java.lang.String getSensorDescription() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sensorDescription_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    public com.google.protobuf.ByteString
        getSensorDescriptionBytes() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sensorDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER = 2;
    private double meanSampleRateHz_;
    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    public double getMeanSampleRateHz() {
      return meanSampleRateHz_;
    }

    public static final int SAMPLE_TS_US_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.DoubleList sampleTsUs_;
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    public java.util.List<java.lang.Double>
        getSampleTsUsList() {
      return sampleTsUs_;
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    public int getSampleTsUsCount() {
      return sampleTsUs_.size();
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    public double getSampleTsUs(int index) {
      return sampleTsUs_.getDouble(index);
    }
    private int sampleTsUsMemoizedSerializedSize = -1;

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.DoubleList samples_;
    /**
     * <pre>
     * A list of samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return A list containing the samples.
     */
    public java.util.List<java.lang.Double>
        getSamplesList() {
      return samples_;
    }
    /**
     * <pre>
     * A list of samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @return The count of samples.
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <pre>
     * A list of samples
     * </pre>
     *
     * <code>repeated double samples = 4;</code>
     * @param index The index of the element to return.
     * @return The samples at the given index.
     */
    public double getSamples(int index) {
      return samples_.getDouble(index);
    }
    private int samplesMemoizedSerializedSize = -1;

    public static final int SAMPLE_RATE_STATISTICS_FIELD_NUMBER = 5;
    private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    public boolean hasSampleRateStatistics() {
      return sampleRateStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return The sampleRateStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
      return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
      return getSampleRateStatistics();
    }

    public static final int SAMPLE_STATISTICS_FIELD_NUMBER = 6;
    private RedvoxApi1000.SummaryStatistics sampleStatistics_;
    /**
     * <pre>
     * Statistics for samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 6;</code>
     * @return Whether the sampleStatistics field is set.
     */
    public boolean hasSampleStatistics() {
      return sampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 6;</code>
     * @return The sampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getSampleStatistics() {
      return sampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for samples
     * </pre>
     *
     * <code>.SummaryStatistics sample_statistics = 6;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleStatisticsOrBuilder() {
      return getSampleStatistics();
    }

    public static final int METADATA_FIELD_NUMBER = 7;
    private static final class MetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  RedvoxApi1000.internal_static_SingleChannel_MetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }

    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 7;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!getSensorDescriptionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        output.writeDouble(2, meanSampleRateHz_);
      }
      if (getSampleTsUsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(sampleTsUsMemoizedSerializedSize);
      }
      for (int i = 0; i < sampleTsUs_.size(); i++) {
        output.writeDoubleNoTag(sampleTsUs_.getDouble(i));
      }
      if (getSamplesList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(samplesMemoizedSerializedSize);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeDoubleNoTag(samples_.getDouble(i));
      }
      if (sampleRateStatistics_ != null) {
        output.writeMessage(5, getSampleRateStatistics());
      }
      if (sampleStatistics_ != null) {
        output.writeMessage(6, getSampleStatistics());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMetadata(),
          MetadataDefaultEntryHolder.defaultEntry,
          7);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSensorDescriptionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, meanSampleRateHz_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSampleTsUsList().size();
        size += dataSize;
        if (!getSampleTsUsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        sampleTsUsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSamplesList().size();
        size += dataSize;
        if (!getSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        samplesMemoizedSerializedSize = dataSize;
      }
      if (sampleRateStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSampleRateStatistics());
      }
      if (sampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getSampleStatistics());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, metadata__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RedvoxApi1000.SingleChannel)) {
        return super.equals(obj);
      }
      RedvoxApi1000.SingleChannel other = (RedvoxApi1000.SingleChannel) obj;

      if (!getSensorDescription()
          .equals(other.getSensorDescription())) return false;
      if (java.lang.Double.doubleToLongBits(getMeanSampleRateHz())
          != java.lang.Double.doubleToLongBits(
              other.getMeanSampleRateHz())) return false;
      if (!getSampleTsUsList()
          .equals(other.getSampleTsUsList())) return false;
      if (!getSamplesList()
          .equals(other.getSamplesList())) return false;
      if (hasSampleRateStatistics() != other.hasSampleRateStatistics()) return false;
      if (hasSampleRateStatistics()) {
        if (!getSampleRateStatistics()
            .equals(other.getSampleRateStatistics())) return false;
      }
      if (hasSampleStatistics() != other.hasSampleStatistics()) return false;
      if (hasSampleStatistics()) {
        if (!getSampleStatistics()
            .equals(other.getSampleStatistics())) return false;
      }
      if (!internalGetMetadata().equals(
          other.internalGetMetadata())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SENSOR_DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getSensorDescription().hashCode();
      hash = (37 * hash) + MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMeanSampleRateHz()));
      if (getSampleTsUsCount() > 0) {
        hash = (37 * hash) + SAMPLE_TS_US_FIELD_NUMBER;
        hash = (53 * hash) + getSampleTsUsList().hashCode();
      }
      if (getSamplesCount() > 0) {
        hash = (37 * hash) + SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getSamplesList().hashCode();
      }
      if (hasSampleRateStatistics()) {
        hash = (37 * hash) + SAMPLE_RATE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getSampleRateStatistics().hashCode();
      }
      if (hasSampleStatistics()) {
        hash = (37 * hash) + SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getSampleStatistics().hashCode();
      }
      if (!internalGetMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMetadata().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RedvoxApi1000.SingleChannel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.SingleChannel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.SingleChannel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.SingleChannel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RedvoxApi1000.SingleChannel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message type for non-microphone single channel sensors (barometer, light, infrared)
     * </pre>
     *
     * Protobuf type {@code SingleChannel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SingleChannel)
        RedvoxApi1000.SingleChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RedvoxApi1000.internal_static_SingleChannel_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 7:
            return internalGetMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 7:
            return internalGetMutableMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RedvoxApi1000.internal_static_SingleChannel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RedvoxApi1000.SingleChannel.class, RedvoxApi1000.SingleChannel.Builder.class);
      }

      // Construct using RedvoxApi1000.SingleChannel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        sensorDescription_ = "";

        meanSampleRateHz_ = 0D;

        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        samples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }
        if (sampleStatisticsBuilder_ == null) {
          sampleStatistics_ = null;
        } else {
          sampleStatistics_ = null;
          sampleStatisticsBuilder_ = null;
        }
        internalGetMutableMetadata().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RedvoxApi1000.internal_static_SingleChannel_descriptor;
      }

      @java.lang.Override
      public RedvoxApi1000.SingleChannel getDefaultInstanceForType() {
        return RedvoxApi1000.SingleChannel.getDefaultInstance();
      }

      @java.lang.Override
      public RedvoxApi1000.SingleChannel build() {
        RedvoxApi1000.SingleChannel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public RedvoxApi1000.SingleChannel buildPartial() {
        RedvoxApi1000.SingleChannel result = new RedvoxApi1000.SingleChannel(this);
        int from_bitField0_ = bitField0_;
        result.sensorDescription_ = sensorDescription_;
        result.meanSampleRateHz_ = meanSampleRateHz_;
        if (((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.sampleTsUs_ = sampleTsUs_;
        if (((bitField0_ & 0x00000002) != 0)) {
          samples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.samples_ = samples_;
        if (sampleRateStatisticsBuilder_ == null) {
          result.sampleRateStatistics_ = sampleRateStatistics_;
        } else {
          result.sampleRateStatistics_ = sampleRateStatisticsBuilder_.build();
        }
        if (sampleStatisticsBuilder_ == null) {
          result.sampleStatistics_ = sampleStatistics_;
        } else {
          result.sampleStatistics_ = sampleStatisticsBuilder_.build();
        }
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RedvoxApi1000.SingleChannel) {
          return mergeFrom((RedvoxApi1000.SingleChannel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RedvoxApi1000.SingleChannel other) {
        if (other == RedvoxApi1000.SingleChannel.getDefaultInstance()) return this;
        if (!other.getSensorDescription().isEmpty()) {
          sensorDescription_ = other.sensorDescription_;
          onChanged();
        }
        if (other.getMeanSampleRateHz() != 0D) {
          setMeanSampleRateHz(other.getMeanSampleRateHz());
        }
        if (!other.sampleTsUs_.isEmpty()) {
          if (sampleTsUs_.isEmpty()) {
            sampleTsUs_ = other.sampleTsUs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSampleTsUsIsMutable();
            sampleTsUs_.addAll(other.sampleTsUs_);
          }
          onChanged();
        }
        if (!other.samples_.isEmpty()) {
          if (samples_.isEmpty()) {
            samples_ = other.samples_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSamplesIsMutable();
            samples_.addAll(other.samples_);
          }
          onChanged();
        }
        if (other.hasSampleRateStatistics()) {
          mergeSampleRateStatistics(other.getSampleRateStatistics());
        }
        if (other.hasSampleStatistics()) {
          mergeSampleStatistics(other.getSampleStatistics());
        }
        internalGetMutableMetadata().mergeFrom(
            other.internalGetMetadata());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RedvoxApi1000.SingleChannel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RedvoxApi1000.SingleChannel) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object sensorDescription_ = "";
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The sensorDescription.
       */
      public java.lang.String getSensorDescription() {
        java.lang.Object ref = sensorDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sensorDescription_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The bytes for sensorDescription.
       */
      public com.google.protobuf.ByteString
          getSensorDescriptionBytes() {
        java.lang.Object ref = sensorDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sensorDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sensorDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorDescription() {
        
        sensorDescription_ = getDefaultInstance().getSensorDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The bytes for sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sensorDescription_ = value;
        onChanged();
        return this;
      }

      private double meanSampleRateHz_ ;
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return The meanSampleRateHz.
       */
      public double getMeanSampleRateHz() {
        return meanSampleRateHz_;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @param value The meanSampleRateHz to set.
       * @return This builder for chaining.
       */
      public Builder setMeanSampleRateHz(double value) {
        
        meanSampleRateHz_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMeanSampleRateHz() {
        
        meanSampleRateHz_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList sampleTsUs_ = emptyDoubleList();
      private void ensureSampleTsUsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_ = mutableCopy(sampleTsUs_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return A list containing the sampleTsUs.
       */
      public java.util.List<java.lang.Double>
          getSampleTsUsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(sampleTsUs_) : sampleTsUs_;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return The count of sampleTsUs.
       */
      public int getSampleTsUsCount() {
        return sampleTsUs_.size();
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index of the element to return.
       * @return The sampleTsUs at the given index.
       */
      public double getSampleTsUs(int index) {
        return sampleTsUs_.getDouble(index);
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index to set the value at.
       * @param value The sampleTsUs to set.
       * @return This builder for chaining.
       */
      public Builder setSampleTsUs(
          int index, double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param value The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addSampleTsUs(double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param values The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addAllSampleTsUs(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSampleTsUsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sampleTsUs_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleTsUs() {
        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList samples_ = emptyDoubleList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          samples_ = mutableCopy(samples_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * A list of samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @return A list containing the samples.
       */
      public java.util.List<java.lang.Double>
          getSamplesList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(samples_) : samples_;
      }
      /**
       * <pre>
       * A list of samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @return The count of samples.
       */
      public int getSamplesCount() {
        return samples_.size();
      }
      /**
       * <pre>
       * A list of samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param index The index of the element to return.
       * @return The samples at the given index.
       */
      public double getSamples(int index) {
        return samples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param index The index to set the value at.
       * @param value The samples to set.
       * @return This builder for chaining.
       */
      public Builder setSamples(
          int index, double value) {
        ensureSamplesIsMutable();
        samples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param value The samples to add.
       * @return This builder for chaining.
       */
      public Builder addSamples(double value) {
        ensureSamplesIsMutable();
        samples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @param values The samples to add.
       * @return This builder for chaining.
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, samples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples
       * </pre>
       *
       * <code>repeated double samples = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSamples() {
        samples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> sampleRateStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       * @return Whether the sampleRateStatistics field is set.
       */
      public boolean hasSampleRateStatistics() {
        return sampleRateStatisticsBuilder_ != null || sampleRateStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       * @return The sampleRateStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        } else {
          return sampleRateStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder setSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sampleRateStatistics_ = value;
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder setSampleRateStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = builderForValue.build();
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder mergeSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (sampleRateStatistics_ != null) {
            sampleRateStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(sampleRateStatistics_).mergeFrom(value).buildPartial();
          } else {
            sampleRateStatistics_ = value;
          }
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder clearSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
          onChanged();
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getSampleRateStatisticsBuilder() {
        
        onChanged();
        return getSampleRateStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
        if (sampleRateStatisticsBuilder_ != null) {
          return sampleRateStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return sampleRateStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getSampleRateStatisticsFieldBuilder() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getSampleRateStatistics(),
                  getParentForChildren(),
                  isClean());
          sampleRateStatistics_ = null;
        }
        return sampleRateStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics sampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> sampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       * @return Whether the sampleStatistics field is set.
       */
      public boolean hasSampleStatistics() {
        return sampleStatisticsBuilder_ != null || sampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       * @return The sampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getSampleStatistics() {
        if (sampleStatisticsBuilder_ == null) {
          return sampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleStatistics_;
        } else {
          return sampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       */
      public Builder setSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sampleStatistics_ = value;
          onChanged();
        } else {
          sampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       */
      public Builder setSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (sampleStatisticsBuilder_ == null) {
          sampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          sampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       */
      public Builder mergeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleStatisticsBuilder_ == null) {
          if (sampleStatistics_ != null) {
            sampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(sampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            sampleStatistics_ = value;
          }
          onChanged();
        } else {
          sampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       */
      public Builder clearSampleStatistics() {
        if (sampleStatisticsBuilder_ == null) {
          sampleStatistics_ = null;
          onChanged();
        } else {
          sampleStatistics_ = null;
          sampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getSampleStatisticsBuilder() {
        
        onChanged();
        return getSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleStatisticsOrBuilder() {
        if (sampleStatisticsBuilder_ != null) {
          return sampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return sampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for samples
       * </pre>
       *
       * <code>.SummaryStatistics sample_statistics = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getSampleStatisticsFieldBuilder() {
        if (sampleStatisticsBuilder_ == null) {
          sampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          sampleStatistics_ = null;
        }
        return sampleStatisticsBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> metadata_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMetadata() {
        if (metadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        return metadata_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableMetadata() {
        onChanged();;
        if (metadata_ == null) {
          metadata_ = com.google.protobuf.MapField.newMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        if (!metadata_.isMutable()) {
          metadata_ = metadata_.copy();
        }
        return metadata_;
      }

      public int getMetadataCount() {
        return internalGetMetadata().getMap().size();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 7;</code>
       */

      public boolean containsMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMetadataMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return getMetadataMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 7;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
        return internalGetMetadata().getMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 7;</code>
       */

      public java.lang.String getMetadataOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 7;</code>
       */

      public java.lang.String getMetadataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMetadata() {
        internalGetMutableMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 7;</code>
       */

      public Builder removeMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableMetadata() {
        return internalGetMutableMetadata().getMutableMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 7;</code>
       */
      public Builder putMetadata(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 7;</code>
       */

      public Builder putAllMetadata(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableMetadata().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SingleChannel)
    }

    // @@protoc_insertion_point(class_scope:SingleChannel)
    private static final RedvoxApi1000.SingleChannel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RedvoxApi1000.SingleChannel();
    }

    public static RedvoxApi1000.SingleChannel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SingleChannel>
        PARSER = new com.google.protobuf.AbstractParser<SingleChannel>() {
      @java.lang.Override
      public SingleChannel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SingleChannel(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SingleChannel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SingleChannel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public RedvoxApi1000.SingleChannel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface XyzChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:XyzChannel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    java.lang.String getSensorDescription();
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    com.google.protobuf.ByteString
        getSensorDescriptionBytes();

    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    double getMeanSampleRateHz();

    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    java.util.List<java.lang.Double> getSampleTsUsList();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    int getSampleTsUsCount();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    double getSampleTsUs(int index);

    /**
     * <pre>
     * A list of samples for the X-channel
     * </pre>
     *
     * <code>repeated double x_samples = 4;</code>
     * @return A list containing the xSamples.
     */
    java.util.List<java.lang.Double> getXSamplesList();
    /**
     * <pre>
     * A list of samples for the X-channel
     * </pre>
     *
     * <code>repeated double x_samples = 4;</code>
     * @return The count of xSamples.
     */
    int getXSamplesCount();
    /**
     * <pre>
     * A list of samples for the X-channel
     * </pre>
     *
     * <code>repeated double x_samples = 4;</code>
     * @param index The index of the element to return.
     * @return The xSamples at the given index.
     */
    double getXSamples(int index);

    /**
     * <pre>
     * A list of samples for the Y-channel
     * </pre>
     *
     * <code>repeated double y_samples = 5;</code>
     * @return A list containing the ySamples.
     */
    java.util.List<java.lang.Double> getYSamplesList();
    /**
     * <pre>
     * A list of samples for the Y-channel
     * </pre>
     *
     * <code>repeated double y_samples = 5;</code>
     * @return The count of ySamples.
     */
    int getYSamplesCount();
    /**
     * <pre>
     * A list of samples for the Y-channel
     * </pre>
     *
     * <code>repeated double y_samples = 5;</code>
     * @param index The index of the element to return.
     * @return The ySamples at the given index.
     */
    double getYSamples(int index);

    /**
     * <pre>
     * A list of samples for the Z-channel
     * </pre>
     *
     * <code>repeated double z_samples = 6;</code>
     * @return A list containing the zSamples.
     */
    java.util.List<java.lang.Double> getZSamplesList();
    /**
     * <pre>
     * A list of samples for the Z-channel
     * </pre>
     *
     * <code>repeated double z_samples = 6;</code>
     * @return The count of zSamples.
     */
    int getZSamplesCount();
    /**
     * <pre>
     * A list of samples for the Z-channel
     * </pre>
     *
     * <code>repeated double z_samples = 6;</code>
     * @param index The index of the element to return.
     * @return The zSamples at the given index.
     */
    double getZSamples(int index);

    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    boolean hasSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
     * @return The sampleRateStatistics.
     */
    RedvoxApi1000.SummaryStatistics getSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for X-channel
     * </pre>
     *
     * <code>.SummaryStatistics x_sample_statistics = 8;</code>
     * @return Whether the xSampleStatistics field is set.
     */
    boolean hasXSampleStatistics();
    /**
     * <pre>
     * Statistics for X-channel
     * </pre>
     *
     * <code>.SummaryStatistics x_sample_statistics = 8;</code>
     * @return The xSampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getXSampleStatistics();
    /**
     * <pre>
     * Statistics for X-channel
     * </pre>
     *
     * <code>.SummaryStatistics x_sample_statistics = 8;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getXSampleStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for Y-channel
     * </pre>
     *
     * <code>.SummaryStatistics y_sample_statistics = 9;</code>
     * @return Whether the ySampleStatistics field is set.
     */
    boolean hasYSampleStatistics();
    /**
     * <pre>
     * Statistics for Y-channel
     * </pre>
     *
     * <code>.SummaryStatistics y_sample_statistics = 9;</code>
     * @return The ySampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getYSampleStatistics();
    /**
     * <pre>
     * Statistics for Y-channel
     * </pre>
     *
     * <code>.SummaryStatistics y_sample_statistics = 9;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getYSampleStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for Z-channel
     * </pre>
     *
     * <code>.SummaryStatistics z_sample_statistics = 10;</code>
     * @return Whether the zSampleStatistics field is set.
     */
    boolean hasZSampleStatistics();
    /**
     * <pre>
     * Statistics for Z-channel
     * </pre>
     *
     * <code>.SummaryStatistics z_sample_statistics = 10;</code>
     * @return The zSampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getZSampleStatistics();
    /**
     * <pre>
     * Statistics for Z-channel
     * </pre>
     *
     * <code>.SummaryStatistics z_sample_statistics = 10;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getZSampleStatisticsOrBuilder();

    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */
    int getMetadataCount();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */
    boolean containsMetadata(
        java.lang.String key);
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMetadata();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMetadataMap();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */

    java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */

    java.lang.String getMetadataOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Message type for channels that include x, y, and z samples (accelerometer, magnetometer, gyroscope)
   * </pre>
   *
   * Protobuf type {@code XyzChannel}
   */
  public  static final class XyzChannel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:XyzChannel)
      XyzChannelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use XyzChannel.newBuilder() to construct.
    private XyzChannel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private XyzChannel() {
      sensorDescription_ = "";
      sampleTsUs_ = emptyDoubleList();
      xSamples_ = emptyDoubleList();
      ySamples_ = emptyDoubleList();
      zSamples_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new XyzChannel();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private XyzChannel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              sensorDescription_ = s;
              break;
            }
            case 17: {

              meanSampleRateHz_ = input.readDouble();
              break;
            }
            case 25: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              sampleTsUs_.addDouble(input.readDouble());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                sampleTsUs_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 33: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                xSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000002;
              }
              xSamples_.addDouble(input.readDouble());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                xSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                xSamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 41: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                ySamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              ySamples_.addDouble(input.readDouble());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                ySamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                ySamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                zSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000008;
              }
              zSamples_.addDouble(input.readDouble());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
                zSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                zSamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 58: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (sampleRateStatistics_ != null) {
                subBuilder = sampleRateStatistics_.toBuilder();
              }
              sampleRateStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sampleRateStatistics_);
                sampleRateStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (xSampleStatistics_ != null) {
                subBuilder = xSampleStatistics_.toBuilder();
              }
              xSampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(xSampleStatistics_);
                xSampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (ySampleStatistics_ != null) {
                subBuilder = ySampleStatistics_.toBuilder();
              }
              ySampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ySampleStatistics_);
                ySampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 82: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (zSampleStatistics_ != null) {
                subBuilder = zSampleStatistics_.toBuilder();
              }
              zSampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(zSampleStatistics_);
                zSampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                metadata_ = com.google.protobuf.MapField.newMapField(
                    MetadataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              metadata_.getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          xSamples_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          ySamples_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          zSamples_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RedvoxApi1000.internal_static_XyzChannel_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 11:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RedvoxApi1000.internal_static_XyzChannel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RedvoxApi1000.XyzChannel.class, RedvoxApi1000.XyzChannel.Builder.class);
    }

    public static final int SENSOR_DESCRIPTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object sensorDescription_;
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    public java.lang.String getSensorDescription() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sensorDescription_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    public com.google.protobuf.ByteString
        getSensorDescriptionBytes() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sensorDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER = 2;
    private double meanSampleRateHz_;
    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    public double getMeanSampleRateHz() {
      return meanSampleRateHz_;
    }

    public static final int SAMPLE_TS_US_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.DoubleList sampleTsUs_;
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    public java.util.List<java.lang.Double>
        getSampleTsUsList() {
      return sampleTsUs_;
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    public int getSampleTsUsCount() {
      return sampleTsUs_.size();
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    public double getSampleTsUs(int index) {
      return sampleTsUs_.getDouble(index);
    }
    private int sampleTsUsMemoizedSerializedSize = -1;

    public static final int X_SAMPLES_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.DoubleList xSamples_;
    /**
     * <pre>
     * A list of samples for the X-channel
     * </pre>
     *
     * <code>repeated double x_samples = 4;</code>
     * @return A list containing the xSamples.
     */
    public java.util.List<java.lang.Double>
        getXSamplesList() {
      return xSamples_;
    }
    /**
     * <pre>
     * A list of samples for the X-channel
     * </pre>
     *
     * <code>repeated double x_samples = 4;</code>
     * @return The count of xSamples.
     */
    public int getXSamplesCount() {
      return xSamples_.size();
    }
    /**
     * <pre>
     * A list of samples for the X-channel
     * </pre>
     *
     * <code>repeated double x_samples = 4;</code>
     * @param index The index of the element to return.
     * @return The xSamples at the given index.
     */
    public double getXSamples(int index) {
      return xSamples_.getDouble(index);
    }
    private int xSamplesMemoizedSerializedSize = -1;

    public static final int Y_SAMPLES_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.DoubleList ySamples_;
    /**
     * <pre>
     * A list of samples for the Y-channel
     * </pre>
     *
     * <code>repeated double y_samples = 5;</code>
     * @return A list containing the ySamples.
     */
    public java.util.List<java.lang.Double>
        getYSamplesList() {
      return ySamples_;
    }
    /**
     * <pre>
     * A list of samples for the Y-channel
     * </pre>
     *
     * <code>repeated double y_samples = 5;</code>
     * @return The count of ySamples.
     */
    public int getYSamplesCount() {
      return ySamples_.size();
    }
    /**
     * <pre>
     * A list of samples for the Y-channel
     * </pre>
     *
     * <code>repeated double y_samples = 5;</code>
     * @param index The index of the element to return.
     * @return The ySamples at the given index.
     */
    public double getYSamples(int index) {
      return ySamples_.getDouble(index);
    }
    private int ySamplesMemoizedSerializedSize = -1;

    public static final int Z_SAMPLES_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.DoubleList zSamples_;
    /**
     * <pre>
     * A list of samples for the Z-channel
     * </pre>
     *
     * <code>repeated double z_samples = 6;</code>
     * @return A list containing the zSamples.
     */
    public java.util.List<java.lang.Double>
        getZSamplesList() {
      return zSamples_;
    }
    /**
     * <pre>
     * A list of samples for the Z-channel
     * </pre>
     *
     * <code>repeated double z_samples = 6;</code>
     * @return The count of zSamples.
     */
    public int getZSamplesCount() {
      return zSamples_.size();
    }
    /**
     * <pre>
     * A list of samples for the Z-channel
     * </pre>
     *
     * <code>repeated double z_samples = 6;</code>
     * @param index The index of the element to return.
     * @return The zSamples at the given index.
     */
    public double getZSamples(int index) {
      return zSamples_.getDouble(index);
    }
    private int zSamplesMemoizedSerializedSize = -1;

    public static final int SAMPLE_RATE_STATISTICS_FIELD_NUMBER = 7;
    private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    public boolean hasSampleRateStatistics() {
      return sampleRateStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
     * @return The sampleRateStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
      return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
      return getSampleRateStatistics();
    }

    public static final int X_SAMPLE_STATISTICS_FIELD_NUMBER = 8;
    private RedvoxApi1000.SummaryStatistics xSampleStatistics_;
    /**
     * <pre>
     * Statistics for X-channel
     * </pre>
     *
     * <code>.SummaryStatistics x_sample_statistics = 8;</code>
     * @return Whether the xSampleStatistics field is set.
     */
    public boolean hasXSampleStatistics() {
      return xSampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for X-channel
     * </pre>
     *
     * <code>.SummaryStatistics x_sample_statistics = 8;</code>
     * @return The xSampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getXSampleStatistics() {
      return xSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : xSampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for X-channel
     * </pre>
     *
     * <code>.SummaryStatistics x_sample_statistics = 8;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getXSampleStatisticsOrBuilder() {
      return getXSampleStatistics();
    }

    public static final int Y_SAMPLE_STATISTICS_FIELD_NUMBER = 9;
    private RedvoxApi1000.SummaryStatistics ySampleStatistics_;
    /**
     * <pre>
     * Statistics for Y-channel
     * </pre>
     *
     * <code>.SummaryStatistics y_sample_statistics = 9;</code>
     * @return Whether the ySampleStatistics field is set.
     */
    public boolean hasYSampleStatistics() {
      return ySampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for Y-channel
     * </pre>
     *
     * <code>.SummaryStatistics y_sample_statistics = 9;</code>
     * @return The ySampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getYSampleStatistics() {
      return ySampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : ySampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for Y-channel
     * </pre>
     *
     * <code>.SummaryStatistics y_sample_statistics = 9;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getYSampleStatisticsOrBuilder() {
      return getYSampleStatistics();
    }

    public static final int Z_SAMPLE_STATISTICS_FIELD_NUMBER = 10;
    private RedvoxApi1000.SummaryStatistics zSampleStatistics_;
    /**
     * <pre>
     * Statistics for Z-channel
     * </pre>
     *
     * <code>.SummaryStatistics z_sample_statistics = 10;</code>
     * @return Whether the zSampleStatistics field is set.
     */
    public boolean hasZSampleStatistics() {
      return zSampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for Z-channel
     * </pre>
     *
     * <code>.SummaryStatistics z_sample_statistics = 10;</code>
     * @return The zSampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getZSampleStatistics() {
      return zSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : zSampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for Z-channel
     * </pre>
     *
     * <code>.SummaryStatistics z_sample_statistics = 10;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getZSampleStatisticsOrBuilder() {
      return getZSampleStatistics();
    }

    public static final int METADATA_FIELD_NUMBER = 11;
    private static final class MetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  RedvoxApi1000.internal_static_XyzChannel_MetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }

    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 11;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!getSensorDescriptionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        output.writeDouble(2, meanSampleRateHz_);
      }
      if (getSampleTsUsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(sampleTsUsMemoizedSerializedSize);
      }
      for (int i = 0; i < sampleTsUs_.size(); i++) {
        output.writeDoubleNoTag(sampleTsUs_.getDouble(i));
      }
      if (getXSamplesList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(xSamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < xSamples_.size(); i++) {
        output.writeDoubleNoTag(xSamples_.getDouble(i));
      }
      if (getYSamplesList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(ySamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < ySamples_.size(); i++) {
        output.writeDoubleNoTag(ySamples_.getDouble(i));
      }
      if (getZSamplesList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(zSamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < zSamples_.size(); i++) {
        output.writeDoubleNoTag(zSamples_.getDouble(i));
      }
      if (sampleRateStatistics_ != null) {
        output.writeMessage(7, getSampleRateStatistics());
      }
      if (xSampleStatistics_ != null) {
        output.writeMessage(8, getXSampleStatistics());
      }
      if (ySampleStatistics_ != null) {
        output.writeMessage(9, getYSampleStatistics());
      }
      if (zSampleStatistics_ != null) {
        output.writeMessage(10, getZSampleStatistics());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMetadata(),
          MetadataDefaultEntryHolder.defaultEntry,
          11);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSensorDescriptionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, meanSampleRateHz_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSampleTsUsList().size();
        size += dataSize;
        if (!getSampleTsUsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        sampleTsUsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getXSamplesList().size();
        size += dataSize;
        if (!getXSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        xSamplesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getYSamplesList().size();
        size += dataSize;
        if (!getYSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        ySamplesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getZSamplesList().size();
        size += dataSize;
        if (!getZSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        zSamplesMemoizedSerializedSize = dataSize;
      }
      if (sampleRateStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getSampleRateStatistics());
      }
      if (xSampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getXSampleStatistics());
      }
      if (ySampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getYSampleStatistics());
      }
      if (zSampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getZSampleStatistics());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, metadata__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RedvoxApi1000.XyzChannel)) {
        return super.equals(obj);
      }
      RedvoxApi1000.XyzChannel other = (RedvoxApi1000.XyzChannel) obj;

      if (!getSensorDescription()
          .equals(other.getSensorDescription())) return false;
      if (java.lang.Double.doubleToLongBits(getMeanSampleRateHz())
          != java.lang.Double.doubleToLongBits(
              other.getMeanSampleRateHz())) return false;
      if (!getSampleTsUsList()
          .equals(other.getSampleTsUsList())) return false;
      if (!getXSamplesList()
          .equals(other.getXSamplesList())) return false;
      if (!getYSamplesList()
          .equals(other.getYSamplesList())) return false;
      if (!getZSamplesList()
          .equals(other.getZSamplesList())) return false;
      if (hasSampleRateStatistics() != other.hasSampleRateStatistics()) return false;
      if (hasSampleRateStatistics()) {
        if (!getSampleRateStatistics()
            .equals(other.getSampleRateStatistics())) return false;
      }
      if (hasXSampleStatistics() != other.hasXSampleStatistics()) return false;
      if (hasXSampleStatistics()) {
        if (!getXSampleStatistics()
            .equals(other.getXSampleStatistics())) return false;
      }
      if (hasYSampleStatistics() != other.hasYSampleStatistics()) return false;
      if (hasYSampleStatistics()) {
        if (!getYSampleStatistics()
            .equals(other.getYSampleStatistics())) return false;
      }
      if (hasZSampleStatistics() != other.hasZSampleStatistics()) return false;
      if (hasZSampleStatistics()) {
        if (!getZSampleStatistics()
            .equals(other.getZSampleStatistics())) return false;
      }
      if (!internalGetMetadata().equals(
          other.internalGetMetadata())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SENSOR_DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getSensorDescription().hashCode();
      hash = (37 * hash) + MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMeanSampleRateHz()));
      if (getSampleTsUsCount() > 0) {
        hash = (37 * hash) + SAMPLE_TS_US_FIELD_NUMBER;
        hash = (53 * hash) + getSampleTsUsList().hashCode();
      }
      if (getXSamplesCount() > 0) {
        hash = (37 * hash) + X_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getXSamplesList().hashCode();
      }
      if (getYSamplesCount() > 0) {
        hash = (37 * hash) + Y_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getYSamplesList().hashCode();
      }
      if (getZSamplesCount() > 0) {
        hash = (37 * hash) + Z_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getZSamplesList().hashCode();
      }
      if (hasSampleRateStatistics()) {
        hash = (37 * hash) + SAMPLE_RATE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getSampleRateStatistics().hashCode();
      }
      if (hasXSampleStatistics()) {
        hash = (37 * hash) + X_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getXSampleStatistics().hashCode();
      }
      if (hasYSampleStatistics()) {
        hash = (37 * hash) + Y_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getYSampleStatistics().hashCode();
      }
      if (hasZSampleStatistics()) {
        hash = (37 * hash) + Z_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getZSampleStatistics().hashCode();
      }
      if (!internalGetMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMetadata().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RedvoxApi1000.XyzChannel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.XyzChannel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.XyzChannel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.XyzChannel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RedvoxApi1000.XyzChannel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message type for channels that include x, y, and z samples (accelerometer, magnetometer, gyroscope)
     * </pre>
     *
     * Protobuf type {@code XyzChannel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:XyzChannel)
        RedvoxApi1000.XyzChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RedvoxApi1000.internal_static_XyzChannel_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 11:
            return internalGetMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 11:
            return internalGetMutableMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RedvoxApi1000.internal_static_XyzChannel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RedvoxApi1000.XyzChannel.class, RedvoxApi1000.XyzChannel.Builder.class);
      }

      // Construct using RedvoxApi1000.XyzChannel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        sensorDescription_ = "";

        meanSampleRateHz_ = 0D;

        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        xSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        ySamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        zSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }
        if (xSampleStatisticsBuilder_ == null) {
          xSampleStatistics_ = null;
        } else {
          xSampleStatistics_ = null;
          xSampleStatisticsBuilder_ = null;
        }
        if (ySampleStatisticsBuilder_ == null) {
          ySampleStatistics_ = null;
        } else {
          ySampleStatistics_ = null;
          ySampleStatisticsBuilder_ = null;
        }
        if (zSampleStatisticsBuilder_ == null) {
          zSampleStatistics_ = null;
        } else {
          zSampleStatistics_ = null;
          zSampleStatisticsBuilder_ = null;
        }
        internalGetMutableMetadata().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RedvoxApi1000.internal_static_XyzChannel_descriptor;
      }

      @java.lang.Override
      public RedvoxApi1000.XyzChannel getDefaultInstanceForType() {
        return RedvoxApi1000.XyzChannel.getDefaultInstance();
      }

      @java.lang.Override
      public RedvoxApi1000.XyzChannel build() {
        RedvoxApi1000.XyzChannel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public RedvoxApi1000.XyzChannel buildPartial() {
        RedvoxApi1000.XyzChannel result = new RedvoxApi1000.XyzChannel(this);
        int from_bitField0_ = bitField0_;
        result.sensorDescription_ = sensorDescription_;
        result.meanSampleRateHz_ = meanSampleRateHz_;
        if (((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.sampleTsUs_ = sampleTsUs_;
        if (((bitField0_ & 0x00000002) != 0)) {
          xSamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.xSamples_ = xSamples_;
        if (((bitField0_ & 0x00000004) != 0)) {
          ySamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.ySamples_ = ySamples_;
        if (((bitField0_ & 0x00000008) != 0)) {
          zSamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.zSamples_ = zSamples_;
        if (sampleRateStatisticsBuilder_ == null) {
          result.sampleRateStatistics_ = sampleRateStatistics_;
        } else {
          result.sampleRateStatistics_ = sampleRateStatisticsBuilder_.build();
        }
        if (xSampleStatisticsBuilder_ == null) {
          result.xSampleStatistics_ = xSampleStatistics_;
        } else {
          result.xSampleStatistics_ = xSampleStatisticsBuilder_.build();
        }
        if (ySampleStatisticsBuilder_ == null) {
          result.ySampleStatistics_ = ySampleStatistics_;
        } else {
          result.ySampleStatistics_ = ySampleStatisticsBuilder_.build();
        }
        if (zSampleStatisticsBuilder_ == null) {
          result.zSampleStatistics_ = zSampleStatistics_;
        } else {
          result.zSampleStatistics_ = zSampleStatisticsBuilder_.build();
        }
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RedvoxApi1000.XyzChannel) {
          return mergeFrom((RedvoxApi1000.XyzChannel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RedvoxApi1000.XyzChannel other) {
        if (other == RedvoxApi1000.XyzChannel.getDefaultInstance()) return this;
        if (!other.getSensorDescription().isEmpty()) {
          sensorDescription_ = other.sensorDescription_;
          onChanged();
        }
        if (other.getMeanSampleRateHz() != 0D) {
          setMeanSampleRateHz(other.getMeanSampleRateHz());
        }
        if (!other.sampleTsUs_.isEmpty()) {
          if (sampleTsUs_.isEmpty()) {
            sampleTsUs_ = other.sampleTsUs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSampleTsUsIsMutable();
            sampleTsUs_.addAll(other.sampleTsUs_);
          }
          onChanged();
        }
        if (!other.xSamples_.isEmpty()) {
          if (xSamples_.isEmpty()) {
            xSamples_ = other.xSamples_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureXSamplesIsMutable();
            xSamples_.addAll(other.xSamples_);
          }
          onChanged();
        }
        if (!other.ySamples_.isEmpty()) {
          if (ySamples_.isEmpty()) {
            ySamples_ = other.ySamples_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureYSamplesIsMutable();
            ySamples_.addAll(other.ySamples_);
          }
          onChanged();
        }
        if (!other.zSamples_.isEmpty()) {
          if (zSamples_.isEmpty()) {
            zSamples_ = other.zSamples_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureZSamplesIsMutable();
            zSamples_.addAll(other.zSamples_);
          }
          onChanged();
        }
        if (other.hasSampleRateStatistics()) {
          mergeSampleRateStatistics(other.getSampleRateStatistics());
        }
        if (other.hasXSampleStatistics()) {
          mergeXSampleStatistics(other.getXSampleStatistics());
        }
        if (other.hasYSampleStatistics()) {
          mergeYSampleStatistics(other.getYSampleStatistics());
        }
        if (other.hasZSampleStatistics()) {
          mergeZSampleStatistics(other.getZSampleStatistics());
        }
        internalGetMutableMetadata().mergeFrom(
            other.internalGetMetadata());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RedvoxApi1000.XyzChannel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RedvoxApi1000.XyzChannel) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object sensorDescription_ = "";
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The sensorDescription.
       */
      public java.lang.String getSensorDescription() {
        java.lang.Object ref = sensorDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sensorDescription_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The bytes for sensorDescription.
       */
      public com.google.protobuf.ByteString
          getSensorDescriptionBytes() {
        java.lang.Object ref = sensorDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sensorDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sensorDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorDescription() {
        
        sensorDescription_ = getDefaultInstance().getSensorDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The bytes for sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sensorDescription_ = value;
        onChanged();
        return this;
      }

      private double meanSampleRateHz_ ;
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return The meanSampleRateHz.
       */
      public double getMeanSampleRateHz() {
        return meanSampleRateHz_;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @param value The meanSampleRateHz to set.
       * @return This builder for chaining.
       */
      public Builder setMeanSampleRateHz(double value) {
        
        meanSampleRateHz_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMeanSampleRateHz() {
        
        meanSampleRateHz_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList sampleTsUs_ = emptyDoubleList();
      private void ensureSampleTsUsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_ = mutableCopy(sampleTsUs_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return A list containing the sampleTsUs.
       */
      public java.util.List<java.lang.Double>
          getSampleTsUsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(sampleTsUs_) : sampleTsUs_;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return The count of sampleTsUs.
       */
      public int getSampleTsUsCount() {
        return sampleTsUs_.size();
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index of the element to return.
       * @return The sampleTsUs at the given index.
       */
      public double getSampleTsUs(int index) {
        return sampleTsUs_.getDouble(index);
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index to set the value at.
       * @param value The sampleTsUs to set.
       * @return This builder for chaining.
       */
      public Builder setSampleTsUs(
          int index, double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param value The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addSampleTsUs(double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param values The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addAllSampleTsUs(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSampleTsUsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sampleTsUs_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleTsUs() {
        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList xSamples_ = emptyDoubleList();
      private void ensureXSamplesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          xSamples_ = mutableCopy(xSamples_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * A list of samples for the X-channel
       * </pre>
       *
       * <code>repeated double x_samples = 4;</code>
       * @return A list containing the xSamples.
       */
      public java.util.List<java.lang.Double>
          getXSamplesList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(xSamples_) : xSamples_;
      }
      /**
       * <pre>
       * A list of samples for the X-channel
       * </pre>
       *
       * <code>repeated double x_samples = 4;</code>
       * @return The count of xSamples.
       */
      public int getXSamplesCount() {
        return xSamples_.size();
      }
      /**
       * <pre>
       * A list of samples for the X-channel
       * </pre>
       *
       * <code>repeated double x_samples = 4;</code>
       * @param index The index of the element to return.
       * @return The xSamples at the given index.
       */
      public double getXSamples(int index) {
        return xSamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of samples for the X-channel
       * </pre>
       *
       * <code>repeated double x_samples = 4;</code>
       * @param index The index to set the value at.
       * @param value The xSamples to set.
       * @return This builder for chaining.
       */
      public Builder setXSamples(
          int index, double value) {
        ensureXSamplesIsMutable();
        xSamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the X-channel
       * </pre>
       *
       * <code>repeated double x_samples = 4;</code>
       * @param value The xSamples to add.
       * @return This builder for chaining.
       */
      public Builder addXSamples(double value) {
        ensureXSamplesIsMutable();
        xSamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the X-channel
       * </pre>
       *
       * <code>repeated double x_samples = 4;</code>
       * @param values The xSamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllXSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureXSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, xSamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the X-channel
       * </pre>
       *
       * <code>repeated double x_samples = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearXSamples() {
        xSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList ySamples_ = emptyDoubleList();
      private void ensureYSamplesIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          ySamples_ = mutableCopy(ySamples_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * A list of samples for the Y-channel
       * </pre>
       *
       * <code>repeated double y_samples = 5;</code>
       * @return A list containing the ySamples.
       */
      public java.util.List<java.lang.Double>
          getYSamplesList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(ySamples_) : ySamples_;
      }
      /**
       * <pre>
       * A list of samples for the Y-channel
       * </pre>
       *
       * <code>repeated double y_samples = 5;</code>
       * @return The count of ySamples.
       */
      public int getYSamplesCount() {
        return ySamples_.size();
      }
      /**
       * <pre>
       * A list of samples for the Y-channel
       * </pre>
       *
       * <code>repeated double y_samples = 5;</code>
       * @param index The index of the element to return.
       * @return The ySamples at the given index.
       */
      public double getYSamples(int index) {
        return ySamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of samples for the Y-channel
       * </pre>
       *
       * <code>repeated double y_samples = 5;</code>
       * @param index The index to set the value at.
       * @param value The ySamples to set.
       * @return This builder for chaining.
       */
      public Builder setYSamples(
          int index, double value) {
        ensureYSamplesIsMutable();
        ySamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the Y-channel
       * </pre>
       *
       * <code>repeated double y_samples = 5;</code>
       * @param value The ySamples to add.
       * @return This builder for chaining.
       */
      public Builder addYSamples(double value) {
        ensureYSamplesIsMutable();
        ySamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the Y-channel
       * </pre>
       *
       * <code>repeated double y_samples = 5;</code>
       * @param values The ySamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllYSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureYSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ySamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the Y-channel
       * </pre>
       *
       * <code>repeated double y_samples = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearYSamples() {
        ySamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList zSamples_ = emptyDoubleList();
      private void ensureZSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          zSamples_ = mutableCopy(zSamples_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * A list of samples for the Z-channel
       * </pre>
       *
       * <code>repeated double z_samples = 6;</code>
       * @return A list containing the zSamples.
       */
      public java.util.List<java.lang.Double>
          getZSamplesList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(zSamples_) : zSamples_;
      }
      /**
       * <pre>
       * A list of samples for the Z-channel
       * </pre>
       *
       * <code>repeated double z_samples = 6;</code>
       * @return The count of zSamples.
       */
      public int getZSamplesCount() {
        return zSamples_.size();
      }
      /**
       * <pre>
       * A list of samples for the Z-channel
       * </pre>
       *
       * <code>repeated double z_samples = 6;</code>
       * @param index The index of the element to return.
       * @return The zSamples at the given index.
       */
      public double getZSamples(int index) {
        return zSamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of samples for the Z-channel
       * </pre>
       *
       * <code>repeated double z_samples = 6;</code>
       * @param index The index to set the value at.
       * @param value The zSamples to set.
       * @return This builder for chaining.
       */
      public Builder setZSamples(
          int index, double value) {
        ensureZSamplesIsMutable();
        zSamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the Z-channel
       * </pre>
       *
       * <code>repeated double z_samples = 6;</code>
       * @param value The zSamples to add.
       * @return This builder for chaining.
       */
      public Builder addZSamples(double value) {
        ensureZSamplesIsMutable();
        zSamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the Z-channel
       * </pre>
       *
       * <code>repeated double z_samples = 6;</code>
       * @param values The zSamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllZSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureZSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, zSamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of samples for the Z-channel
       * </pre>
       *
       * <code>repeated double z_samples = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearZSamples() {
        zSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> sampleRateStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       * @return Whether the sampleRateStatistics field is set.
       */
      public boolean hasSampleRateStatistics() {
        return sampleRateStatisticsBuilder_ != null || sampleRateStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       * @return The sampleRateStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        } else {
          return sampleRateStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       */
      public Builder setSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sampleRateStatistics_ = value;
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       */
      public Builder setSampleRateStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = builderForValue.build();
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       */
      public Builder mergeSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (sampleRateStatistics_ != null) {
            sampleRateStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(sampleRateStatistics_).mergeFrom(value).buildPartial();
          } else {
            sampleRateStatistics_ = value;
          }
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       */
      public Builder clearSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
          onChanged();
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getSampleRateStatisticsBuilder() {
        
        onChanged();
        return getSampleRateStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
        if (sampleRateStatisticsBuilder_ != null) {
          return sampleRateStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return sampleRateStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getSampleRateStatisticsFieldBuilder() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getSampleRateStatistics(),
                  getParentForChildren(),
                  isClean());
          sampleRateStatistics_ = null;
        }
        return sampleRateStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics xSampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> xSampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       * @return Whether the xSampleStatistics field is set.
       */
      public boolean hasXSampleStatistics() {
        return xSampleStatisticsBuilder_ != null || xSampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       * @return The xSampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getXSampleStatistics() {
        if (xSampleStatisticsBuilder_ == null) {
          return xSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : xSampleStatistics_;
        } else {
          return xSampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       */
      public Builder setXSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (xSampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          xSampleStatistics_ = value;
          onChanged();
        } else {
          xSampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       */
      public Builder setXSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (xSampleStatisticsBuilder_ == null) {
          xSampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          xSampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       */
      public Builder mergeXSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (xSampleStatisticsBuilder_ == null) {
          if (xSampleStatistics_ != null) {
            xSampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(xSampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            xSampleStatistics_ = value;
          }
          onChanged();
        } else {
          xSampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       */
      public Builder clearXSampleStatistics() {
        if (xSampleStatisticsBuilder_ == null) {
          xSampleStatistics_ = null;
          onChanged();
        } else {
          xSampleStatistics_ = null;
          xSampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getXSampleStatisticsBuilder() {
        
        onChanged();
        return getXSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getXSampleStatisticsOrBuilder() {
        if (xSampleStatisticsBuilder_ != null) {
          return xSampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return xSampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : xSampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for X-channel
       * </pre>
       *
       * <code>.SummaryStatistics x_sample_statistics = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getXSampleStatisticsFieldBuilder() {
        if (xSampleStatisticsBuilder_ == null) {
          xSampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getXSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          xSampleStatistics_ = null;
        }
        return xSampleStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics ySampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> ySampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       * @return Whether the ySampleStatistics field is set.
       */
      public boolean hasYSampleStatistics() {
        return ySampleStatisticsBuilder_ != null || ySampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       * @return The ySampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getYSampleStatistics() {
        if (ySampleStatisticsBuilder_ == null) {
          return ySampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : ySampleStatistics_;
        } else {
          return ySampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       */
      public Builder setYSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (ySampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ySampleStatistics_ = value;
          onChanged();
        } else {
          ySampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       */
      public Builder setYSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (ySampleStatisticsBuilder_ == null) {
          ySampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          ySampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       */
      public Builder mergeYSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (ySampleStatisticsBuilder_ == null) {
          if (ySampleStatistics_ != null) {
            ySampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(ySampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            ySampleStatistics_ = value;
          }
          onChanged();
        } else {
          ySampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       */
      public Builder clearYSampleStatistics() {
        if (ySampleStatisticsBuilder_ == null) {
          ySampleStatistics_ = null;
          onChanged();
        } else {
          ySampleStatistics_ = null;
          ySampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getYSampleStatisticsBuilder() {
        
        onChanged();
        return getYSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getYSampleStatisticsOrBuilder() {
        if (ySampleStatisticsBuilder_ != null) {
          return ySampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return ySampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : ySampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for Y-channel
       * </pre>
       *
       * <code>.SummaryStatistics y_sample_statistics = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getYSampleStatisticsFieldBuilder() {
        if (ySampleStatisticsBuilder_ == null) {
          ySampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getYSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          ySampleStatistics_ = null;
        }
        return ySampleStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics zSampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> zSampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       * @return Whether the zSampleStatistics field is set.
       */
      public boolean hasZSampleStatistics() {
        return zSampleStatisticsBuilder_ != null || zSampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       * @return The zSampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getZSampleStatistics() {
        if (zSampleStatisticsBuilder_ == null) {
          return zSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : zSampleStatistics_;
        } else {
          return zSampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       */
      public Builder setZSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (zSampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          zSampleStatistics_ = value;
          onChanged();
        } else {
          zSampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       */
      public Builder setZSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (zSampleStatisticsBuilder_ == null) {
          zSampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          zSampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       */
      public Builder mergeZSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (zSampleStatisticsBuilder_ == null) {
          if (zSampleStatistics_ != null) {
            zSampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(zSampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            zSampleStatistics_ = value;
          }
          onChanged();
        } else {
          zSampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       */
      public Builder clearZSampleStatistics() {
        if (zSampleStatisticsBuilder_ == null) {
          zSampleStatistics_ = null;
          onChanged();
        } else {
          zSampleStatistics_ = null;
          zSampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getZSampleStatisticsBuilder() {
        
        onChanged();
        return getZSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getZSampleStatisticsOrBuilder() {
        if (zSampleStatisticsBuilder_ != null) {
          return zSampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return zSampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : zSampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for Z-channel
       * </pre>
       *
       * <code>.SummaryStatistics z_sample_statistics = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getZSampleStatisticsFieldBuilder() {
        if (zSampleStatisticsBuilder_ == null) {
          zSampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getZSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          zSampleStatistics_ = null;
        }
        return zSampleStatisticsBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> metadata_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMetadata() {
        if (metadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        return metadata_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableMetadata() {
        onChanged();;
        if (metadata_ == null) {
          metadata_ = com.google.protobuf.MapField.newMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        if (!metadata_.isMutable()) {
          metadata_ = metadata_.copy();
        }
        return metadata_;
      }

      public int getMetadataCount() {
        return internalGetMetadata().getMap().size();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 11;</code>
       */

      public boolean containsMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMetadataMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return getMetadataMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 11;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
        return internalGetMetadata().getMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 11;</code>
       */

      public java.lang.String getMetadataOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 11;</code>
       */

      public java.lang.String getMetadataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMetadata() {
        internalGetMutableMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 11;</code>
       */

      public Builder removeMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableMetadata() {
        return internalGetMutableMetadata().getMutableMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 11;</code>
       */
      public Builder putMetadata(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 11;</code>
       */

      public Builder putAllMetadata(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableMetadata().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:XyzChannel)
    }

    // @@protoc_insertion_point(class_scope:XyzChannel)
    private static final RedvoxApi1000.XyzChannel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RedvoxApi1000.XyzChannel();
    }

    public static RedvoxApi1000.XyzChannel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<XyzChannel>
        PARSER = new com.google.protobuf.AbstractParser<XyzChannel>() {
      @java.lang.Override
      public XyzChannel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new XyzChannel(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<XyzChannel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<XyzChannel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public RedvoxApi1000.XyzChannel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LocationChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:LocationChannel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    java.lang.String getSensorDescription();
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    com.google.protobuf.ByteString
        getSensorDescriptionBytes();

    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    double getMeanSampleRateHz();

    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    java.util.List<java.lang.Double> getSampleTsUsList();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    int getSampleTsUsCount();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    double getSampleTsUs(int index);

    /**
     * <pre>
     * A list of latitude samples
     * </pre>
     *
     * <code>repeated double latitude_samples = 4;</code>
     * @return A list containing the latitudeSamples.
     */
    java.util.List<java.lang.Double> getLatitudeSamplesList();
    /**
     * <pre>
     * A list of latitude samples
     * </pre>
     *
     * <code>repeated double latitude_samples = 4;</code>
     * @return The count of latitudeSamples.
     */
    int getLatitudeSamplesCount();
    /**
     * <pre>
     * A list of latitude samples
     * </pre>
     *
     * <code>repeated double latitude_samples = 4;</code>
     * @param index The index of the element to return.
     * @return The latitudeSamples at the given index.
     */
    double getLatitudeSamples(int index);

    /**
     * <pre>
     * A list of longitude samples
     * </pre>
     *
     * <code>repeated double longitude_samples = 5;</code>
     * @return A list containing the longitudeSamples.
     */
    java.util.List<java.lang.Double> getLongitudeSamplesList();
    /**
     * <pre>
     * A list of longitude samples
     * </pre>
     *
     * <code>repeated double longitude_samples = 5;</code>
     * @return The count of longitudeSamples.
     */
    int getLongitudeSamplesCount();
    /**
     * <pre>
     * A list of longitude samples
     * </pre>
     *
     * <code>repeated double longitude_samples = 5;</code>
     * @param index The index of the element to return.
     * @return The longitudeSamples at the given index.
     */
    double getLongitudeSamples(int index);

    /**
     * <pre>
     * A list of altitude samples
     * </pre>
     *
     * <code>repeated double altitude_samples = 6;</code>
     * @return A list containing the altitudeSamples.
     */
    java.util.List<java.lang.Double> getAltitudeSamplesList();
    /**
     * <pre>
     * A list of altitude samples
     * </pre>
     *
     * <code>repeated double altitude_samples = 6;</code>
     * @return The count of altitudeSamples.
     */
    int getAltitudeSamplesCount();
    /**
     * <pre>
     * A list of altitude samples
     * </pre>
     *
     * <code>repeated double altitude_samples = 6;</code>
     * @param index The index of the element to return.
     * @return The altitudeSamples at the given index.
     */
    double getAltitudeSamples(int index);

    /**
     * <pre>
     * A list of speed samples
     * </pre>
     *
     * <code>repeated double speed_samples = 7;</code>
     * @return A list containing the speedSamples.
     */
    java.util.List<java.lang.Double> getSpeedSamplesList();
    /**
     * <pre>
     * A list of speed samples
     * </pre>
     *
     * <code>repeated double speed_samples = 7;</code>
     * @return The count of speedSamples.
     */
    int getSpeedSamplesCount();
    /**
     * <pre>
     * A list of speed samples
     * </pre>
     *
     * <code>repeated double speed_samples = 7;</code>
     * @param index The index of the element to return.
     * @return The speedSamples at the given index.
     */
    double getSpeedSamples(int index);

    /**
     * <pre>
     * A list of accuracy samples
     * </pre>
     *
     * <code>repeated double accuracy_samples = 8;</code>
     * @return A list containing the accuracySamples.
     */
    java.util.List<java.lang.Double> getAccuracySamplesList();
    /**
     * <pre>
     * A list of accuracy samples
     * </pre>
     *
     * <code>repeated double accuracy_samples = 8;</code>
     * @return The count of accuracySamples.
     */
    int getAccuracySamplesCount();
    /**
     * <pre>
     * A list of accuracy samples
     * </pre>
     *
     * <code>repeated double accuracy_samples = 8;</code>
     * @param index The index of the element to return.
     * @return The accuracySamples at the given index.
     */
    double getAccuracySamples(int index);

    /**
     * <pre>
     * Have location permissions been granted by the user?
     * </pre>
     *
     * <code>bool location_permissions_granted = 9;</code>
     * @return The locationPermissionsGranted.
     */
    boolean getLocationPermissionsGranted();

    /**
     * <pre>
     * Has location services been requested by the user?
     * </pre>
     *
     * <code>bool location_services_requested = 10;</code>
     * @return The locationServicesRequested.
     */
    boolean getLocationServicesRequested();

    /**
     * <pre>
     * Are location services enabled and working?
     * </pre>
     *
     * <code>bool location_services_enabled = 11;</code>
     * @return The locationServicesEnabled.
     */
    boolean getLocationServicesEnabled();

    /**
     * <pre>
     * Location provider enumeration
     * </pre>
     *
     * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
     * @return The enum numeric value on the wire for locationProvider.
     */
    int getLocationProviderValue();
    /**
     * <pre>
     * Location provider enumeration
     * </pre>
     *
     * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
     * @return The locationProvider.
     */
    RedvoxApi1000.LocationChannel.LocationProvider getLocationProvider();

    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    boolean hasSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
     * @return The sampleRateStatistics.
     */
    RedvoxApi1000.SummaryStatistics getSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for latitude samples
     * </pre>
     *
     * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
     * @return Whether the latitudeSampleStatistics field is set.
     */
    boolean hasLatitudeSampleStatistics();
    /**
     * <pre>
     * Statistics for latitude samples
     * </pre>
     *
     * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
     * @return The latitudeSampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getLatitudeSampleStatistics();
    /**
     * <pre>
     * Statistics for latitude samples
     * </pre>
     *
     * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getLatitudeSampleStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for longitude samples
     * </pre>
     *
     * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
     * @return Whether the longitudeSampleStatistics field is set.
     */
    boolean hasLongitudeSampleStatistics();
    /**
     * <pre>
     * Statistics for longitude samples
     * </pre>
     *
     * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
     * @return The longitudeSampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getLongitudeSampleStatistics();
    /**
     * <pre>
     * Statistics for longitude samples
     * </pre>
     *
     * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getLongitudeSampleStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for altitude samples
     * </pre>
     *
     * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
     * @return Whether the altitudeSampleStatistics field is set.
     */
    boolean hasAltitudeSampleStatistics();
    /**
     * <pre>
     * Statistics for altitude samples
     * </pre>
     *
     * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
     * @return The altitudeSampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getAltitudeSampleStatistics();
    /**
     * <pre>
     * Statistics for altitude samples
     * </pre>
     *
     * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getAltitudeSampleStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for speed samples
     * </pre>
     *
     * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
     * @return Whether the speedSampleStatistics field is set.
     */
    boolean hasSpeedSampleStatistics();
    /**
     * <pre>
     * Statistics for speed samples
     * </pre>
     *
     * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
     * @return The speedSampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getSpeedSampleStatistics();
    /**
     * <pre>
     * Statistics for speed samples
     * </pre>
     *
     * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getSpeedSampleStatisticsOrBuilder();

    /**
     * <pre>
     * Statistics for accuracy samples
     * </pre>
     *
     * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
     * @return Whether the accuracySampleStatistics field is set.
     */
    boolean hasAccuracySampleStatistics();
    /**
     * <pre>
     * Statistics for accuracy samples
     * </pre>
     *
     * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
     * @return The accuracySampleStatistics.
     */
    RedvoxApi1000.SummaryStatistics getAccuracySampleStatistics();
    /**
     * <pre>
     * Statistics for accuracy samples
     * </pre>
     *
     * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getAccuracySampleStatisticsOrBuilder();

    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */
    int getMetadataCount();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */
    boolean containsMetadata(
        java.lang.String key);
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMetadata();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMetadataMap();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */

    java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */

    java.lang.String getMetadataOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Message type for the location channel
   * </pre>
   *
   * Protobuf type {@code LocationChannel}
   */
  public  static final class LocationChannel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:LocationChannel)
      LocationChannelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LocationChannel.newBuilder() to construct.
    private LocationChannel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LocationChannel() {
      sensorDescription_ = "";
      sampleTsUs_ = emptyDoubleList();
      latitudeSamples_ = emptyDoubleList();
      longitudeSamples_ = emptyDoubleList();
      altitudeSamples_ = emptyDoubleList();
      speedSamples_ = emptyDoubleList();
      accuracySamples_ = emptyDoubleList();
      locationProvider_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LocationChannel();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LocationChannel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              sensorDescription_ = s;
              break;
            }
            case 17: {

              meanSampleRateHz_ = input.readDouble();
              break;
            }
            case 25: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              sampleTsUs_.addDouble(input.readDouble());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                sampleTsUs_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 33: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                latitudeSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000002;
              }
              latitudeSamples_.addDouble(input.readDouble());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                latitudeSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                latitudeSamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 41: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                longitudeSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              longitudeSamples_.addDouble(input.readDouble());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                longitudeSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                longitudeSamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                altitudeSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000008;
              }
              altitudeSamples_.addDouble(input.readDouble());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
                altitudeSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                altitudeSamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 57: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                speedSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000010;
              }
              speedSamples_.addDouble(input.readDouble());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) != 0) && input.getBytesUntilLimit() > 0) {
                speedSamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                speedSamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 65: {
              if (!((mutable_bitField0_ & 0x00000020) != 0)) {
                accuracySamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000020;
              }
              accuracySamples_.addDouble(input.readDouble());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) != 0) && input.getBytesUntilLimit() > 0) {
                accuracySamples_ = newDoubleList();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                accuracySamples_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {

              locationPermissionsGranted_ = input.readBool();
              break;
            }
            case 80: {

              locationServicesRequested_ = input.readBool();
              break;
            }
            case 88: {

              locationServicesEnabled_ = input.readBool();
              break;
            }
            case 96: {
              int rawValue = input.readEnum();

              locationProvider_ = rawValue;
              break;
            }
            case 106: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (sampleRateStatistics_ != null) {
                subBuilder = sampleRateStatistics_.toBuilder();
              }
              sampleRateStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sampleRateStatistics_);
                sampleRateStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 114: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (latitudeSampleStatistics_ != null) {
                subBuilder = latitudeSampleStatistics_.toBuilder();
              }
              latitudeSampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(latitudeSampleStatistics_);
                latitudeSampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 122: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (longitudeSampleStatistics_ != null) {
                subBuilder = longitudeSampleStatistics_.toBuilder();
              }
              longitudeSampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(longitudeSampleStatistics_);
                longitudeSampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 130: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (altitudeSampleStatistics_ != null) {
                subBuilder = altitudeSampleStatistics_.toBuilder();
              }
              altitudeSampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(altitudeSampleStatistics_);
                altitudeSampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 138: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (speedSampleStatistics_ != null) {
                subBuilder = speedSampleStatistics_.toBuilder();
              }
              speedSampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speedSampleStatistics_);
                speedSampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 146: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (accuracySampleStatistics_ != null) {
                subBuilder = accuracySampleStatistics_.toBuilder();
              }
              accuracySampleStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(accuracySampleStatistics_);
                accuracySampleStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00000040) != 0)) {
                metadata_ = com.google.protobuf.MapField.newMapField(
                    MetadataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000040;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              metadata_.getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          latitudeSamples_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          longitudeSamples_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          altitudeSamples_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000010) != 0)) {
          speedSamples_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000020) != 0)) {
          accuracySamples_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RedvoxApi1000.internal_static_LocationChannel_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 19:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RedvoxApi1000.internal_static_LocationChannel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RedvoxApi1000.LocationChannel.class, RedvoxApi1000.LocationChannel.Builder.class);
    }

    /**
     * Protobuf enum {@code LocationChannel.LocationProvider}
     */
    public enum LocationProvider
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0),
      /**
       * <code>USER = 1;</code>
       */
      USER(1),
      /**
       * <code>GPS = 2;</code>
       */
      GPS(2),
      /**
       * <code>NETWORK = 3;</code>
       */
      NETWORK(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>USER = 1;</code>
       */
      public static final int USER_VALUE = 1;
      /**
       * <code>GPS = 2;</code>
       */
      public static final int GPS_VALUE = 2;
      /**
       * <code>NETWORK = 3;</code>
       */
      public static final int NETWORK_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LocationProvider valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LocationProvider forNumber(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return USER;
          case 2: return GPS;
          case 3: return NETWORK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LocationProvider>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LocationProvider> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocationProvider>() {
              public LocationProvider findValueByNumber(int number) {
                return LocationProvider.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return RedvoxApi1000.LocationChannel.getDescriptor().getEnumTypes().get(0);
      }

      private static final LocationProvider[] VALUES = values();

      public static LocationProvider valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LocationProvider(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:LocationChannel.LocationProvider)
    }

    public static final int SENSOR_DESCRIPTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object sensorDescription_;
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    public java.lang.String getSensorDescription() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sensorDescription_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    public com.google.protobuf.ByteString
        getSensorDescriptionBytes() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sensorDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER = 2;
    private double meanSampleRateHz_;
    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    public double getMeanSampleRateHz() {
      return meanSampleRateHz_;
    }

    public static final int SAMPLE_TS_US_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.DoubleList sampleTsUs_;
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    public java.util.List<java.lang.Double>
        getSampleTsUsList() {
      return sampleTsUs_;
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    public int getSampleTsUsCount() {
      return sampleTsUs_.size();
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    public double getSampleTsUs(int index) {
      return sampleTsUs_.getDouble(index);
    }
    private int sampleTsUsMemoizedSerializedSize = -1;

    public static final int LATITUDE_SAMPLES_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.DoubleList latitudeSamples_;
    /**
     * <pre>
     * A list of latitude samples
     * </pre>
     *
     * <code>repeated double latitude_samples = 4;</code>
     * @return A list containing the latitudeSamples.
     */
    public java.util.List<java.lang.Double>
        getLatitudeSamplesList() {
      return latitudeSamples_;
    }
    /**
     * <pre>
     * A list of latitude samples
     * </pre>
     *
     * <code>repeated double latitude_samples = 4;</code>
     * @return The count of latitudeSamples.
     */
    public int getLatitudeSamplesCount() {
      return latitudeSamples_.size();
    }
    /**
     * <pre>
     * A list of latitude samples
     * </pre>
     *
     * <code>repeated double latitude_samples = 4;</code>
     * @param index The index of the element to return.
     * @return The latitudeSamples at the given index.
     */
    public double getLatitudeSamples(int index) {
      return latitudeSamples_.getDouble(index);
    }
    private int latitudeSamplesMemoizedSerializedSize = -1;

    public static final int LONGITUDE_SAMPLES_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.DoubleList longitudeSamples_;
    /**
     * <pre>
     * A list of longitude samples
     * </pre>
     *
     * <code>repeated double longitude_samples = 5;</code>
     * @return A list containing the longitudeSamples.
     */
    public java.util.List<java.lang.Double>
        getLongitudeSamplesList() {
      return longitudeSamples_;
    }
    /**
     * <pre>
     * A list of longitude samples
     * </pre>
     *
     * <code>repeated double longitude_samples = 5;</code>
     * @return The count of longitudeSamples.
     */
    public int getLongitudeSamplesCount() {
      return longitudeSamples_.size();
    }
    /**
     * <pre>
     * A list of longitude samples
     * </pre>
     *
     * <code>repeated double longitude_samples = 5;</code>
     * @param index The index of the element to return.
     * @return The longitudeSamples at the given index.
     */
    public double getLongitudeSamples(int index) {
      return longitudeSamples_.getDouble(index);
    }
    private int longitudeSamplesMemoizedSerializedSize = -1;

    public static final int ALTITUDE_SAMPLES_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.DoubleList altitudeSamples_;
    /**
     * <pre>
     * A list of altitude samples
     * </pre>
     *
     * <code>repeated double altitude_samples = 6;</code>
     * @return A list containing the altitudeSamples.
     */
    public java.util.List<java.lang.Double>
        getAltitudeSamplesList() {
      return altitudeSamples_;
    }
    /**
     * <pre>
     * A list of altitude samples
     * </pre>
     *
     * <code>repeated double altitude_samples = 6;</code>
     * @return The count of altitudeSamples.
     */
    public int getAltitudeSamplesCount() {
      return altitudeSamples_.size();
    }
    /**
     * <pre>
     * A list of altitude samples
     * </pre>
     *
     * <code>repeated double altitude_samples = 6;</code>
     * @param index The index of the element to return.
     * @return The altitudeSamples at the given index.
     */
    public double getAltitudeSamples(int index) {
      return altitudeSamples_.getDouble(index);
    }
    private int altitudeSamplesMemoizedSerializedSize = -1;

    public static final int SPEED_SAMPLES_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.DoubleList speedSamples_;
    /**
     * <pre>
     * A list of speed samples
     * </pre>
     *
     * <code>repeated double speed_samples = 7;</code>
     * @return A list containing the speedSamples.
     */
    public java.util.List<java.lang.Double>
        getSpeedSamplesList() {
      return speedSamples_;
    }
    /**
     * <pre>
     * A list of speed samples
     * </pre>
     *
     * <code>repeated double speed_samples = 7;</code>
     * @return The count of speedSamples.
     */
    public int getSpeedSamplesCount() {
      return speedSamples_.size();
    }
    /**
     * <pre>
     * A list of speed samples
     * </pre>
     *
     * <code>repeated double speed_samples = 7;</code>
     * @param index The index of the element to return.
     * @return The speedSamples at the given index.
     */
    public double getSpeedSamples(int index) {
      return speedSamples_.getDouble(index);
    }
    private int speedSamplesMemoizedSerializedSize = -1;

    public static final int ACCURACY_SAMPLES_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.DoubleList accuracySamples_;
    /**
     * <pre>
     * A list of accuracy samples
     * </pre>
     *
     * <code>repeated double accuracy_samples = 8;</code>
     * @return A list containing the accuracySamples.
     */
    public java.util.List<java.lang.Double>
        getAccuracySamplesList() {
      return accuracySamples_;
    }
    /**
     * <pre>
     * A list of accuracy samples
     * </pre>
     *
     * <code>repeated double accuracy_samples = 8;</code>
     * @return The count of accuracySamples.
     */
    public int getAccuracySamplesCount() {
      return accuracySamples_.size();
    }
    /**
     * <pre>
     * A list of accuracy samples
     * </pre>
     *
     * <code>repeated double accuracy_samples = 8;</code>
     * @param index The index of the element to return.
     * @return The accuracySamples at the given index.
     */
    public double getAccuracySamples(int index) {
      return accuracySamples_.getDouble(index);
    }
    private int accuracySamplesMemoizedSerializedSize = -1;

    public static final int LOCATION_PERMISSIONS_GRANTED_FIELD_NUMBER = 9;
    private boolean locationPermissionsGranted_;
    /**
     * <pre>
     * Have location permissions been granted by the user?
     * </pre>
     *
     * <code>bool location_permissions_granted = 9;</code>
     * @return The locationPermissionsGranted.
     */
    public boolean getLocationPermissionsGranted() {
      return locationPermissionsGranted_;
    }

    public static final int LOCATION_SERVICES_REQUESTED_FIELD_NUMBER = 10;
    private boolean locationServicesRequested_;
    /**
     * <pre>
     * Has location services been requested by the user?
     * </pre>
     *
     * <code>bool location_services_requested = 10;</code>
     * @return The locationServicesRequested.
     */
    public boolean getLocationServicesRequested() {
      return locationServicesRequested_;
    }

    public static final int LOCATION_SERVICES_ENABLED_FIELD_NUMBER = 11;
    private boolean locationServicesEnabled_;
    /**
     * <pre>
     * Are location services enabled and working?
     * </pre>
     *
     * <code>bool location_services_enabled = 11;</code>
     * @return The locationServicesEnabled.
     */
    public boolean getLocationServicesEnabled() {
      return locationServicesEnabled_;
    }

    public static final int LOCATION_PROVIDER_FIELD_NUMBER = 12;
    private int locationProvider_;
    /**
     * <pre>
     * Location provider enumeration
     * </pre>
     *
     * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
     * @return The enum numeric value on the wire for locationProvider.
     */
    public int getLocationProviderValue() {
      return locationProvider_;
    }
    /**
     * <pre>
     * Location provider enumeration
     * </pre>
     *
     * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
     * @return The locationProvider.
     */
    public RedvoxApi1000.LocationChannel.LocationProvider getLocationProvider() {
      @SuppressWarnings("deprecation")
      RedvoxApi1000.LocationChannel.LocationProvider result = RedvoxApi1000.LocationChannel.LocationProvider.valueOf(locationProvider_);
      return result == null ? RedvoxApi1000.LocationChannel.LocationProvider.UNRECOGNIZED : result;
    }

    public static final int SAMPLE_RATE_STATISTICS_FIELD_NUMBER = 13;
    private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    public boolean hasSampleRateStatistics() {
      return sampleRateStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
     * @return The sampleRateStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
      return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
      return getSampleRateStatistics();
    }

    public static final int LATITUDE_SAMPLE_STATISTICS_FIELD_NUMBER = 14;
    private RedvoxApi1000.SummaryStatistics latitudeSampleStatistics_;
    /**
     * <pre>
     * Statistics for latitude samples
     * </pre>
     *
     * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
     * @return Whether the latitudeSampleStatistics field is set.
     */
    public boolean hasLatitudeSampleStatistics() {
      return latitudeSampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for latitude samples
     * </pre>
     *
     * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
     * @return The latitudeSampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getLatitudeSampleStatistics() {
      return latitudeSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : latitudeSampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for latitude samples
     * </pre>
     *
     * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getLatitudeSampleStatisticsOrBuilder() {
      return getLatitudeSampleStatistics();
    }

    public static final int LONGITUDE_SAMPLE_STATISTICS_FIELD_NUMBER = 15;
    private RedvoxApi1000.SummaryStatistics longitudeSampleStatistics_;
    /**
     * <pre>
     * Statistics for longitude samples
     * </pre>
     *
     * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
     * @return Whether the longitudeSampleStatistics field is set.
     */
    public boolean hasLongitudeSampleStatistics() {
      return longitudeSampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for longitude samples
     * </pre>
     *
     * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
     * @return The longitudeSampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getLongitudeSampleStatistics() {
      return longitudeSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : longitudeSampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for longitude samples
     * </pre>
     *
     * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getLongitudeSampleStatisticsOrBuilder() {
      return getLongitudeSampleStatistics();
    }

    public static final int ALTITUDE_SAMPLE_STATISTICS_FIELD_NUMBER = 16;
    private RedvoxApi1000.SummaryStatistics altitudeSampleStatistics_;
    /**
     * <pre>
     * Statistics for altitude samples
     * </pre>
     *
     * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
     * @return Whether the altitudeSampleStatistics field is set.
     */
    public boolean hasAltitudeSampleStatistics() {
      return altitudeSampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for altitude samples
     * </pre>
     *
     * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
     * @return The altitudeSampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getAltitudeSampleStatistics() {
      return altitudeSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : altitudeSampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for altitude samples
     * </pre>
     *
     * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getAltitudeSampleStatisticsOrBuilder() {
      return getAltitudeSampleStatistics();
    }

    public static final int SPEED_SAMPLE_STATISTICS_FIELD_NUMBER = 17;
    private RedvoxApi1000.SummaryStatistics speedSampleStatistics_;
    /**
     * <pre>
     * Statistics for speed samples
     * </pre>
     *
     * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
     * @return Whether the speedSampleStatistics field is set.
     */
    public boolean hasSpeedSampleStatistics() {
      return speedSampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for speed samples
     * </pre>
     *
     * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
     * @return The speedSampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getSpeedSampleStatistics() {
      return speedSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : speedSampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for speed samples
     * </pre>
     *
     * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getSpeedSampleStatisticsOrBuilder() {
      return getSpeedSampleStatistics();
    }

    public static final int ACCURACY_SAMPLE_STATISTICS_FIELD_NUMBER = 18;
    private RedvoxApi1000.SummaryStatistics accuracySampleStatistics_;
    /**
     * <pre>
     * Statistics for accuracy samples
     * </pre>
     *
     * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
     * @return Whether the accuracySampleStatistics field is set.
     */
    public boolean hasAccuracySampleStatistics() {
      return accuracySampleStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for accuracy samples
     * </pre>
     *
     * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
     * @return The accuracySampleStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getAccuracySampleStatistics() {
      return accuracySampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : accuracySampleStatistics_;
    }
    /**
     * <pre>
     * Statistics for accuracy samples
     * </pre>
     *
     * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getAccuracySampleStatisticsOrBuilder() {
      return getAccuracySampleStatistics();
    }

    public static final int METADATA_FIELD_NUMBER = 19;
    private static final class MetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  RedvoxApi1000.internal_static_LocationChannel_MetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }

    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 19;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!getSensorDescriptionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        output.writeDouble(2, meanSampleRateHz_);
      }
      if (getSampleTsUsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(sampleTsUsMemoizedSerializedSize);
      }
      for (int i = 0; i < sampleTsUs_.size(); i++) {
        output.writeDoubleNoTag(sampleTsUs_.getDouble(i));
      }
      if (getLatitudeSamplesList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(latitudeSamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < latitudeSamples_.size(); i++) {
        output.writeDoubleNoTag(latitudeSamples_.getDouble(i));
      }
      if (getLongitudeSamplesList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(longitudeSamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < longitudeSamples_.size(); i++) {
        output.writeDoubleNoTag(longitudeSamples_.getDouble(i));
      }
      if (getAltitudeSamplesList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(altitudeSamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < altitudeSamples_.size(); i++) {
        output.writeDoubleNoTag(altitudeSamples_.getDouble(i));
      }
      if (getSpeedSamplesList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(speedSamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < speedSamples_.size(); i++) {
        output.writeDoubleNoTag(speedSamples_.getDouble(i));
      }
      if (getAccuracySamplesList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(accuracySamplesMemoizedSerializedSize);
      }
      for (int i = 0; i < accuracySamples_.size(); i++) {
        output.writeDoubleNoTag(accuracySamples_.getDouble(i));
      }
      if (locationPermissionsGranted_ != false) {
        output.writeBool(9, locationPermissionsGranted_);
      }
      if (locationServicesRequested_ != false) {
        output.writeBool(10, locationServicesRequested_);
      }
      if (locationServicesEnabled_ != false) {
        output.writeBool(11, locationServicesEnabled_);
      }
      if (locationProvider_ != RedvoxApi1000.LocationChannel.LocationProvider.NONE.getNumber()) {
        output.writeEnum(12, locationProvider_);
      }
      if (sampleRateStatistics_ != null) {
        output.writeMessage(13, getSampleRateStatistics());
      }
      if (latitudeSampleStatistics_ != null) {
        output.writeMessage(14, getLatitudeSampleStatistics());
      }
      if (longitudeSampleStatistics_ != null) {
        output.writeMessage(15, getLongitudeSampleStatistics());
      }
      if (altitudeSampleStatistics_ != null) {
        output.writeMessage(16, getAltitudeSampleStatistics());
      }
      if (speedSampleStatistics_ != null) {
        output.writeMessage(17, getSpeedSampleStatistics());
      }
      if (accuracySampleStatistics_ != null) {
        output.writeMessage(18, getAccuracySampleStatistics());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMetadata(),
          MetadataDefaultEntryHolder.defaultEntry,
          19);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSensorDescriptionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, meanSampleRateHz_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSampleTsUsList().size();
        size += dataSize;
        if (!getSampleTsUsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        sampleTsUsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getLatitudeSamplesList().size();
        size += dataSize;
        if (!getLatitudeSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        latitudeSamplesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getLongitudeSamplesList().size();
        size += dataSize;
        if (!getLongitudeSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        longitudeSamplesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getAltitudeSamplesList().size();
        size += dataSize;
        if (!getAltitudeSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        altitudeSamplesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSpeedSamplesList().size();
        size += dataSize;
        if (!getSpeedSamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        speedSamplesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getAccuracySamplesList().size();
        size += dataSize;
        if (!getAccuracySamplesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        accuracySamplesMemoizedSerializedSize = dataSize;
      }
      if (locationPermissionsGranted_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, locationPermissionsGranted_);
      }
      if (locationServicesRequested_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, locationServicesRequested_);
      }
      if (locationServicesEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, locationServicesEnabled_);
      }
      if (locationProvider_ != RedvoxApi1000.LocationChannel.LocationProvider.NONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, locationProvider_);
      }
      if (sampleRateStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getSampleRateStatistics());
      }
      if (latitudeSampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getLatitudeSampleStatistics());
      }
      if (longitudeSampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getLongitudeSampleStatistics());
      }
      if (altitudeSampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getAltitudeSampleStatistics());
      }
      if (speedSampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getSpeedSampleStatistics());
      }
      if (accuracySampleStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, getAccuracySampleStatistics());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(19, metadata__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RedvoxApi1000.LocationChannel)) {
        return super.equals(obj);
      }
      RedvoxApi1000.LocationChannel other = (RedvoxApi1000.LocationChannel) obj;

      if (!getSensorDescription()
          .equals(other.getSensorDescription())) return false;
      if (java.lang.Double.doubleToLongBits(getMeanSampleRateHz())
          != java.lang.Double.doubleToLongBits(
              other.getMeanSampleRateHz())) return false;
      if (!getSampleTsUsList()
          .equals(other.getSampleTsUsList())) return false;
      if (!getLatitudeSamplesList()
          .equals(other.getLatitudeSamplesList())) return false;
      if (!getLongitudeSamplesList()
          .equals(other.getLongitudeSamplesList())) return false;
      if (!getAltitudeSamplesList()
          .equals(other.getAltitudeSamplesList())) return false;
      if (!getSpeedSamplesList()
          .equals(other.getSpeedSamplesList())) return false;
      if (!getAccuracySamplesList()
          .equals(other.getAccuracySamplesList())) return false;
      if (getLocationPermissionsGranted()
          != other.getLocationPermissionsGranted()) return false;
      if (getLocationServicesRequested()
          != other.getLocationServicesRequested()) return false;
      if (getLocationServicesEnabled()
          != other.getLocationServicesEnabled()) return false;
      if (locationProvider_ != other.locationProvider_) return false;
      if (hasSampleRateStatistics() != other.hasSampleRateStatistics()) return false;
      if (hasSampleRateStatistics()) {
        if (!getSampleRateStatistics()
            .equals(other.getSampleRateStatistics())) return false;
      }
      if (hasLatitudeSampleStatistics() != other.hasLatitudeSampleStatistics()) return false;
      if (hasLatitudeSampleStatistics()) {
        if (!getLatitudeSampleStatistics()
            .equals(other.getLatitudeSampleStatistics())) return false;
      }
      if (hasLongitudeSampleStatistics() != other.hasLongitudeSampleStatistics()) return false;
      if (hasLongitudeSampleStatistics()) {
        if (!getLongitudeSampleStatistics()
            .equals(other.getLongitudeSampleStatistics())) return false;
      }
      if (hasAltitudeSampleStatistics() != other.hasAltitudeSampleStatistics()) return false;
      if (hasAltitudeSampleStatistics()) {
        if (!getAltitudeSampleStatistics()
            .equals(other.getAltitudeSampleStatistics())) return false;
      }
      if (hasSpeedSampleStatistics() != other.hasSpeedSampleStatistics()) return false;
      if (hasSpeedSampleStatistics()) {
        if (!getSpeedSampleStatistics()
            .equals(other.getSpeedSampleStatistics())) return false;
      }
      if (hasAccuracySampleStatistics() != other.hasAccuracySampleStatistics()) return false;
      if (hasAccuracySampleStatistics()) {
        if (!getAccuracySampleStatistics()
            .equals(other.getAccuracySampleStatistics())) return false;
      }
      if (!internalGetMetadata().equals(
          other.internalGetMetadata())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SENSOR_DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getSensorDescription().hashCode();
      hash = (37 * hash) + MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMeanSampleRateHz()));
      if (getSampleTsUsCount() > 0) {
        hash = (37 * hash) + SAMPLE_TS_US_FIELD_NUMBER;
        hash = (53 * hash) + getSampleTsUsList().hashCode();
      }
      if (getLatitudeSamplesCount() > 0) {
        hash = (37 * hash) + LATITUDE_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getLatitudeSamplesList().hashCode();
      }
      if (getLongitudeSamplesCount() > 0) {
        hash = (37 * hash) + LONGITUDE_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getLongitudeSamplesList().hashCode();
      }
      if (getAltitudeSamplesCount() > 0) {
        hash = (37 * hash) + ALTITUDE_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getAltitudeSamplesList().hashCode();
      }
      if (getSpeedSamplesCount() > 0) {
        hash = (37 * hash) + SPEED_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getSpeedSamplesList().hashCode();
      }
      if (getAccuracySamplesCount() > 0) {
        hash = (37 * hash) + ACCURACY_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getAccuracySamplesList().hashCode();
      }
      hash = (37 * hash) + LOCATION_PERMISSIONS_GRANTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLocationPermissionsGranted());
      hash = (37 * hash) + LOCATION_SERVICES_REQUESTED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLocationServicesRequested());
      hash = (37 * hash) + LOCATION_SERVICES_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getLocationServicesEnabled());
      hash = (37 * hash) + LOCATION_PROVIDER_FIELD_NUMBER;
      hash = (53 * hash) + locationProvider_;
      if (hasSampleRateStatistics()) {
        hash = (37 * hash) + SAMPLE_RATE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getSampleRateStatistics().hashCode();
      }
      if (hasLatitudeSampleStatistics()) {
        hash = (37 * hash) + LATITUDE_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getLatitudeSampleStatistics().hashCode();
      }
      if (hasLongitudeSampleStatistics()) {
        hash = (37 * hash) + LONGITUDE_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getLongitudeSampleStatistics().hashCode();
      }
      if (hasAltitudeSampleStatistics()) {
        hash = (37 * hash) + ALTITUDE_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getAltitudeSampleStatistics().hashCode();
      }
      if (hasSpeedSampleStatistics()) {
        hash = (37 * hash) + SPEED_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getSpeedSampleStatistics().hashCode();
      }
      if (hasAccuracySampleStatistics()) {
        hash = (37 * hash) + ACCURACY_SAMPLE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getAccuracySampleStatistics().hashCode();
      }
      if (!internalGetMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMetadata().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RedvoxApi1000.LocationChannel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.LocationChannel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.LocationChannel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.LocationChannel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RedvoxApi1000.LocationChannel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message type for the location channel
     * </pre>
     *
     * Protobuf type {@code LocationChannel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:LocationChannel)
        RedvoxApi1000.LocationChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RedvoxApi1000.internal_static_LocationChannel_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 19:
            return internalGetMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 19:
            return internalGetMutableMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RedvoxApi1000.internal_static_LocationChannel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RedvoxApi1000.LocationChannel.class, RedvoxApi1000.LocationChannel.Builder.class);
      }

      // Construct using RedvoxApi1000.LocationChannel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        sensorDescription_ = "";

        meanSampleRateHz_ = 0D;

        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        latitudeSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        longitudeSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        altitudeSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000008);
        speedSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000010);
        accuracySamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        locationPermissionsGranted_ = false;

        locationServicesRequested_ = false;

        locationServicesEnabled_ = false;

        locationProvider_ = 0;

        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }
        if (latitudeSampleStatisticsBuilder_ == null) {
          latitudeSampleStatistics_ = null;
        } else {
          latitudeSampleStatistics_ = null;
          latitudeSampleStatisticsBuilder_ = null;
        }
        if (longitudeSampleStatisticsBuilder_ == null) {
          longitudeSampleStatistics_ = null;
        } else {
          longitudeSampleStatistics_ = null;
          longitudeSampleStatisticsBuilder_ = null;
        }
        if (altitudeSampleStatisticsBuilder_ == null) {
          altitudeSampleStatistics_ = null;
        } else {
          altitudeSampleStatistics_ = null;
          altitudeSampleStatisticsBuilder_ = null;
        }
        if (speedSampleStatisticsBuilder_ == null) {
          speedSampleStatistics_ = null;
        } else {
          speedSampleStatistics_ = null;
          speedSampleStatisticsBuilder_ = null;
        }
        if (accuracySampleStatisticsBuilder_ == null) {
          accuracySampleStatistics_ = null;
        } else {
          accuracySampleStatistics_ = null;
          accuracySampleStatisticsBuilder_ = null;
        }
        internalGetMutableMetadata().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RedvoxApi1000.internal_static_LocationChannel_descriptor;
      }

      @java.lang.Override
      public RedvoxApi1000.LocationChannel getDefaultInstanceForType() {
        return RedvoxApi1000.LocationChannel.getDefaultInstance();
      }

      @java.lang.Override
      public RedvoxApi1000.LocationChannel build() {
        RedvoxApi1000.LocationChannel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public RedvoxApi1000.LocationChannel buildPartial() {
        RedvoxApi1000.LocationChannel result = new RedvoxApi1000.LocationChannel(this);
        int from_bitField0_ = bitField0_;
        result.sensorDescription_ = sensorDescription_;
        result.meanSampleRateHz_ = meanSampleRateHz_;
        if (((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.sampleTsUs_ = sampleTsUs_;
        if (((bitField0_ & 0x00000002) != 0)) {
          latitudeSamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.latitudeSamples_ = latitudeSamples_;
        if (((bitField0_ & 0x00000004) != 0)) {
          longitudeSamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.longitudeSamples_ = longitudeSamples_;
        if (((bitField0_ & 0x00000008) != 0)) {
          altitudeSamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.altitudeSamples_ = altitudeSamples_;
        if (((bitField0_ & 0x00000010) != 0)) {
          speedSamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.speedSamples_ = speedSamples_;
        if (((bitField0_ & 0x00000020) != 0)) {
          accuracySamples_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.accuracySamples_ = accuracySamples_;
        result.locationPermissionsGranted_ = locationPermissionsGranted_;
        result.locationServicesRequested_ = locationServicesRequested_;
        result.locationServicesEnabled_ = locationServicesEnabled_;
        result.locationProvider_ = locationProvider_;
        if (sampleRateStatisticsBuilder_ == null) {
          result.sampleRateStatistics_ = sampleRateStatistics_;
        } else {
          result.sampleRateStatistics_ = sampleRateStatisticsBuilder_.build();
        }
        if (latitudeSampleStatisticsBuilder_ == null) {
          result.latitudeSampleStatistics_ = latitudeSampleStatistics_;
        } else {
          result.latitudeSampleStatistics_ = latitudeSampleStatisticsBuilder_.build();
        }
        if (longitudeSampleStatisticsBuilder_ == null) {
          result.longitudeSampleStatistics_ = longitudeSampleStatistics_;
        } else {
          result.longitudeSampleStatistics_ = longitudeSampleStatisticsBuilder_.build();
        }
        if (altitudeSampleStatisticsBuilder_ == null) {
          result.altitudeSampleStatistics_ = altitudeSampleStatistics_;
        } else {
          result.altitudeSampleStatistics_ = altitudeSampleStatisticsBuilder_.build();
        }
        if (speedSampleStatisticsBuilder_ == null) {
          result.speedSampleStatistics_ = speedSampleStatistics_;
        } else {
          result.speedSampleStatistics_ = speedSampleStatisticsBuilder_.build();
        }
        if (accuracySampleStatisticsBuilder_ == null) {
          result.accuracySampleStatistics_ = accuracySampleStatistics_;
        } else {
          result.accuracySampleStatistics_ = accuracySampleStatisticsBuilder_.build();
        }
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RedvoxApi1000.LocationChannel) {
          return mergeFrom((RedvoxApi1000.LocationChannel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RedvoxApi1000.LocationChannel other) {
        if (other == RedvoxApi1000.LocationChannel.getDefaultInstance()) return this;
        if (!other.getSensorDescription().isEmpty()) {
          sensorDescription_ = other.sensorDescription_;
          onChanged();
        }
        if (other.getMeanSampleRateHz() != 0D) {
          setMeanSampleRateHz(other.getMeanSampleRateHz());
        }
        if (!other.sampleTsUs_.isEmpty()) {
          if (sampleTsUs_.isEmpty()) {
            sampleTsUs_ = other.sampleTsUs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSampleTsUsIsMutable();
            sampleTsUs_.addAll(other.sampleTsUs_);
          }
          onChanged();
        }
        if (!other.latitudeSamples_.isEmpty()) {
          if (latitudeSamples_.isEmpty()) {
            latitudeSamples_ = other.latitudeSamples_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLatitudeSamplesIsMutable();
            latitudeSamples_.addAll(other.latitudeSamples_);
          }
          onChanged();
        }
        if (!other.longitudeSamples_.isEmpty()) {
          if (longitudeSamples_.isEmpty()) {
            longitudeSamples_ = other.longitudeSamples_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureLongitudeSamplesIsMutable();
            longitudeSamples_.addAll(other.longitudeSamples_);
          }
          onChanged();
        }
        if (!other.altitudeSamples_.isEmpty()) {
          if (altitudeSamples_.isEmpty()) {
            altitudeSamples_ = other.altitudeSamples_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAltitudeSamplesIsMutable();
            altitudeSamples_.addAll(other.altitudeSamples_);
          }
          onChanged();
        }
        if (!other.speedSamples_.isEmpty()) {
          if (speedSamples_.isEmpty()) {
            speedSamples_ = other.speedSamples_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureSpeedSamplesIsMutable();
            speedSamples_.addAll(other.speedSamples_);
          }
          onChanged();
        }
        if (!other.accuracySamples_.isEmpty()) {
          if (accuracySamples_.isEmpty()) {
            accuracySamples_ = other.accuracySamples_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureAccuracySamplesIsMutable();
            accuracySamples_.addAll(other.accuracySamples_);
          }
          onChanged();
        }
        if (other.getLocationPermissionsGranted() != false) {
          setLocationPermissionsGranted(other.getLocationPermissionsGranted());
        }
        if (other.getLocationServicesRequested() != false) {
          setLocationServicesRequested(other.getLocationServicesRequested());
        }
        if (other.getLocationServicesEnabled() != false) {
          setLocationServicesEnabled(other.getLocationServicesEnabled());
        }
        if (other.locationProvider_ != 0) {
          setLocationProviderValue(other.getLocationProviderValue());
        }
        if (other.hasSampleRateStatistics()) {
          mergeSampleRateStatistics(other.getSampleRateStatistics());
        }
        if (other.hasLatitudeSampleStatistics()) {
          mergeLatitudeSampleStatistics(other.getLatitudeSampleStatistics());
        }
        if (other.hasLongitudeSampleStatistics()) {
          mergeLongitudeSampleStatistics(other.getLongitudeSampleStatistics());
        }
        if (other.hasAltitudeSampleStatistics()) {
          mergeAltitudeSampleStatistics(other.getAltitudeSampleStatistics());
        }
        if (other.hasSpeedSampleStatistics()) {
          mergeSpeedSampleStatistics(other.getSpeedSampleStatistics());
        }
        if (other.hasAccuracySampleStatistics()) {
          mergeAccuracySampleStatistics(other.getAccuracySampleStatistics());
        }
        internalGetMutableMetadata().mergeFrom(
            other.internalGetMetadata());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RedvoxApi1000.LocationChannel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RedvoxApi1000.LocationChannel) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object sensorDescription_ = "";
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The sensorDescription.
       */
      public java.lang.String getSensorDescription() {
        java.lang.Object ref = sensorDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sensorDescription_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The bytes for sensorDescription.
       */
      public com.google.protobuf.ByteString
          getSensorDescriptionBytes() {
        java.lang.Object ref = sensorDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sensorDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sensorDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorDescription() {
        
        sensorDescription_ = getDefaultInstance().getSensorDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The bytes for sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sensorDescription_ = value;
        onChanged();
        return this;
      }

      private double meanSampleRateHz_ ;
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return The meanSampleRateHz.
       */
      public double getMeanSampleRateHz() {
        return meanSampleRateHz_;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @param value The meanSampleRateHz to set.
       * @return This builder for chaining.
       */
      public Builder setMeanSampleRateHz(double value) {
        
        meanSampleRateHz_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMeanSampleRateHz() {
        
        meanSampleRateHz_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList sampleTsUs_ = emptyDoubleList();
      private void ensureSampleTsUsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_ = mutableCopy(sampleTsUs_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return A list containing the sampleTsUs.
       */
      public java.util.List<java.lang.Double>
          getSampleTsUsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(sampleTsUs_) : sampleTsUs_;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return The count of sampleTsUs.
       */
      public int getSampleTsUsCount() {
        return sampleTsUs_.size();
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index of the element to return.
       * @return The sampleTsUs at the given index.
       */
      public double getSampleTsUs(int index) {
        return sampleTsUs_.getDouble(index);
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index to set the value at.
       * @param value The sampleTsUs to set.
       * @return This builder for chaining.
       */
      public Builder setSampleTsUs(
          int index, double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param value The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addSampleTsUs(double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param values The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addAllSampleTsUs(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSampleTsUsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sampleTsUs_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleTsUs() {
        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList latitudeSamples_ = emptyDoubleList();
      private void ensureLatitudeSamplesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          latitudeSamples_ = mutableCopy(latitudeSamples_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * A list of latitude samples
       * </pre>
       *
       * <code>repeated double latitude_samples = 4;</code>
       * @return A list containing the latitudeSamples.
       */
      public java.util.List<java.lang.Double>
          getLatitudeSamplesList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(latitudeSamples_) : latitudeSamples_;
      }
      /**
       * <pre>
       * A list of latitude samples
       * </pre>
       *
       * <code>repeated double latitude_samples = 4;</code>
       * @return The count of latitudeSamples.
       */
      public int getLatitudeSamplesCount() {
        return latitudeSamples_.size();
      }
      /**
       * <pre>
       * A list of latitude samples
       * </pre>
       *
       * <code>repeated double latitude_samples = 4;</code>
       * @param index The index of the element to return.
       * @return The latitudeSamples at the given index.
       */
      public double getLatitudeSamples(int index) {
        return latitudeSamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of latitude samples
       * </pre>
       *
       * <code>repeated double latitude_samples = 4;</code>
       * @param index The index to set the value at.
       * @param value The latitudeSamples to set.
       * @return This builder for chaining.
       */
      public Builder setLatitudeSamples(
          int index, double value) {
        ensureLatitudeSamplesIsMutable();
        latitudeSamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of latitude samples
       * </pre>
       *
       * <code>repeated double latitude_samples = 4;</code>
       * @param value The latitudeSamples to add.
       * @return This builder for chaining.
       */
      public Builder addLatitudeSamples(double value) {
        ensureLatitudeSamplesIsMutable();
        latitudeSamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of latitude samples
       * </pre>
       *
       * <code>repeated double latitude_samples = 4;</code>
       * @param values The latitudeSamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllLatitudeSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureLatitudeSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, latitudeSamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of latitude samples
       * </pre>
       *
       * <code>repeated double latitude_samples = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLatitudeSamples() {
        latitudeSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList longitudeSamples_ = emptyDoubleList();
      private void ensureLongitudeSamplesIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          longitudeSamples_ = mutableCopy(longitudeSamples_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * A list of longitude samples
       * </pre>
       *
       * <code>repeated double longitude_samples = 5;</code>
       * @return A list containing the longitudeSamples.
       */
      public java.util.List<java.lang.Double>
          getLongitudeSamplesList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(longitudeSamples_) : longitudeSamples_;
      }
      /**
       * <pre>
       * A list of longitude samples
       * </pre>
       *
       * <code>repeated double longitude_samples = 5;</code>
       * @return The count of longitudeSamples.
       */
      public int getLongitudeSamplesCount() {
        return longitudeSamples_.size();
      }
      /**
       * <pre>
       * A list of longitude samples
       * </pre>
       *
       * <code>repeated double longitude_samples = 5;</code>
       * @param index The index of the element to return.
       * @return The longitudeSamples at the given index.
       */
      public double getLongitudeSamples(int index) {
        return longitudeSamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of longitude samples
       * </pre>
       *
       * <code>repeated double longitude_samples = 5;</code>
       * @param index The index to set the value at.
       * @param value The longitudeSamples to set.
       * @return This builder for chaining.
       */
      public Builder setLongitudeSamples(
          int index, double value) {
        ensureLongitudeSamplesIsMutable();
        longitudeSamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of longitude samples
       * </pre>
       *
       * <code>repeated double longitude_samples = 5;</code>
       * @param value The longitudeSamples to add.
       * @return This builder for chaining.
       */
      public Builder addLongitudeSamples(double value) {
        ensureLongitudeSamplesIsMutable();
        longitudeSamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of longitude samples
       * </pre>
       *
       * <code>repeated double longitude_samples = 5;</code>
       * @param values The longitudeSamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllLongitudeSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureLongitudeSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, longitudeSamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of longitude samples
       * </pre>
       *
       * <code>repeated double longitude_samples = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearLongitudeSamples() {
        longitudeSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList altitudeSamples_ = emptyDoubleList();
      private void ensureAltitudeSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          altitudeSamples_ = mutableCopy(altitudeSamples_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * A list of altitude samples
       * </pre>
       *
       * <code>repeated double altitude_samples = 6;</code>
       * @return A list containing the altitudeSamples.
       */
      public java.util.List<java.lang.Double>
          getAltitudeSamplesList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(altitudeSamples_) : altitudeSamples_;
      }
      /**
       * <pre>
       * A list of altitude samples
       * </pre>
       *
       * <code>repeated double altitude_samples = 6;</code>
       * @return The count of altitudeSamples.
       */
      public int getAltitudeSamplesCount() {
        return altitudeSamples_.size();
      }
      /**
       * <pre>
       * A list of altitude samples
       * </pre>
       *
       * <code>repeated double altitude_samples = 6;</code>
       * @param index The index of the element to return.
       * @return The altitudeSamples at the given index.
       */
      public double getAltitudeSamples(int index) {
        return altitudeSamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of altitude samples
       * </pre>
       *
       * <code>repeated double altitude_samples = 6;</code>
       * @param index The index to set the value at.
       * @param value The altitudeSamples to set.
       * @return This builder for chaining.
       */
      public Builder setAltitudeSamples(
          int index, double value) {
        ensureAltitudeSamplesIsMutable();
        altitudeSamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of altitude samples
       * </pre>
       *
       * <code>repeated double altitude_samples = 6;</code>
       * @param value The altitudeSamples to add.
       * @return This builder for chaining.
       */
      public Builder addAltitudeSamples(double value) {
        ensureAltitudeSamplesIsMutable();
        altitudeSamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of altitude samples
       * </pre>
       *
       * <code>repeated double altitude_samples = 6;</code>
       * @param values The altitudeSamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllAltitudeSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureAltitudeSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, altitudeSamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of altitude samples
       * </pre>
       *
       * <code>repeated double altitude_samples = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearAltitudeSamples() {
        altitudeSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList speedSamples_ = emptyDoubleList();
      private void ensureSpeedSamplesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          speedSamples_ = mutableCopy(speedSamples_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <pre>
       * A list of speed samples
       * </pre>
       *
       * <code>repeated double speed_samples = 7;</code>
       * @return A list containing the speedSamples.
       */
      public java.util.List<java.lang.Double>
          getSpeedSamplesList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(speedSamples_) : speedSamples_;
      }
      /**
       * <pre>
       * A list of speed samples
       * </pre>
       *
       * <code>repeated double speed_samples = 7;</code>
       * @return The count of speedSamples.
       */
      public int getSpeedSamplesCount() {
        return speedSamples_.size();
      }
      /**
       * <pre>
       * A list of speed samples
       * </pre>
       *
       * <code>repeated double speed_samples = 7;</code>
       * @param index The index of the element to return.
       * @return The speedSamples at the given index.
       */
      public double getSpeedSamples(int index) {
        return speedSamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of speed samples
       * </pre>
       *
       * <code>repeated double speed_samples = 7;</code>
       * @param index The index to set the value at.
       * @param value The speedSamples to set.
       * @return This builder for chaining.
       */
      public Builder setSpeedSamples(
          int index, double value) {
        ensureSpeedSamplesIsMutable();
        speedSamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of speed samples
       * </pre>
       *
       * <code>repeated double speed_samples = 7;</code>
       * @param value The speedSamples to add.
       * @return This builder for chaining.
       */
      public Builder addSpeedSamples(double value) {
        ensureSpeedSamplesIsMutable();
        speedSamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of speed samples
       * </pre>
       *
       * <code>repeated double speed_samples = 7;</code>
       * @param values The speedSamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllSpeedSamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSpeedSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, speedSamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of speed samples
       * </pre>
       *
       * <code>repeated double speed_samples = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpeedSamples() {
        speedSamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList accuracySamples_ = emptyDoubleList();
      private void ensureAccuracySamplesIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          accuracySamples_ = mutableCopy(accuracySamples_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * A list of accuracy samples
       * </pre>
       *
       * <code>repeated double accuracy_samples = 8;</code>
       * @return A list containing the accuracySamples.
       */
      public java.util.List<java.lang.Double>
          getAccuracySamplesList() {
        return ((bitField0_ & 0x00000020) != 0) ?
                 java.util.Collections.unmodifiableList(accuracySamples_) : accuracySamples_;
      }
      /**
       * <pre>
       * A list of accuracy samples
       * </pre>
       *
       * <code>repeated double accuracy_samples = 8;</code>
       * @return The count of accuracySamples.
       */
      public int getAccuracySamplesCount() {
        return accuracySamples_.size();
      }
      /**
       * <pre>
       * A list of accuracy samples
       * </pre>
       *
       * <code>repeated double accuracy_samples = 8;</code>
       * @param index The index of the element to return.
       * @return The accuracySamples at the given index.
       */
      public double getAccuracySamples(int index) {
        return accuracySamples_.getDouble(index);
      }
      /**
       * <pre>
       * A list of accuracy samples
       * </pre>
       *
       * <code>repeated double accuracy_samples = 8;</code>
       * @param index The index to set the value at.
       * @param value The accuracySamples to set.
       * @return This builder for chaining.
       */
      public Builder setAccuracySamples(
          int index, double value) {
        ensureAccuracySamplesIsMutable();
        accuracySamples_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of accuracy samples
       * </pre>
       *
       * <code>repeated double accuracy_samples = 8;</code>
       * @param value The accuracySamples to add.
       * @return This builder for chaining.
       */
      public Builder addAccuracySamples(double value) {
        ensureAccuracySamplesIsMutable();
        accuracySamples_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of accuracy samples
       * </pre>
       *
       * <code>repeated double accuracy_samples = 8;</code>
       * @param values The accuracySamples to add.
       * @return This builder for chaining.
       */
      public Builder addAllAccuracySamples(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureAccuracySamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, accuracySamples_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of accuracy samples
       * </pre>
       *
       * <code>repeated double accuracy_samples = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAccuracySamples() {
        accuracySamples_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private boolean locationPermissionsGranted_ ;
      /**
       * <pre>
       * Have location permissions been granted by the user?
       * </pre>
       *
       * <code>bool location_permissions_granted = 9;</code>
       * @return The locationPermissionsGranted.
       */
      public boolean getLocationPermissionsGranted() {
        return locationPermissionsGranted_;
      }
      /**
       * <pre>
       * Have location permissions been granted by the user?
       * </pre>
       *
       * <code>bool location_permissions_granted = 9;</code>
       * @param value The locationPermissionsGranted to set.
       * @return This builder for chaining.
       */
      public Builder setLocationPermissionsGranted(boolean value) {
        
        locationPermissionsGranted_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Have location permissions been granted by the user?
       * </pre>
       *
       * <code>bool location_permissions_granted = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocationPermissionsGranted() {
        
        locationPermissionsGranted_ = false;
        onChanged();
        return this;
      }

      private boolean locationServicesRequested_ ;
      /**
       * <pre>
       * Has location services been requested by the user?
       * </pre>
       *
       * <code>bool location_services_requested = 10;</code>
       * @return The locationServicesRequested.
       */
      public boolean getLocationServicesRequested() {
        return locationServicesRequested_;
      }
      /**
       * <pre>
       * Has location services been requested by the user?
       * </pre>
       *
       * <code>bool location_services_requested = 10;</code>
       * @param value The locationServicesRequested to set.
       * @return This builder for chaining.
       */
      public Builder setLocationServicesRequested(boolean value) {
        
        locationServicesRequested_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Has location services been requested by the user?
       * </pre>
       *
       * <code>bool location_services_requested = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocationServicesRequested() {
        
        locationServicesRequested_ = false;
        onChanged();
        return this;
      }

      private boolean locationServicesEnabled_ ;
      /**
       * <pre>
       * Are location services enabled and working?
       * </pre>
       *
       * <code>bool location_services_enabled = 11;</code>
       * @return The locationServicesEnabled.
       */
      public boolean getLocationServicesEnabled() {
        return locationServicesEnabled_;
      }
      /**
       * <pre>
       * Are location services enabled and working?
       * </pre>
       *
       * <code>bool location_services_enabled = 11;</code>
       * @param value The locationServicesEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setLocationServicesEnabled(boolean value) {
        
        locationServicesEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Are location services enabled and working?
       * </pre>
       *
       * <code>bool location_services_enabled = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocationServicesEnabled() {
        
        locationServicesEnabled_ = false;
        onChanged();
        return this;
      }

      private int locationProvider_ = 0;
      /**
       * <pre>
       * Location provider enumeration
       * </pre>
       *
       * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
       * @return The enum numeric value on the wire for locationProvider.
       */
      public int getLocationProviderValue() {
        return locationProvider_;
      }
      /**
       * <pre>
       * Location provider enumeration
       * </pre>
       *
       * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
       * @param value The enum numeric value on the wire for locationProvider to set.
       * @return This builder for chaining.
       */
      public Builder setLocationProviderValue(int value) {
        locationProvider_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Location provider enumeration
       * </pre>
       *
       * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
       * @return The locationProvider.
       */
      public RedvoxApi1000.LocationChannel.LocationProvider getLocationProvider() {
        @SuppressWarnings("deprecation")
        RedvoxApi1000.LocationChannel.LocationProvider result = RedvoxApi1000.LocationChannel.LocationProvider.valueOf(locationProvider_);
        return result == null ? RedvoxApi1000.LocationChannel.LocationProvider.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Location provider enumeration
       * </pre>
       *
       * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
       * @param value The locationProvider to set.
       * @return This builder for chaining.
       */
      public Builder setLocationProvider(RedvoxApi1000.LocationChannel.LocationProvider value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        locationProvider_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Location provider enumeration
       * </pre>
       *
       * <code>.LocationChannel.LocationProvider location_provider = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocationProvider() {
        
        locationProvider_ = 0;
        onChanged();
        return this;
      }

      private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> sampleRateStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       * @return Whether the sampleRateStatistics field is set.
       */
      public boolean hasSampleRateStatistics() {
        return sampleRateStatisticsBuilder_ != null || sampleRateStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       * @return The sampleRateStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        } else {
          return sampleRateStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       */
      public Builder setSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sampleRateStatistics_ = value;
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       */
      public Builder setSampleRateStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = builderForValue.build();
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       */
      public Builder mergeSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (sampleRateStatistics_ != null) {
            sampleRateStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(sampleRateStatistics_).mergeFrom(value).buildPartial();
          } else {
            sampleRateStatistics_ = value;
          }
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       */
      public Builder clearSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
          onChanged();
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getSampleRateStatisticsBuilder() {
        
        onChanged();
        return getSampleRateStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
        if (sampleRateStatisticsBuilder_ != null) {
          return sampleRateStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return sampleRateStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getSampleRateStatisticsFieldBuilder() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getSampleRateStatistics(),
                  getParentForChildren(),
                  isClean());
          sampleRateStatistics_ = null;
        }
        return sampleRateStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics latitudeSampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> latitudeSampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       * @return Whether the latitudeSampleStatistics field is set.
       */
      public boolean hasLatitudeSampleStatistics() {
        return latitudeSampleStatisticsBuilder_ != null || latitudeSampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       * @return The latitudeSampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getLatitudeSampleStatistics() {
        if (latitudeSampleStatisticsBuilder_ == null) {
          return latitudeSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : latitudeSampleStatistics_;
        } else {
          return latitudeSampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       */
      public Builder setLatitudeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (latitudeSampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          latitudeSampleStatistics_ = value;
          onChanged();
        } else {
          latitudeSampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       */
      public Builder setLatitudeSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (latitudeSampleStatisticsBuilder_ == null) {
          latitudeSampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          latitudeSampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       */
      public Builder mergeLatitudeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (latitudeSampleStatisticsBuilder_ == null) {
          if (latitudeSampleStatistics_ != null) {
            latitudeSampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(latitudeSampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            latitudeSampleStatistics_ = value;
          }
          onChanged();
        } else {
          latitudeSampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       */
      public Builder clearLatitudeSampleStatistics() {
        if (latitudeSampleStatisticsBuilder_ == null) {
          latitudeSampleStatistics_ = null;
          onChanged();
        } else {
          latitudeSampleStatistics_ = null;
          latitudeSampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getLatitudeSampleStatisticsBuilder() {
        
        onChanged();
        return getLatitudeSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getLatitudeSampleStatisticsOrBuilder() {
        if (latitudeSampleStatisticsBuilder_ != null) {
          return latitudeSampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return latitudeSampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : latitudeSampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for latitude samples
       * </pre>
       *
       * <code>.SummaryStatistics latitude_sample_statistics = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getLatitudeSampleStatisticsFieldBuilder() {
        if (latitudeSampleStatisticsBuilder_ == null) {
          latitudeSampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getLatitudeSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          latitudeSampleStatistics_ = null;
        }
        return latitudeSampleStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics longitudeSampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> longitudeSampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       * @return Whether the longitudeSampleStatistics field is set.
       */
      public boolean hasLongitudeSampleStatistics() {
        return longitudeSampleStatisticsBuilder_ != null || longitudeSampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       * @return The longitudeSampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getLongitudeSampleStatistics() {
        if (longitudeSampleStatisticsBuilder_ == null) {
          return longitudeSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : longitudeSampleStatistics_;
        } else {
          return longitudeSampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       */
      public Builder setLongitudeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (longitudeSampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          longitudeSampleStatistics_ = value;
          onChanged();
        } else {
          longitudeSampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       */
      public Builder setLongitudeSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (longitudeSampleStatisticsBuilder_ == null) {
          longitudeSampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          longitudeSampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       */
      public Builder mergeLongitudeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (longitudeSampleStatisticsBuilder_ == null) {
          if (longitudeSampleStatistics_ != null) {
            longitudeSampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(longitudeSampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            longitudeSampleStatistics_ = value;
          }
          onChanged();
        } else {
          longitudeSampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       */
      public Builder clearLongitudeSampleStatistics() {
        if (longitudeSampleStatisticsBuilder_ == null) {
          longitudeSampleStatistics_ = null;
          onChanged();
        } else {
          longitudeSampleStatistics_ = null;
          longitudeSampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getLongitudeSampleStatisticsBuilder() {
        
        onChanged();
        return getLongitudeSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getLongitudeSampleStatisticsOrBuilder() {
        if (longitudeSampleStatisticsBuilder_ != null) {
          return longitudeSampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return longitudeSampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : longitudeSampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for longitude samples
       * </pre>
       *
       * <code>.SummaryStatistics longitude_sample_statistics = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getLongitudeSampleStatisticsFieldBuilder() {
        if (longitudeSampleStatisticsBuilder_ == null) {
          longitudeSampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getLongitudeSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          longitudeSampleStatistics_ = null;
        }
        return longitudeSampleStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics altitudeSampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> altitudeSampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       * @return Whether the altitudeSampleStatistics field is set.
       */
      public boolean hasAltitudeSampleStatistics() {
        return altitudeSampleStatisticsBuilder_ != null || altitudeSampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       * @return The altitudeSampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getAltitudeSampleStatistics() {
        if (altitudeSampleStatisticsBuilder_ == null) {
          return altitudeSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : altitudeSampleStatistics_;
        } else {
          return altitudeSampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       */
      public Builder setAltitudeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (altitudeSampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          altitudeSampleStatistics_ = value;
          onChanged();
        } else {
          altitudeSampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       */
      public Builder setAltitudeSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (altitudeSampleStatisticsBuilder_ == null) {
          altitudeSampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          altitudeSampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       */
      public Builder mergeAltitudeSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (altitudeSampleStatisticsBuilder_ == null) {
          if (altitudeSampleStatistics_ != null) {
            altitudeSampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(altitudeSampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            altitudeSampleStatistics_ = value;
          }
          onChanged();
        } else {
          altitudeSampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       */
      public Builder clearAltitudeSampleStatistics() {
        if (altitudeSampleStatisticsBuilder_ == null) {
          altitudeSampleStatistics_ = null;
          onChanged();
        } else {
          altitudeSampleStatistics_ = null;
          altitudeSampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getAltitudeSampleStatisticsBuilder() {
        
        onChanged();
        return getAltitudeSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getAltitudeSampleStatisticsOrBuilder() {
        if (altitudeSampleStatisticsBuilder_ != null) {
          return altitudeSampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return altitudeSampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : altitudeSampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for altitude samples
       * </pre>
       *
       * <code>.SummaryStatistics altitude_sample_statistics = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getAltitudeSampleStatisticsFieldBuilder() {
        if (altitudeSampleStatisticsBuilder_ == null) {
          altitudeSampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getAltitudeSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          altitudeSampleStatistics_ = null;
        }
        return altitudeSampleStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics speedSampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> speedSampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       * @return Whether the speedSampleStatistics field is set.
       */
      public boolean hasSpeedSampleStatistics() {
        return speedSampleStatisticsBuilder_ != null || speedSampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       * @return The speedSampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getSpeedSampleStatistics() {
        if (speedSampleStatisticsBuilder_ == null) {
          return speedSampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : speedSampleStatistics_;
        } else {
          return speedSampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       */
      public Builder setSpeedSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (speedSampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speedSampleStatistics_ = value;
          onChanged();
        } else {
          speedSampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       */
      public Builder setSpeedSampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (speedSampleStatisticsBuilder_ == null) {
          speedSampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          speedSampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       */
      public Builder mergeSpeedSampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (speedSampleStatisticsBuilder_ == null) {
          if (speedSampleStatistics_ != null) {
            speedSampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(speedSampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            speedSampleStatistics_ = value;
          }
          onChanged();
        } else {
          speedSampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       */
      public Builder clearSpeedSampleStatistics() {
        if (speedSampleStatisticsBuilder_ == null) {
          speedSampleStatistics_ = null;
          onChanged();
        } else {
          speedSampleStatistics_ = null;
          speedSampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getSpeedSampleStatisticsBuilder() {
        
        onChanged();
        return getSpeedSampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getSpeedSampleStatisticsOrBuilder() {
        if (speedSampleStatisticsBuilder_ != null) {
          return speedSampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return speedSampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : speedSampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for speed samples
       * </pre>
       *
       * <code>.SummaryStatistics speed_sample_statistics = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getSpeedSampleStatisticsFieldBuilder() {
        if (speedSampleStatisticsBuilder_ == null) {
          speedSampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getSpeedSampleStatistics(),
                  getParentForChildren(),
                  isClean());
          speedSampleStatistics_ = null;
        }
        return speedSampleStatisticsBuilder_;
      }

      private RedvoxApi1000.SummaryStatistics accuracySampleStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> accuracySampleStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       * @return Whether the accuracySampleStatistics field is set.
       */
      public boolean hasAccuracySampleStatistics() {
        return accuracySampleStatisticsBuilder_ != null || accuracySampleStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       * @return The accuracySampleStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getAccuracySampleStatistics() {
        if (accuracySampleStatisticsBuilder_ == null) {
          return accuracySampleStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : accuracySampleStatistics_;
        } else {
          return accuracySampleStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       */
      public Builder setAccuracySampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (accuracySampleStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          accuracySampleStatistics_ = value;
          onChanged();
        } else {
          accuracySampleStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       */
      public Builder setAccuracySampleStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (accuracySampleStatisticsBuilder_ == null) {
          accuracySampleStatistics_ = builderForValue.build();
          onChanged();
        } else {
          accuracySampleStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       */
      public Builder mergeAccuracySampleStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (accuracySampleStatisticsBuilder_ == null) {
          if (accuracySampleStatistics_ != null) {
            accuracySampleStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(accuracySampleStatistics_).mergeFrom(value).buildPartial();
          } else {
            accuracySampleStatistics_ = value;
          }
          onChanged();
        } else {
          accuracySampleStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       */
      public Builder clearAccuracySampleStatistics() {
        if (accuracySampleStatisticsBuilder_ == null) {
          accuracySampleStatistics_ = null;
          onChanged();
        } else {
          accuracySampleStatistics_ = null;
          accuracySampleStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getAccuracySampleStatisticsBuilder() {
        
        onChanged();
        return getAccuracySampleStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getAccuracySampleStatisticsOrBuilder() {
        if (accuracySampleStatisticsBuilder_ != null) {
          return accuracySampleStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return accuracySampleStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : accuracySampleStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for accuracy samples
       * </pre>
       *
       * <code>.SummaryStatistics accuracy_sample_statistics = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getAccuracySampleStatisticsFieldBuilder() {
        if (accuracySampleStatisticsBuilder_ == null) {
          accuracySampleStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getAccuracySampleStatistics(),
                  getParentForChildren(),
                  isClean());
          accuracySampleStatistics_ = null;
        }
        return accuracySampleStatisticsBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> metadata_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMetadata() {
        if (metadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        return metadata_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableMetadata() {
        onChanged();;
        if (metadata_ == null) {
          metadata_ = com.google.protobuf.MapField.newMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        if (!metadata_.isMutable()) {
          metadata_ = metadata_.copy();
        }
        return metadata_;
      }

      public int getMetadataCount() {
        return internalGetMetadata().getMap().size();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 19;</code>
       */

      public boolean containsMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMetadataMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return getMetadataMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 19;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
        return internalGetMetadata().getMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 19;</code>
       */

      public java.lang.String getMetadataOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 19;</code>
       */

      public java.lang.String getMetadataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMetadata() {
        internalGetMutableMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 19;</code>
       */

      public Builder removeMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableMetadata() {
        return internalGetMutableMetadata().getMutableMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 19;</code>
       */
      public Builder putMetadata(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 19;</code>
       */

      public Builder putAllMetadata(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableMetadata().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:LocationChannel)
    }

    // @@protoc_insertion_point(class_scope:LocationChannel)
    private static final RedvoxApi1000.LocationChannel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RedvoxApi1000.LocationChannel();
    }

    public static RedvoxApi1000.LocationChannel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LocationChannel>
        PARSER = new com.google.protobuf.AbstractParser<LocationChannel>() {
      @java.lang.Override
      public LocationChannel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationChannel(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LocationChannel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LocationChannel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public RedvoxApi1000.LocationChannel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImageChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ImageChannel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    java.lang.String getSensorDescription();
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    com.google.protobuf.ByteString
        getSensorDescriptionBytes();

    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    double getMeanSampleRateHz();

    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    java.util.List<java.lang.Double> getSampleTsUsList();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    int getSampleTsUsCount();
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    double getSampleTsUs(int index);

    /**
     * <code>repeated bytes samples = 4;</code>
     * @return A list containing the samples.
     */
    java.util.List<com.google.protobuf.ByteString> getSamplesList();
    /**
     * <code>repeated bytes samples = 4;</code>
     * @return The count of samples.
     */
    int getSamplesCount();
    /**
     * <code>repeated bytes samples = 4;</code>
     * @param index The index of the element to return.
     * @return The samples at the given index.
     */
    com.google.protobuf.ByteString getSamples(int index);

    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    boolean hasSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return The sampleRateStatistics.
     */
    RedvoxApi1000.SummaryStatistics getSampleRateStatistics();
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     */
    RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder();

    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */
    int getMetadataCount();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */
    boolean containsMetadata(
        java.lang.String key);
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMetadata();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMetadataMap();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    java.lang.String getMetadataOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code ImageChannel}
   */
  public  static final class ImageChannel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ImageChannel)
      ImageChannelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ImageChannel.newBuilder() to construct.
    private ImageChannel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImageChannel() {
      sensorDescription_ = "";
      sampleTsUs_ = emptyDoubleList();
      samples_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ImageChannel();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImageChannel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              sensorDescription_ = s;
              break;
            }
            case 17: {

              meanSampleRateHz_ = input.readDouble();
              break;
            }
            case 25: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              sampleTsUs_.addDouble(input.readDouble());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                sampleTsUs_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                sampleTsUs_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                samples_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000002;
              }
              samples_.add(input.readBytes());
              break;
            }
            case 42: {
              RedvoxApi1000.SummaryStatistics.Builder subBuilder = null;
              if (sampleRateStatistics_ != null) {
                subBuilder = sampleRateStatistics_.toBuilder();
              }
              sampleRateStatistics_ = input.readMessage(RedvoxApi1000.SummaryStatistics.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sampleRateStatistics_);
                sampleRateStatistics_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                metadata_ = com.google.protobuf.MapField.newMapField(
                    MetadataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              metadata_.getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          samples_ = java.util.Collections.unmodifiableList(samples_); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RedvoxApi1000.internal_static_ImageChannel_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RedvoxApi1000.internal_static_ImageChannel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RedvoxApi1000.ImageChannel.class, RedvoxApi1000.ImageChannel.Builder.class);
    }

    public static final int SENSOR_DESCRIPTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object sensorDescription_;
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The sensorDescription.
     */
    public java.lang.String getSensorDescription() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sensorDescription_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name or description of the sensor
     * </pre>
     *
     * <code>string sensor_description = 1;</code>
     * @return The bytes for sensorDescription.
     */
    public com.google.protobuf.ByteString
        getSensorDescriptionBytes() {
      java.lang.Object ref = sensorDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sensorDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER = 2;
    private double meanSampleRateHz_;
    /**
     * <pre>
     * The mean sample rate in Hz
     * </pre>
     *
     * <code>double mean_sample_rate_hz = 2;</code>
     * @return The meanSampleRateHz.
     */
    public double getMeanSampleRateHz() {
      return meanSampleRateHz_;
    }

    public static final int SAMPLE_TS_US_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.DoubleList sampleTsUs_;
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return A list containing the sampleTsUs.
     */
    public java.util.List<java.lang.Double>
        getSampleTsUsList() {
      return sampleTsUs_;
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @return The count of sampleTsUs.
     */
    public int getSampleTsUsCount() {
      return sampleTsUs_.size();
    }
    /**
     * <pre>
     * A list of timestamps, one for each sample
     * </pre>
     *
     * <code>repeated double sample_ts_us = 3;</code>
     * @param index The index of the element to return.
     * @return The sampleTsUs at the given index.
     */
    public double getSampleTsUs(int index) {
      return sampleTsUs_.getDouble(index);
    }
    private int sampleTsUsMemoizedSerializedSize = -1;

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private java.util.List<com.google.protobuf.ByteString> samples_;
    /**
     * <code>repeated bytes samples = 4;</code>
     * @return A list containing the samples.
     */
    public java.util.List<com.google.protobuf.ByteString>
        getSamplesList() {
      return samples_;
    }
    /**
     * <code>repeated bytes samples = 4;</code>
     * @return The count of samples.
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <code>repeated bytes samples = 4;</code>
     * @param index The index of the element to return.
     * @return The samples at the given index.
     */
    public com.google.protobuf.ByteString getSamples(int index) {
      return samples_.get(index);
    }

    public static final int SAMPLE_RATE_STATISTICS_FIELD_NUMBER = 5;
    private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return Whether the sampleRateStatistics field is set.
     */
    public boolean hasSampleRateStatistics() {
      return sampleRateStatistics_ != null;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     * @return The sampleRateStatistics.
     */
    public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
      return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
    }
    /**
     * <pre>
     * Statistics for sample timestamps
     * </pre>
     *
     * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
     */
    public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
      return getSampleRateStatistics();
    }

    public static final int METADATA_FIELD_NUMBER = 6;
    private static final class MetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  RedvoxApi1000.internal_static_ImageChannel_MetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }

    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 6;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!getSensorDescriptionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        output.writeDouble(2, meanSampleRateHz_);
      }
      if (getSampleTsUsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(sampleTsUsMemoizedSerializedSize);
      }
      for (int i = 0; i < sampleTsUs_.size(); i++) {
        output.writeDoubleNoTag(sampleTsUs_.getDouble(i));
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeBytes(4, samples_.get(i));
      }
      if (sampleRateStatistics_ != null) {
        output.writeMessage(5, getSampleRateStatistics());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMetadata(),
          MetadataDefaultEntryHolder.defaultEntry,
          6);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSensorDescriptionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sensorDescription_);
      }
      if (meanSampleRateHz_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, meanSampleRateHz_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getSampleTsUsList().size();
        size += dataSize;
        if (!getSampleTsUsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        sampleTsUsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < samples_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(samples_.get(i));
        }
        size += dataSize;
        size += 1 * getSamplesList().size();
      }
      if (sampleRateStatistics_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSampleRateStatistics());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, metadata__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RedvoxApi1000.ImageChannel)) {
        return super.equals(obj);
      }
      RedvoxApi1000.ImageChannel other = (RedvoxApi1000.ImageChannel) obj;

      if (!getSensorDescription()
          .equals(other.getSensorDescription())) return false;
      if (java.lang.Double.doubleToLongBits(getMeanSampleRateHz())
          != java.lang.Double.doubleToLongBits(
              other.getMeanSampleRateHz())) return false;
      if (!getSampleTsUsList()
          .equals(other.getSampleTsUsList())) return false;
      if (!getSamplesList()
          .equals(other.getSamplesList())) return false;
      if (hasSampleRateStatistics() != other.hasSampleRateStatistics()) return false;
      if (hasSampleRateStatistics()) {
        if (!getSampleRateStatistics()
            .equals(other.getSampleRateStatistics())) return false;
      }
      if (!internalGetMetadata().equals(
          other.internalGetMetadata())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SENSOR_DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getSensorDescription().hashCode();
      hash = (37 * hash) + MEAN_SAMPLE_RATE_HZ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMeanSampleRateHz()));
      if (getSampleTsUsCount() > 0) {
        hash = (37 * hash) + SAMPLE_TS_US_FIELD_NUMBER;
        hash = (53 * hash) + getSampleTsUsList().hashCode();
      }
      if (getSamplesCount() > 0) {
        hash = (37 * hash) + SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getSamplesList().hashCode();
      }
      if (hasSampleRateStatistics()) {
        hash = (37 * hash) + SAMPLE_RATE_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getSampleRateStatistics().hashCode();
      }
      if (!internalGetMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMetadata().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RedvoxApi1000.ImageChannel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.ImageChannel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.ImageChannel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.ImageChannel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RedvoxApi1000.ImageChannel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ImageChannel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ImageChannel)
        RedvoxApi1000.ImageChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RedvoxApi1000.internal_static_ImageChannel_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RedvoxApi1000.internal_static_ImageChannel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RedvoxApi1000.ImageChannel.class, RedvoxApi1000.ImageChannel.Builder.class);
      }

      // Construct using RedvoxApi1000.ImageChannel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        sensorDescription_ = "";

        meanSampleRateHz_ = 0D;

        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        samples_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }
        internalGetMutableMetadata().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RedvoxApi1000.internal_static_ImageChannel_descriptor;
      }

      @java.lang.Override
      public RedvoxApi1000.ImageChannel getDefaultInstanceForType() {
        return RedvoxApi1000.ImageChannel.getDefaultInstance();
      }

      @java.lang.Override
      public RedvoxApi1000.ImageChannel build() {
        RedvoxApi1000.ImageChannel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public RedvoxApi1000.ImageChannel buildPartial() {
        RedvoxApi1000.ImageChannel result = new RedvoxApi1000.ImageChannel(this);
        int from_bitField0_ = bitField0_;
        result.sensorDescription_ = sensorDescription_;
        result.meanSampleRateHz_ = meanSampleRateHz_;
        if (((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.sampleTsUs_ = sampleTsUs_;
        if (((bitField0_ & 0x00000002) != 0)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.samples_ = samples_;
        if (sampleRateStatisticsBuilder_ == null) {
          result.sampleRateStatistics_ = sampleRateStatistics_;
        } else {
          result.sampleRateStatistics_ = sampleRateStatisticsBuilder_.build();
        }
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RedvoxApi1000.ImageChannel) {
          return mergeFrom((RedvoxApi1000.ImageChannel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RedvoxApi1000.ImageChannel other) {
        if (other == RedvoxApi1000.ImageChannel.getDefaultInstance()) return this;
        if (!other.getSensorDescription().isEmpty()) {
          sensorDescription_ = other.sensorDescription_;
          onChanged();
        }
        if (other.getMeanSampleRateHz() != 0D) {
          setMeanSampleRateHz(other.getMeanSampleRateHz());
        }
        if (!other.sampleTsUs_.isEmpty()) {
          if (sampleTsUs_.isEmpty()) {
            sampleTsUs_ = other.sampleTsUs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSampleTsUsIsMutable();
            sampleTsUs_.addAll(other.sampleTsUs_);
          }
          onChanged();
        }
        if (!other.samples_.isEmpty()) {
          if (samples_.isEmpty()) {
            samples_ = other.samples_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSamplesIsMutable();
            samples_.addAll(other.samples_);
          }
          onChanged();
        }
        if (other.hasSampleRateStatistics()) {
          mergeSampleRateStatistics(other.getSampleRateStatistics());
        }
        internalGetMutableMetadata().mergeFrom(
            other.internalGetMetadata());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RedvoxApi1000.ImageChannel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RedvoxApi1000.ImageChannel) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object sensorDescription_ = "";
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The sensorDescription.
       */
      public java.lang.String getSensorDescription() {
        java.lang.Object ref = sensorDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sensorDescription_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return The bytes for sensorDescription.
       */
      public com.google.protobuf.ByteString
          getSensorDescriptionBytes() {
        java.lang.Object ref = sensorDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sensorDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sensorDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorDescription() {
        
        sensorDescription_ = getDefaultInstance().getSensorDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name or description of the sensor
       * </pre>
       *
       * <code>string sensor_description = 1;</code>
       * @param value The bytes for sensorDescription to set.
       * @return This builder for chaining.
       */
      public Builder setSensorDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sensorDescription_ = value;
        onChanged();
        return this;
      }

      private double meanSampleRateHz_ ;
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return The meanSampleRateHz.
       */
      public double getMeanSampleRateHz() {
        return meanSampleRateHz_;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @param value The meanSampleRateHz to set.
       * @return This builder for chaining.
       */
      public Builder setMeanSampleRateHz(double value) {
        
        meanSampleRateHz_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The mean sample rate in Hz
       * </pre>
       *
       * <code>double mean_sample_rate_hz = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMeanSampleRateHz() {
        
        meanSampleRateHz_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList sampleTsUs_ = emptyDoubleList();
      private void ensureSampleTsUsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sampleTsUs_ = mutableCopy(sampleTsUs_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return A list containing the sampleTsUs.
       */
      public java.util.List<java.lang.Double>
          getSampleTsUsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(sampleTsUs_) : sampleTsUs_;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return The count of sampleTsUs.
       */
      public int getSampleTsUsCount() {
        return sampleTsUs_.size();
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index of the element to return.
       * @return The sampleTsUs at the given index.
       */
      public double getSampleTsUs(int index) {
        return sampleTsUs_.getDouble(index);
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param index The index to set the value at.
       * @param value The sampleTsUs to set.
       * @return This builder for chaining.
       */
      public Builder setSampleTsUs(
          int index, double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param value The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addSampleTsUs(double value) {
        ensureSampleTsUsIsMutable();
        sampleTsUs_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @param values The sampleTsUs to add.
       * @return This builder for chaining.
       */
      public Builder addAllSampleTsUs(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureSampleTsUsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sampleTsUs_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of timestamps, one for each sample
       * </pre>
       *
       * <code>repeated double sample_ts_us = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleTsUs() {
        sampleTsUs_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> samples_ = java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          samples_ = new java.util.ArrayList<com.google.protobuf.ByteString>(samples_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated bytes samples = 4;</code>
       * @return A list containing the samples.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getSamplesList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(samples_) : samples_;
      }
      /**
       * <code>repeated bytes samples = 4;</code>
       * @return The count of samples.
       */
      public int getSamplesCount() {
        return samples_.size();
      }
      /**
       * <code>repeated bytes samples = 4;</code>
       * @param index The index of the element to return.
       * @return The samples at the given index.
       */
      public com.google.protobuf.ByteString getSamples(int index) {
        return samples_.get(index);
      }
      /**
       * <code>repeated bytes samples = 4;</code>
       * @param index The index to set the value at.
       * @param value The samples to set.
       * @return This builder for chaining.
       */
      public Builder setSamples(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSamplesIsMutable();
        samples_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes samples = 4;</code>
       * @param value The samples to add.
       * @return This builder for chaining.
       */
      public Builder addSamples(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSamplesIsMutable();
        samples_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes samples = 4;</code>
       * @param values The samples to add.
       * @return This builder for chaining.
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, samples_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes samples = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSamples() {
        samples_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private RedvoxApi1000.SummaryStatistics sampleRateStatistics_;
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> sampleRateStatisticsBuilder_;
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       * @return Whether the sampleRateStatistics field is set.
       */
      public boolean hasSampleRateStatistics() {
        return sampleRateStatisticsBuilder_ != null || sampleRateStatistics_ != null;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       * @return The sampleRateStatistics.
       */
      public RedvoxApi1000.SummaryStatistics getSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          return sampleRateStatistics_ == null ? RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        } else {
          return sampleRateStatisticsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder setSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sampleRateStatistics_ = value;
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder setSampleRateStatistics(
          RedvoxApi1000.SummaryStatistics.Builder builderForValue) {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = builderForValue.build();
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder mergeSampleRateStatistics(RedvoxApi1000.SummaryStatistics value) {
        if (sampleRateStatisticsBuilder_ == null) {
          if (sampleRateStatistics_ != null) {
            sampleRateStatistics_ =
              RedvoxApi1000.SummaryStatistics.newBuilder(sampleRateStatistics_).mergeFrom(value).buildPartial();
          } else {
            sampleRateStatistics_ = value;
          }
          onChanged();
        } else {
          sampleRateStatisticsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public Builder clearSampleRateStatistics() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatistics_ = null;
          onChanged();
        } else {
          sampleRateStatistics_ = null;
          sampleRateStatisticsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public RedvoxApi1000.SummaryStatistics.Builder getSampleRateStatisticsBuilder() {
        
        onChanged();
        return getSampleRateStatisticsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      public RedvoxApi1000.SummaryStatisticsOrBuilder getSampleRateStatisticsOrBuilder() {
        if (sampleRateStatisticsBuilder_ != null) {
          return sampleRateStatisticsBuilder_.getMessageOrBuilder();
        } else {
          return sampleRateStatistics_ == null ?
              RedvoxApi1000.SummaryStatistics.getDefaultInstance() : sampleRateStatistics_;
        }
      }
      /**
       * <pre>
       * Statistics for sample timestamps
       * </pre>
       *
       * <code>.SummaryStatistics sample_rate_statistics = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder> 
          getSampleRateStatisticsFieldBuilder() {
        if (sampleRateStatisticsBuilder_ == null) {
          sampleRateStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              RedvoxApi1000.SummaryStatistics, RedvoxApi1000.SummaryStatistics.Builder, RedvoxApi1000.SummaryStatisticsOrBuilder>(
                  getSampleRateStatistics(),
                  getParentForChildren(),
                  isClean());
          sampleRateStatistics_ = null;
        }
        return sampleRateStatisticsBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> metadata_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMetadata() {
        if (metadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        return metadata_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableMetadata() {
        onChanged();;
        if (metadata_ == null) {
          metadata_ = com.google.protobuf.MapField.newMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        if (!metadata_.isMutable()) {
          metadata_ = metadata_.copy();
        }
        return metadata_;
      }

      public int getMetadataCount() {
        return internalGetMetadata().getMap().size();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public boolean containsMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMetadataMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return getMetadataMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
        return internalGetMetadata().getMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public java.lang.String getMetadataOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public java.lang.String getMetadataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMetadata() {
        internalGetMutableMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public Builder removeMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableMetadata() {
        return internalGetMutableMetadata().getMutableMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */
      public Builder putMetadata(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 6;</code>
       */

      public Builder putAllMetadata(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableMetadata().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ImageChannel)
    }

    // @@protoc_insertion_point(class_scope:ImageChannel)
    private static final RedvoxApi1000.ImageChannel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RedvoxApi1000.ImageChannel();
    }

    public static RedvoxApi1000.ImageChannel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ImageChannel>
        PARSER = new com.google.protobuf.AbstractParser<ImageChannel>() {
      @java.lang.Override
      public ImageChannel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImageChannel(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ImageChannel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImageChannel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public RedvoxApi1000.ImageChannel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SummaryStatisticsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SummaryStatistics)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The total count of values included in the statistics
     * </pre>
     *
     * <code>double count = 1;</code>
     * @return The count.
     */
    double getCount();

    /**
     * <pre>
     * The mean of the values
     * </pre>
     *
     * <code>double mean = 2;</code>
     * @return The mean.
     */
    double getMean();

    /**
     * <pre>
     * The median of the values
     * </pre>
     *
     * <code>double median = 3;</code>
     * @return The median.
     */
    double getMedian();

    /**
     * <pre>
     * The mode of the values
     * </pre>
     *
     * <code>double mode = 4;</code>
     * @return The mode.
     */
    double getMode();

    /**
     * <pre>
     * The variance of the values
     * </pre>
     *
     * <code>double variance = 5;</code>
     * @return The variance.
     */
    double getVariance();

    /**
     * <pre>
     * The minimum value
     * </pre>
     *
     * <code>double min = 6;</code>
     * @return The min.
     */
    double getMin();

    /**
     * <pre>
     * The maximum value
     * </pre>
     *
     * <code>double max = 7;</code>
     * @return The max.
     */
    double getMax();

    /**
     * <pre>
     * The range of the values
     * </pre>
     *
     * <code>double range = 8;</code>
     * @return The range.
     */
    double getRange();

    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */
    int getMetadataCount();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */
    boolean containsMetadata(
        java.lang.String key);
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getMetadata();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getMetadataMap();
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */

    java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */

    java.lang.String getMetadataOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Message type for summary statistics
   * </pre>
   *
   * Protobuf type {@code SummaryStatistics}
   */
  public  static final class SummaryStatistics extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SummaryStatistics)
      SummaryStatisticsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SummaryStatistics.newBuilder() to construct.
    private SummaryStatistics(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SummaryStatistics() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SummaryStatistics();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SummaryStatistics(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              count_ = input.readDouble();
              break;
            }
            case 17: {

              mean_ = input.readDouble();
              break;
            }
            case 25: {

              median_ = input.readDouble();
              break;
            }
            case 33: {

              mode_ = input.readDouble();
              break;
            }
            case 41: {

              variance_ = input.readDouble();
              break;
            }
            case 49: {

              min_ = input.readDouble();
              break;
            }
            case 57: {

              max_ = input.readDouble();
              break;
            }
            case 65: {

              range_ = input.readDouble();
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                metadata_ = com.google.protobuf.MapField.newMapField(
                    MetadataDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              metadata__ = input.readMessage(
                  MetadataDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              metadata_.getMutableMap().put(
                  metadata__.getKey(), metadata__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RedvoxApi1000.internal_static_SummaryStatistics_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 9:
          return internalGetMetadata();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RedvoxApi1000.internal_static_SummaryStatistics_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RedvoxApi1000.SummaryStatistics.class, RedvoxApi1000.SummaryStatistics.Builder.class);
    }

    public static final int COUNT_FIELD_NUMBER = 1;
    private double count_;
    /**
     * <pre>
     * The total count of values included in the statistics
     * </pre>
     *
     * <code>double count = 1;</code>
     * @return The count.
     */
    public double getCount() {
      return count_;
    }

    public static final int MEAN_FIELD_NUMBER = 2;
    private double mean_;
    /**
     * <pre>
     * The mean of the values
     * </pre>
     *
     * <code>double mean = 2;</code>
     * @return The mean.
     */
    public double getMean() {
      return mean_;
    }

    public static final int MEDIAN_FIELD_NUMBER = 3;
    private double median_;
    /**
     * <pre>
     * The median of the values
     * </pre>
     *
     * <code>double median = 3;</code>
     * @return The median.
     */
    public double getMedian() {
      return median_;
    }

    public static final int MODE_FIELD_NUMBER = 4;
    private double mode_;
    /**
     * <pre>
     * The mode of the values
     * </pre>
     *
     * <code>double mode = 4;</code>
     * @return The mode.
     */
    public double getMode() {
      return mode_;
    }

    public static final int VARIANCE_FIELD_NUMBER = 5;
    private double variance_;
    /**
     * <pre>
     * The variance of the values
     * </pre>
     *
     * <code>double variance = 5;</code>
     * @return The variance.
     */
    public double getVariance() {
      return variance_;
    }

    public static final int MIN_FIELD_NUMBER = 6;
    private double min_;
    /**
     * <pre>
     * The minimum value
     * </pre>
     *
     * <code>double min = 6;</code>
     * @return The min.
     */
    public double getMin() {
      return min_;
    }

    public static final int MAX_FIELD_NUMBER = 7;
    private double max_;
    /**
     * <pre>
     * The maximum value
     * </pre>
     *
     * <code>double max = 7;</code>
     * @return The max.
     */
    public double getMax() {
      return max_;
    }

    public static final int RANGE_FIELD_NUMBER = 8;
    private double range_;
    /**
     * <pre>
     * The range of the values
     * </pre>
     *
     * <code>double range = 8;</code>
     * @return The range.
     */
    public double getRange() {
      return range_;
    }

    public static final int METADATA_FIELD_NUMBER = 9;
    private static final class MetadataDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  RedvoxApi1000.internal_static_SummaryStatistics_MetadataEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> metadata_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMetadata() {
      if (metadata_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MetadataDefaultEntryHolder.defaultEntry);
      }
      return metadata_;
    }

    public int getMetadataCount() {
      return internalGetMetadata().getMap().size();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMetadata().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return internalGetMetadata().getMap();
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map from string to string for including untyped metadata
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 9;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMetadata().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (count_ != 0D) {
        output.writeDouble(1, count_);
      }
      if (mean_ != 0D) {
        output.writeDouble(2, mean_);
      }
      if (median_ != 0D) {
        output.writeDouble(3, median_);
      }
      if (mode_ != 0D) {
        output.writeDouble(4, mode_);
      }
      if (variance_ != 0D) {
        output.writeDouble(5, variance_);
      }
      if (min_ != 0D) {
        output.writeDouble(6, min_);
      }
      if (max_ != 0D) {
        output.writeDouble(7, max_);
      }
      if (range_ != 0D) {
        output.writeDouble(8, range_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMetadata(),
          MetadataDefaultEntryHolder.defaultEntry,
          9);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (count_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, count_);
      }
      if (mean_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, mean_);
      }
      if (median_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, median_);
      }
      if (mode_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, mode_);
      }
      if (variance_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, variance_);
      }
      if (min_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, min_);
      }
      if (max_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, max_);
      }
      if (range_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, range_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetMetadata().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        metadata__ = MetadataDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, metadata__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RedvoxApi1000.SummaryStatistics)) {
        return super.equals(obj);
      }
      RedvoxApi1000.SummaryStatistics other = (RedvoxApi1000.SummaryStatistics) obj;

      if (java.lang.Double.doubleToLongBits(getCount())
          != java.lang.Double.doubleToLongBits(
              other.getCount())) return false;
      if (java.lang.Double.doubleToLongBits(getMean())
          != java.lang.Double.doubleToLongBits(
              other.getMean())) return false;
      if (java.lang.Double.doubleToLongBits(getMedian())
          != java.lang.Double.doubleToLongBits(
              other.getMedian())) return false;
      if (java.lang.Double.doubleToLongBits(getMode())
          != java.lang.Double.doubleToLongBits(
              other.getMode())) return false;
      if (java.lang.Double.doubleToLongBits(getVariance())
          != java.lang.Double.doubleToLongBits(
              other.getVariance())) return false;
      if (java.lang.Double.doubleToLongBits(getMin())
          != java.lang.Double.doubleToLongBits(
              other.getMin())) return false;
      if (java.lang.Double.doubleToLongBits(getMax())
          != java.lang.Double.doubleToLongBits(
              other.getMax())) return false;
      if (java.lang.Double.doubleToLongBits(getRange())
          != java.lang.Double.doubleToLongBits(
              other.getRange())) return false;
      if (!internalGetMetadata().equals(
          other.internalGetMetadata())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCount()));
      hash = (37 * hash) + MEAN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMean()));
      hash = (37 * hash) + MEDIAN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMedian()));
      hash = (37 * hash) + MODE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMode()));
      hash = (37 * hash) + VARIANCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getVariance()));
      hash = (37 * hash) + MIN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMin()));
      hash = (37 * hash) + MAX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMax()));
      hash = (37 * hash) + RANGE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRange()));
      if (!internalGetMetadata().getMap().isEmpty()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMetadata().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RedvoxApi1000.SummaryStatistics parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.SummaryStatistics parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.SummaryStatistics parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RedvoxApi1000.SummaryStatistics parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RedvoxApi1000.SummaryStatistics prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message type for summary statistics
     * </pre>
     *
     * Protobuf type {@code SummaryStatistics}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SummaryStatistics)
        RedvoxApi1000.SummaryStatisticsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RedvoxApi1000.internal_static_SummaryStatistics_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 9:
            return internalGetMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 9:
            return internalGetMutableMetadata();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RedvoxApi1000.internal_static_SummaryStatistics_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RedvoxApi1000.SummaryStatistics.class, RedvoxApi1000.SummaryStatistics.Builder.class);
      }

      // Construct using RedvoxApi1000.SummaryStatistics.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        count_ = 0D;

        mean_ = 0D;

        median_ = 0D;

        mode_ = 0D;

        variance_ = 0D;

        min_ = 0D;

        max_ = 0D;

        range_ = 0D;

        internalGetMutableMetadata().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RedvoxApi1000.internal_static_SummaryStatistics_descriptor;
      }

      @java.lang.Override
      public RedvoxApi1000.SummaryStatistics getDefaultInstanceForType() {
        return RedvoxApi1000.SummaryStatistics.getDefaultInstance();
      }

      @java.lang.Override
      public RedvoxApi1000.SummaryStatistics build() {
        RedvoxApi1000.SummaryStatistics result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public RedvoxApi1000.SummaryStatistics buildPartial() {
        RedvoxApi1000.SummaryStatistics result = new RedvoxApi1000.SummaryStatistics(this);
        int from_bitField0_ = bitField0_;
        result.count_ = count_;
        result.mean_ = mean_;
        result.median_ = median_;
        result.mode_ = mode_;
        result.variance_ = variance_;
        result.min_ = min_;
        result.max_ = max_;
        result.range_ = range_;
        result.metadata_ = internalGetMetadata();
        result.metadata_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RedvoxApi1000.SummaryStatistics) {
          return mergeFrom((RedvoxApi1000.SummaryStatistics)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RedvoxApi1000.SummaryStatistics other) {
        if (other == RedvoxApi1000.SummaryStatistics.getDefaultInstance()) return this;
        if (other.getCount() != 0D) {
          setCount(other.getCount());
        }
        if (other.getMean() != 0D) {
          setMean(other.getMean());
        }
        if (other.getMedian() != 0D) {
          setMedian(other.getMedian());
        }
        if (other.getMode() != 0D) {
          setMode(other.getMode());
        }
        if (other.getVariance() != 0D) {
          setVariance(other.getVariance());
        }
        if (other.getMin() != 0D) {
          setMin(other.getMin());
        }
        if (other.getMax() != 0D) {
          setMax(other.getMax());
        }
        if (other.getRange() != 0D) {
          setRange(other.getRange());
        }
        internalGetMutableMetadata().mergeFrom(
            other.internalGetMetadata());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RedvoxApi1000.SummaryStatistics parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RedvoxApi1000.SummaryStatistics) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double count_ ;
      /**
       * <pre>
       * The total count of values included in the statistics
       * </pre>
       *
       * <code>double count = 1;</code>
       * @return The count.
       */
      public double getCount() {
        return count_;
      }
      /**
       * <pre>
       * The total count of values included in the statistics
       * </pre>
       *
       * <code>double count = 1;</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(double value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The total count of values included in the statistics
       * </pre>
       *
       * <code>double count = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        
        count_ = 0D;
        onChanged();
        return this;
      }

      private double mean_ ;
      /**
       * <pre>
       * The mean of the values
       * </pre>
       *
       * <code>double mean = 2;</code>
       * @return The mean.
       */
      public double getMean() {
        return mean_;
      }
      /**
       * <pre>
       * The mean of the values
       * </pre>
       *
       * <code>double mean = 2;</code>
       * @param value The mean to set.
       * @return This builder for chaining.
       */
      public Builder setMean(double value) {
        
        mean_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The mean of the values
       * </pre>
       *
       * <code>double mean = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMean() {
        
        mean_ = 0D;
        onChanged();
        return this;
      }

      private double median_ ;
      /**
       * <pre>
       * The median of the values
       * </pre>
       *
       * <code>double median = 3;</code>
       * @return The median.
       */
      public double getMedian() {
        return median_;
      }
      /**
       * <pre>
       * The median of the values
       * </pre>
       *
       * <code>double median = 3;</code>
       * @param value The median to set.
       * @return This builder for chaining.
       */
      public Builder setMedian(double value) {
        
        median_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The median of the values
       * </pre>
       *
       * <code>double median = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMedian() {
        
        median_ = 0D;
        onChanged();
        return this;
      }

      private double mode_ ;
      /**
       * <pre>
       * The mode of the values
       * </pre>
       *
       * <code>double mode = 4;</code>
       * @return The mode.
       */
      public double getMode() {
        return mode_;
      }
      /**
       * <pre>
       * The mode of the values
       * </pre>
       *
       * <code>double mode = 4;</code>
       * @param value The mode to set.
       * @return This builder for chaining.
       */
      public Builder setMode(double value) {
        
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The mode of the values
       * </pre>
       *
       * <code>double mode = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMode() {
        
        mode_ = 0D;
        onChanged();
        return this;
      }

      private double variance_ ;
      /**
       * <pre>
       * The variance of the values
       * </pre>
       *
       * <code>double variance = 5;</code>
       * @return The variance.
       */
      public double getVariance() {
        return variance_;
      }
      /**
       * <pre>
       * The variance of the values
       * </pre>
       *
       * <code>double variance = 5;</code>
       * @param value The variance to set.
       * @return This builder for chaining.
       */
      public Builder setVariance(double value) {
        
        variance_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The variance of the values
       * </pre>
       *
       * <code>double variance = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearVariance() {
        
        variance_ = 0D;
        onChanged();
        return this;
      }

      private double min_ ;
      /**
       * <pre>
       * The minimum value
       * </pre>
       *
       * <code>double min = 6;</code>
       * @return The min.
       */
      public double getMin() {
        return min_;
      }
      /**
       * <pre>
       * The minimum value
       * </pre>
       *
       * <code>double min = 6;</code>
       * @param value The min to set.
       * @return This builder for chaining.
       */
      public Builder setMin(double value) {
        
        min_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The minimum value
       * </pre>
       *
       * <code>double min = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearMin() {
        
        min_ = 0D;
        onChanged();
        return this;
      }

      private double max_ ;
      /**
       * <pre>
       * The maximum value
       * </pre>
       *
       * <code>double max = 7;</code>
       * @return The max.
       */
      public double getMax() {
        return max_;
      }
      /**
       * <pre>
       * The maximum value
       * </pre>
       *
       * <code>double max = 7;</code>
       * @param value The max to set.
       * @return This builder for chaining.
       */
      public Builder setMax(double value) {
        
        max_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum value
       * </pre>
       *
       * <code>double max = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearMax() {
        
        max_ = 0D;
        onChanged();
        return this;
      }

      private double range_ ;
      /**
       * <pre>
       * The range of the values
       * </pre>
       *
       * <code>double range = 8;</code>
       * @return The range.
       */
      public double getRange() {
        return range_;
      }
      /**
       * <pre>
       * The range of the values
       * </pre>
       *
       * <code>double range = 8;</code>
       * @param value The range to set.
       * @return This builder for chaining.
       */
      public Builder setRange(double value) {
        
        range_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The range of the values
       * </pre>
       *
       * <code>double range = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearRange() {
        
        range_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> metadata_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMetadata() {
        if (metadata_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        return metadata_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableMetadata() {
        onChanged();;
        if (metadata_ == null) {
          metadata_ = com.google.protobuf.MapField.newMapField(
              MetadataDefaultEntryHolder.defaultEntry);
        }
        if (!metadata_.isMutable()) {
          metadata_ = metadata_.copy();
        }
        return metadata_;
      }

      public int getMetadataCount() {
        return internalGetMetadata().getMap().size();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 9;</code>
       */

      public boolean containsMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMetadata().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMetadataMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return getMetadataMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 9;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
        return internalGetMetadata().getMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 9;</code>
       */

      public java.lang.String getMetadataOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 9;</code>
       */

      public java.lang.String getMetadataOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetMetadata().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMetadata() {
        internalGetMutableMetadata().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 9;</code>
       */

      public Builder removeMetadata(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableMetadata() {
        return internalGetMutableMetadata().getMutableMap();
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 9;</code>
       */
      public Builder putMetadata(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMetadata().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A map from string to string for including untyped metadata
       * </pre>
       *
       * <code>map&lt;string, string&gt; metadata = 9;</code>
       */

      public Builder putAllMetadata(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableMetadata().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SummaryStatistics)
    }

    // @@protoc_insertion_point(class_scope:SummaryStatistics)
    private static final RedvoxApi1000.SummaryStatistics DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RedvoxApi1000.SummaryStatistics();
    }

    public static RedvoxApi1000.SummaryStatistics getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SummaryStatistics>
        PARSER = new com.google.protobuf.AbstractParser<SummaryStatistics>() {
      @java.lang.Override
      public SummaryStatistics parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SummaryStatistics(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SummaryStatistics> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SummaryStatistics> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public RedvoxApi1000.SummaryStatistics getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RedvoxPacket1000_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RedvoxPacket1000_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RedvoxPacket1000_MetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RedvoxPacket1000_MetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MicrophoneChannel_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MicrophoneChannel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MicrophoneChannel_MetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MicrophoneChannel_MetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SingleChannel_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SingleChannel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SingleChannel_MetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SingleChannel_MetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_XyzChannel_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_XyzChannel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_XyzChannel_MetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_XyzChannel_MetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_LocationChannel_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_LocationChannel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_LocationChannel_MetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_LocationChannel_MetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ImageChannel_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ImageChannel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ImageChannel_MetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ImageChannel_MetadataEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SummaryStatistics_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SummaryStatistics_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SummaryStatistics_MetadataEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SummaryStatistics_MetadataEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031src/redvox-api-1000.proto\"\252\013\n\020RedvoxPa" +
      "cket1000\022\013\n\003api\030\001 \001(\r\022\022\n\nauth_email\030\002 \001(" +
      "\t\022\022\n\nauth_token\030\003 \001(\t\022\026\n\016firebase_token\030" +
      "\004 \001(\t\022\021\n\tdevice_id\030\005 \001(\t\022\023\n\013device_uuid\030" +
      "\006 \001(\t\022\023\n\013device_make\030\007 \001(\t\022\024\n\014device_mod" +
      "el\030\010 \001(\t\022+\n\tdevice_os\030\t \001(\0162\030.RedvoxPack" +
      "et1000.OsType\022\031\n\021device_os_version\030\n \001(\t" +
      "\022\032\n\022device_app_version\030\013 \001(\t\022\025\n\rdevice_t" +
      "emp_c\030\014 \001(\001\022\036\n\026device_battery_percent\030\r " +
      "\001(\001\0223\n\014network_type\030\016 \001(\0162\035.RedvoxPacket" +
      "1000.NetworkType\022\033\n\023network_strength_db\030" +
      "\017 \001(\001\022\025\n\ris_backfilled\030\020 \001(\010\022\022\n\nis_priva" +
      "te\030\021 \001(\010\022\030\n\020is_mic_scrambled\030\022 \001(\010\022\037\n\027un" +
      "compressed_size_bytes\030\023 \001(\001\022\035\n\025compresse" +
      "d_size_bytes\030\024 \001(\001\022\027\n\017auth_server_url\030\025 " +
      "\001(\t\022\030\n\020synch_server_url\030\026 \001(\t\022\036\n\026acquisi" +
      "tion_server_url\030\027 \001(\t\022\037\n\027packet_start_ts" +
      "_us_wall\030\030 \001(\001\022\037\n\027packet_start_ts_us_mac" +
      "h\030\031 \001(\001\022\035\n\025packet_end_ts_us_wall\030\032 \001(\001\022\035" +
      "\n\025packet_end_ts_us_mach\030\033 \001(\001\022(\n server_" +
      "acquisition_arrival_ts_us\030\034 \001(\001\022\034\n\024app_s" +
      "tart_ts_us_mach\030\035 \001(\001\022\024\n\014synch_params\030\036 " +
      "\003(\001\022\027\n\017best_latency_us\030\037 \001(\001\022\026\n\016best_off" +
      "set_us\030  \001(\001\022.\n\022microphone_channel\030! \001(\013" +
      "2\022.MicrophoneChannel\022)\n\021barometer_channe" +
      "l\030\" \001(\0132\016.SingleChannel\022*\n\020location_chan" +
      "nel\030# \001(\0132\020.LocationChannel\022*\n\025accelerom" +
      "eter_channel\030$ \001(\0132\013.XyzChannel\022&\n\021gyros" +
      "cope_channel\030% \001(\0132\013.XyzChannel\022)\n\024magne" +
      "tometer_channel\030& \001(\0132\013.XyzChannel\022%\n\rli" +
      "ght_channel\030\' \001(\0132\016.SingleChannel\022(\n\020inf" +
      "rared_channel\030( \001(\0132\016.SingleChannel\0221\n\010m" +
      "etadata\030) \003(\0132\037.RedvoxPacket1000.Metadat" +
      "aEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005" +
      "value\030\002 \001(\t:\0028\001\"/\n\013NetworkType\022\010\n\004WIFI\020\000" +
      "\022\014\n\010CELLULAR\020\001\022\010\n\004NONE\020\002\"6\n\006OsType\022\013\n\007AN" +
      "DROID\020\000\022\007\n\003IOS\020\001\022\t\n\005LINUX\020\002\022\013\n\007WINDOWS\020\003" +
      "\"\210\002\n\021MicrophoneChannel\022\032\n\022sensor_descrip" +
      "tion\030\001 \001(\t\022\032\n\022first_sample_ts_us\030\002 \001(\001\022\026" +
      "\n\016sample_rate_hz\030\003 \001(\001\022\017\n\007samples\030\004 \003(\001\022" +
      "-\n\021sample_statistics\030\005 \001(\0132\022.SummaryStat" +
      "istics\0222\n\010metadata\030\006 \003(\0132 .MicrophoneCha" +
      "nnel.MetadataEntry\032/\n\rMetadataEntry\022\013\n\003k" +
      "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\263\002\n\rSingleCh" +
      "annel\022\032\n\022sensor_description\030\001 \001(\t\022\033\n\023mea" +
      "n_sample_rate_hz\030\002 \001(\001\022\024\n\014sample_ts_us\030\003" +
      " \003(\001\022\017\n\007samples\030\004 \003(\001\0222\n\026sample_rate_sta" +
      "tistics\030\005 \001(\0132\022.SummaryStatistics\022-\n\021sam" +
      "ple_statistics\030\006 \001(\0132\022.SummaryStatistics" +
      "\022.\n\010metadata\030\007 \003(\0132\034.SingleChannel.Metad" +
      "ataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r" +
      "\n\005value\030\002 \001(\t:\0028\001\"\271\003\n\nXyzChannel\022\032\n\022sens" +
      "or_description\030\001 \001(\t\022\033\n\023mean_sample_rate" +
      "_hz\030\002 \001(\001\022\024\n\014sample_ts_us\030\003 \003(\001\022\021\n\tx_sam" +
      "ples\030\004 \003(\001\022\021\n\ty_samples\030\005 \003(\001\022\021\n\tz_sampl" +
      "es\030\006 \003(\001\0222\n\026sample_rate_statistics\030\007 \001(\013" +
      "2\022.SummaryStatistics\022/\n\023x_sample_statist" +
      "ics\030\010 \001(\0132\022.SummaryStatistics\022/\n\023y_sampl" +
      "e_statistics\030\t \001(\0132\022.SummaryStatistics\022/" +
      "\n\023z_sample_statistics\030\n \001(\0132\022.SummarySta" +
      "tistics\022+\n\010metadata\030\013 \003(\0132\031.XyzChannel.M" +
      "etadataEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001" +
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\367\006\n\017LocationChanne" +
      "l\022\032\n\022sensor_description\030\001 \001(\t\022\033\n\023mean_sa" +
      "mple_rate_hz\030\002 \001(\001\022\024\n\014sample_ts_us\030\003 \003(\001" +
      "\022\030\n\020latitude_samples\030\004 \003(\001\022\031\n\021longitude_" +
      "samples\030\005 \003(\001\022\030\n\020altitude_samples\030\006 \003(\001\022" +
      "\025\n\rspeed_samples\030\007 \003(\001\022\030\n\020accuracy_sampl" +
      "es\030\010 \003(\001\022$\n\034location_permissions_granted" +
      "\030\t \001(\010\022#\n\033location_services_requested\030\n " +
      "\001(\010\022!\n\031location_services_enabled\030\013 \001(\010\022<" +
      "\n\021location_provider\030\014 \001(\0162!.LocationChan" +
      "nel.LocationProvider\0222\n\026sample_rate_stat" +
      "istics\030\r \001(\0132\022.SummaryStatistics\0226\n\032lati" +
      "tude_sample_statistics\030\016 \001(\0132\022.SummarySt" +
      "atistics\0227\n\033longitude_sample_statistics\030" +
      "\017 \001(\0132\022.SummaryStatistics\0226\n\032altitude_sa" +
      "mple_statistics\030\020 \001(\0132\022.SummaryStatistic" +
      "s\0223\n\027speed_sample_statistics\030\021 \001(\0132\022.Sum" +
      "maryStatistics\0226\n\032accuracy_sample_statis" +
      "tics\030\022 \001(\0132\022.SummaryStatistics\0220\n\010metada" +
      "ta\030\023 \003(\0132\036.LocationChannel.MetadataEntry" +
      "\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030" +
      "\002 \001(\t:\0028\001\"<\n\020LocationProvider\022\010\n\004NONE\020\000\022" +
      "\010\n\004USER\020\001\022\007\n\003GPS\020\002\022\013\n\007NETWORK\020\003\"\202\002\n\014Imag" +
      "eChannel\022\032\n\022sensor_description\030\001 \001(\t\022\033\n\023" +
      "mean_sample_rate_hz\030\002 \001(\001\022\024\n\014sample_ts_u" +
      "s\030\003 \003(\001\022\017\n\007samples\030\004 \003(\014\0222\n\026sample_rate_" +
      "statistics\030\005 \001(\0132\022.SummaryStatistics\022-\n\010" +
      "metadata\030\006 \003(\0132\033.ImageChannel.MetadataEn" +
      "try\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val" +
      "ue\030\002 \001(\t:\0028\001\"\356\001\n\021SummaryStatistics\022\r\n\005co" +
      "unt\030\001 \001(\001\022\014\n\004mean\030\002 \001(\001\022\016\n\006median\030\003 \001(\001\022" +
      "\014\n\004mode\030\004 \001(\001\022\020\n\010variance\030\005 \001(\001\022\013\n\003min\030\006" +
      " \001(\001\022\013\n\003max\030\007 \001(\001\022\r\n\005range\030\010 \001(\001\0222\n\010meta" +
      "data\030\t \003(\0132 .SummaryStatistics.MetadataE" +
      "ntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va" +
      "lue\030\002 \001(\t:\0028\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_RedvoxPacket1000_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_RedvoxPacket1000_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RedvoxPacket1000_descriptor,
        new java.lang.String[] { "Api", "AuthEmail", "AuthToken", "FirebaseToken", "DeviceId", "DeviceUuid", "DeviceMake", "DeviceModel", "DeviceOs", "DeviceOsVersion", "DeviceAppVersion", "DeviceTempC", "DeviceBatteryPercent", "NetworkType", "NetworkStrengthDb", "IsBackfilled", "IsPrivate", "IsMicScrambled", "UncompressedSizeBytes", "CompressedSizeBytes", "AuthServerUrl", "SynchServerUrl", "AcquisitionServerUrl", "PacketStartTsUsWall", "PacketStartTsUsMach", "PacketEndTsUsWall", "PacketEndTsUsMach", "ServerAcquisitionArrivalTsUs", "AppStartTsUsMach", "SynchParams", "BestLatencyUs", "BestOffsetUs", "MicrophoneChannel", "BarometerChannel", "LocationChannel", "AccelerometerChannel", "GyroscopeChannel", "MagnetometerChannel", "LightChannel", "InfraredChannel", "Metadata", });
    internal_static_RedvoxPacket1000_MetadataEntry_descriptor =
      internal_static_RedvoxPacket1000_descriptor.getNestedTypes().get(0);
    internal_static_RedvoxPacket1000_MetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RedvoxPacket1000_MetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_MicrophoneChannel_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_MicrophoneChannel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MicrophoneChannel_descriptor,
        new java.lang.String[] { "SensorDescription", "FirstSampleTsUs", "SampleRateHz", "Samples", "SampleStatistics", "Metadata", });
    internal_static_MicrophoneChannel_MetadataEntry_descriptor =
      internal_static_MicrophoneChannel_descriptor.getNestedTypes().get(0);
    internal_static_MicrophoneChannel_MetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MicrophoneChannel_MetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_SingleChannel_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_SingleChannel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SingleChannel_descriptor,
        new java.lang.String[] { "SensorDescription", "MeanSampleRateHz", "SampleTsUs", "Samples", "SampleRateStatistics", "SampleStatistics", "Metadata", });
    internal_static_SingleChannel_MetadataEntry_descriptor =
      internal_static_SingleChannel_descriptor.getNestedTypes().get(0);
    internal_static_SingleChannel_MetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SingleChannel_MetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_XyzChannel_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_XyzChannel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_XyzChannel_descriptor,
        new java.lang.String[] { "SensorDescription", "MeanSampleRateHz", "SampleTsUs", "XSamples", "YSamples", "ZSamples", "SampleRateStatistics", "XSampleStatistics", "YSampleStatistics", "ZSampleStatistics", "Metadata", });
    internal_static_XyzChannel_MetadataEntry_descriptor =
      internal_static_XyzChannel_descriptor.getNestedTypes().get(0);
    internal_static_XyzChannel_MetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_XyzChannel_MetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_LocationChannel_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_LocationChannel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_LocationChannel_descriptor,
        new java.lang.String[] { "SensorDescription", "MeanSampleRateHz", "SampleTsUs", "LatitudeSamples", "LongitudeSamples", "AltitudeSamples", "SpeedSamples", "AccuracySamples", "LocationPermissionsGranted", "LocationServicesRequested", "LocationServicesEnabled", "LocationProvider", "SampleRateStatistics", "LatitudeSampleStatistics", "LongitudeSampleStatistics", "AltitudeSampleStatistics", "SpeedSampleStatistics", "AccuracySampleStatistics", "Metadata", });
    internal_static_LocationChannel_MetadataEntry_descriptor =
      internal_static_LocationChannel_descriptor.getNestedTypes().get(0);
    internal_static_LocationChannel_MetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_LocationChannel_MetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_ImageChannel_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_ImageChannel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ImageChannel_descriptor,
        new java.lang.String[] { "SensorDescription", "MeanSampleRateHz", "SampleTsUs", "Samples", "SampleRateStatistics", "Metadata", });
    internal_static_ImageChannel_MetadataEntry_descriptor =
      internal_static_ImageChannel_descriptor.getNestedTypes().get(0);
    internal_static_ImageChannel_MetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ImageChannel_MetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_SummaryStatistics_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_SummaryStatistics_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SummaryStatistics_descriptor,
        new java.lang.String[] { "Count", "Mean", "Median", "Mode", "Variance", "Min", "Max", "Range", "Metadata", });
    internal_static_SummaryStatistics_MetadataEntry_descriptor =
      internal_static_SummaryStatistics_descriptor.getNestedTypes().get(0);
    internal_static_SummaryStatistics_MetadataEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SummaryStatistics_MetadataEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
