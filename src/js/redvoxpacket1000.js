// source: src/redvox-api-1000.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.RedvoxPacket1000');
goog.provide('proto.RedvoxPacket1000.NetworkType');
goog.provide('proto.RedvoxPacket1000.OsType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.LocationChannel');
goog.require('proto.MicrophoneChannel');
goog.require('proto.SingleChannel');
goog.require('proto.XyzChannel');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RedvoxPacket1000 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RedvoxPacket1000.repeatedFields_, null);
};
goog.inherits(proto.RedvoxPacket1000, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RedvoxPacket1000.displayName = 'proto.RedvoxPacket1000';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RedvoxPacket1000.repeatedFields_ = [30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RedvoxPacket1000.prototype.toObject = function(opt_includeInstance) {
  return proto.RedvoxPacket1000.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RedvoxPacket1000} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RedvoxPacket1000.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authEmail: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    firebaseToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    deviceUuid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    deviceMake: jspb.Message.getFieldWithDefault(msg, 7, ""),
    deviceModel: jspb.Message.getFieldWithDefault(msg, 8, ""),
    deviceOs: jspb.Message.getFieldWithDefault(msg, 9, 0),
    deviceOsVersion: jspb.Message.getFieldWithDefault(msg, 10, ""),
    deviceAppVersion: jspb.Message.getFieldWithDefault(msg, 11, ""),
    deviceTempC: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    deviceBatteryPercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    networkType: jspb.Message.getFieldWithDefault(msg, 14, 0),
    networkStrength: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    isBackfilled: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    isPrivate: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    isMicScrambled: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    uncompressedSizeBytes: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    compressedSizeBytes: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    authServer: jspb.Message.getFieldWithDefault(msg, 21, ""),
    synchServer: jspb.Message.getFieldWithDefault(msg, 22, ""),
    acquisitionServer: jspb.Message.getFieldWithDefault(msg, 23, ""),
    packetStartTsUsWall: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0),
    packetStartTsUsMach: jspb.Message.getFloatingPointFieldWithDefault(msg, 25, 0.0),
    packetEndTsUsWall: jspb.Message.getFloatingPointFieldWithDefault(msg, 26, 0.0),
    packetEndTsUsMach: jspb.Message.getFloatingPointFieldWithDefault(msg, 27, 0.0),
    serverAcquisitionArrivalTsUs: jspb.Message.getFloatingPointFieldWithDefault(msg, 28, 0.0),
    appStartTsUsMach: jspb.Message.getFloatingPointFieldWithDefault(msg, 29, 0.0),
    synchParamsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 30)) == null ? undefined : f,
    bestLatencyUs: jspb.Message.getFloatingPointFieldWithDefault(msg, 31, 0.0),
    bestOffsetUs: jspb.Message.getFloatingPointFieldWithDefault(msg, 32, 0.0),
    microphoneChannel: (f = msg.getMicrophoneChannel()) && proto.MicrophoneChannel.toObject(includeInstance, f),
    barometerChannel: (f = msg.getBarometerChannel()) && proto.SingleChannel.toObject(includeInstance, f),
    locationChannel: (f = msg.getLocationChannel()) && proto.LocationChannel.toObject(includeInstance, f),
    accelerometerChannel: (f = msg.getAccelerometerChannel()) && proto.XyzChannel.toObject(includeInstance, f),
    gyroscopeChannel: (f = msg.getGyroscopeChannel()) && proto.XyzChannel.toObject(includeInstance, f),
    magnetometerChannel: (f = msg.getMagnetometerChannel()) && proto.XyzChannel.toObject(includeInstance, f),
    lightChannel: (f = msg.getLightChannel()) && proto.SingleChannel.toObject(includeInstance, f),
    infraredChannel: (f = msg.getInfraredChannel()) && proto.SingleChannel.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RedvoxPacket1000}
 */
proto.RedvoxPacket1000.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RedvoxPacket1000;
  return proto.RedvoxPacket1000.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RedvoxPacket1000} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RedvoxPacket1000}
 */
proto.RedvoxPacket1000.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setApi(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirebaseToken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceUuid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceMake(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceModel(value);
      break;
    case 9:
      var value = /** @type {!proto.RedvoxPacket1000.OsType} */ (reader.readEnum());
      msg.setDeviceOs(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceOsVersion(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAppVersion(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeviceTempC(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeviceBatteryPercent(value);
      break;
    case 14:
      var value = /** @type {!proto.RedvoxPacket1000.NetworkType} */ (reader.readEnum());
      msg.setNetworkType(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNetworkStrength(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBackfilled(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPrivate(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMicScrambled(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUncompressedSizeBytes(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCompressedSizeBytes(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthServer(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setSynchServer(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcquisitionServer(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketStartTsUsWall(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketStartTsUsMach(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketEndTsUsWall(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketEndTsUsMach(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setServerAcquisitionArrivalTsUs(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAppStartTsUsMach(value);
      break;
    case 30:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSynchParamsList(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBestLatencyUs(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBestOffsetUs(value);
      break;
    case 33:
      var value = new proto.MicrophoneChannel;
      reader.readMessage(value,proto.MicrophoneChannel.deserializeBinaryFromReader);
      msg.setMicrophoneChannel(value);
      break;
    case 34:
      var value = new proto.SingleChannel;
      reader.readMessage(value,proto.SingleChannel.deserializeBinaryFromReader);
      msg.setBarometerChannel(value);
      break;
    case 35:
      var value = new proto.LocationChannel;
      reader.readMessage(value,proto.LocationChannel.deserializeBinaryFromReader);
      msg.setLocationChannel(value);
      break;
    case 36:
      var value = new proto.XyzChannel;
      reader.readMessage(value,proto.XyzChannel.deserializeBinaryFromReader);
      msg.setAccelerometerChannel(value);
      break;
    case 37:
      var value = new proto.XyzChannel;
      reader.readMessage(value,proto.XyzChannel.deserializeBinaryFromReader);
      msg.setGyroscopeChannel(value);
      break;
    case 38:
      var value = new proto.XyzChannel;
      reader.readMessage(value,proto.XyzChannel.deserializeBinaryFromReader);
      msg.setMagnetometerChannel(value);
      break;
    case 39:
      var value = new proto.SingleChannel;
      reader.readMessage(value,proto.SingleChannel.deserializeBinaryFromReader);
      msg.setLightChannel(value);
      break;
    case 40:
      var value = new proto.SingleChannel;
      reader.readMessage(value,proto.SingleChannel.deserializeBinaryFromReader);
      msg.setInfraredChannel(value);
      break;
    case 41:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RedvoxPacket1000.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RedvoxPacket1000.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RedvoxPacket1000} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RedvoxPacket1000.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAuthEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFirebaseToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDeviceUuid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDeviceMake();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDeviceModel();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDeviceOs();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getDeviceOsVersion();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDeviceAppVersion();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDeviceTempC();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getDeviceBatteryPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getNetworkStrength();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getIsBackfilled();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getIsPrivate();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getIsMicScrambled();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getUncompressedSizeBytes();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getCompressedSizeBytes();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getAuthServer();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getSynchServer();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getAcquisitionServer();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getPacketStartTsUsWall();
  if (f !== 0.0) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = message.getPacketStartTsUsMach();
  if (f !== 0.0) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = message.getPacketEndTsUsWall();
  if (f !== 0.0) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = message.getPacketEndTsUsMach();
  if (f !== 0.0) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = message.getServerAcquisitionArrivalTsUs();
  if (f !== 0.0) {
    writer.writeDouble(
      28,
      f
    );
  }
  f = message.getAppStartTsUsMach();
  if (f !== 0.0) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = message.getSynchParamsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      30,
      f
    );
  }
  f = message.getBestLatencyUs();
  if (f !== 0.0) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getBestOffsetUs();
  if (f !== 0.0) {
    writer.writeDouble(
      32,
      f
    );
  }
  f = message.getMicrophoneChannel();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.MicrophoneChannel.serializeBinaryToWriter
    );
  }
  f = message.getBarometerChannel();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.SingleChannel.serializeBinaryToWriter
    );
  }
  f = message.getLocationChannel();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.LocationChannel.serializeBinaryToWriter
    );
  }
  f = message.getAccelerometerChannel();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.XyzChannel.serializeBinaryToWriter
    );
  }
  f = message.getGyroscopeChannel();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.XyzChannel.serializeBinaryToWriter
    );
  }
  f = message.getMagnetometerChannel();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.XyzChannel.serializeBinaryToWriter
    );
  }
  f = message.getLightChannel();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.SingleChannel.serializeBinaryToWriter
    );
  }
  f = message.getInfraredChannel();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.SingleChannel.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(41, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.RedvoxPacket1000.NetworkType = {
  WIFI: 0,
  CELLULAR: 1,
  NONE: 2
};

/**
 * @enum {number}
 */
proto.RedvoxPacket1000.OsType = {
  ANDROID: 0,
  IOS: 1,
  LINUX: 2,
  WINDOWS: 3
};

/**
 * optional uint32 api = 1;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getApi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setApi = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string auth_email = 2;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getAuthEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setAuthEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string auth_token = 3;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setAuthToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string firebase_token = 4;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getFirebaseToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setFirebaseToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string device_id = 5;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string device_uuid = 6;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getDeviceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string device_make = 7;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getDeviceMake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceMake = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string device_model = 8;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getDeviceModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceModel = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional OsType device_os = 9;
 * @return {!proto.RedvoxPacket1000.OsType}
 */
proto.RedvoxPacket1000.prototype.getDeviceOs = function() {
  return /** @type {!proto.RedvoxPacket1000.OsType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.RedvoxPacket1000.OsType} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceOs = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string device_os_version = 10;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getDeviceOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceOsVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string device_app_version = 11;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getDeviceAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceAppVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional double device_temp_c = 12;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getDeviceTempC = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceTempC = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double device_battery_percent = 13;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getDeviceBatteryPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setDeviceBatteryPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional NetworkType network_type = 14;
 * @return {!proto.RedvoxPacket1000.NetworkType}
 */
proto.RedvoxPacket1000.prototype.getNetworkType = function() {
  return /** @type {!proto.RedvoxPacket1000.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.RedvoxPacket1000.NetworkType} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional double network_strength = 15;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getNetworkStrength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setNetworkStrength = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional bool is_backfilled = 16;
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.getIsBackfilled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setIsBackfilled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool is_private = 17;
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.getIsPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setIsPrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool is_mic_scrambled = 18;
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.getIsMicScrambled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setIsMicScrambled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional double uncompressed_size_bytes = 19;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getUncompressedSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setUncompressedSizeBytes = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double compressed_size_bytes = 20;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getCompressedSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setCompressedSizeBytes = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional string auth_server = 21;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getAuthServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setAuthServer = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string synch_server = 22;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getSynchServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setSynchServer = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string acquisition_server = 23;
 * @return {string}
 */
proto.RedvoxPacket1000.prototype.getAcquisitionServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setAcquisitionServer = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional double packet_start_ts_us_wall = 24;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getPacketStartTsUsWall = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setPacketStartTsUsWall = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional double packet_start_ts_us_mach = 25;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getPacketStartTsUsMach = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setPacketStartTsUsMach = function(value) {
  return jspb.Message.setProto3FloatField(this, 25, value);
};


/**
 * optional double packet_end_ts_us_wall = 26;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getPacketEndTsUsWall = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setPacketEndTsUsWall = function(value) {
  return jspb.Message.setProto3FloatField(this, 26, value);
};


/**
 * optional double packet_end_ts_us_mach = 27;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getPacketEndTsUsMach = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setPacketEndTsUsMach = function(value) {
  return jspb.Message.setProto3FloatField(this, 27, value);
};


/**
 * optional double server_acquisition_arrival_ts_us = 28;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getServerAcquisitionArrivalTsUs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setServerAcquisitionArrivalTsUs = function(value) {
  return jspb.Message.setProto3FloatField(this, 28, value);
};


/**
 * optional double app_start_ts_us_mach = 29;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getAppStartTsUsMach = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setAppStartTsUsMach = function(value) {
  return jspb.Message.setProto3FloatField(this, 29, value);
};


/**
 * repeated double synch_params = 30;
 * @return {!Array<number>}
 */
proto.RedvoxPacket1000.prototype.getSynchParamsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 30));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setSynchParamsList = function(value) {
  return jspb.Message.setField(this, 30, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.addSynchParams = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 30, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearSynchParamsList = function() {
  return this.setSynchParamsList([]);
};


/**
 * optional double best_latency_us = 31;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getBestLatencyUs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setBestLatencyUs = function(value) {
  return jspb.Message.setProto3FloatField(this, 31, value);
};


/**
 * optional double best_offset_us = 32;
 * @return {number}
 */
proto.RedvoxPacket1000.prototype.getBestOffsetUs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.setBestOffsetUs = function(value) {
  return jspb.Message.setProto3FloatField(this, 32, value);
};


/**
 * optional MicrophoneChannel microphone_channel = 33;
 * @return {?proto.MicrophoneChannel}
 */
proto.RedvoxPacket1000.prototype.getMicrophoneChannel = function() {
  return /** @type{?proto.MicrophoneChannel} */ (
    jspb.Message.getWrapperField(this, proto.MicrophoneChannel, 33));
};


/**
 * @param {?proto.MicrophoneChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setMicrophoneChannel = function(value) {
  return jspb.Message.setWrapperField(this, 33, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearMicrophoneChannel = function() {
  return this.setMicrophoneChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasMicrophoneChannel = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional SingleChannel barometer_channel = 34;
 * @return {?proto.SingleChannel}
 */
proto.RedvoxPacket1000.prototype.getBarometerChannel = function() {
  return /** @type{?proto.SingleChannel} */ (
    jspb.Message.getWrapperField(this, proto.SingleChannel, 34));
};


/**
 * @param {?proto.SingleChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setBarometerChannel = function(value) {
  return jspb.Message.setWrapperField(this, 34, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearBarometerChannel = function() {
  return this.setBarometerChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasBarometerChannel = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional LocationChannel location_channel = 35;
 * @return {?proto.LocationChannel}
 */
proto.RedvoxPacket1000.prototype.getLocationChannel = function() {
  return /** @type{?proto.LocationChannel} */ (
    jspb.Message.getWrapperField(this, proto.LocationChannel, 35));
};


/**
 * @param {?proto.LocationChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setLocationChannel = function(value) {
  return jspb.Message.setWrapperField(this, 35, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearLocationChannel = function() {
  return this.setLocationChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasLocationChannel = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional XyzChannel accelerometer_channel = 36;
 * @return {?proto.XyzChannel}
 */
proto.RedvoxPacket1000.prototype.getAccelerometerChannel = function() {
  return /** @type{?proto.XyzChannel} */ (
    jspb.Message.getWrapperField(this, proto.XyzChannel, 36));
};


/**
 * @param {?proto.XyzChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setAccelerometerChannel = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearAccelerometerChannel = function() {
  return this.setAccelerometerChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasAccelerometerChannel = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional XyzChannel gyroscope_channel = 37;
 * @return {?proto.XyzChannel}
 */
proto.RedvoxPacket1000.prototype.getGyroscopeChannel = function() {
  return /** @type{?proto.XyzChannel} */ (
    jspb.Message.getWrapperField(this, proto.XyzChannel, 37));
};


/**
 * @param {?proto.XyzChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setGyroscopeChannel = function(value) {
  return jspb.Message.setWrapperField(this, 37, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearGyroscopeChannel = function() {
  return this.setGyroscopeChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasGyroscopeChannel = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional XyzChannel magnetometer_channel = 38;
 * @return {?proto.XyzChannel}
 */
proto.RedvoxPacket1000.prototype.getMagnetometerChannel = function() {
  return /** @type{?proto.XyzChannel} */ (
    jspb.Message.getWrapperField(this, proto.XyzChannel, 38));
};


/**
 * @param {?proto.XyzChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setMagnetometerChannel = function(value) {
  return jspb.Message.setWrapperField(this, 38, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearMagnetometerChannel = function() {
  return this.setMagnetometerChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasMagnetometerChannel = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional SingleChannel light_channel = 39;
 * @return {?proto.SingleChannel}
 */
proto.RedvoxPacket1000.prototype.getLightChannel = function() {
  return /** @type{?proto.SingleChannel} */ (
    jspb.Message.getWrapperField(this, proto.SingleChannel, 39));
};


/**
 * @param {?proto.SingleChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setLightChannel = function(value) {
  return jspb.Message.setWrapperField(this, 39, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearLightChannel = function() {
  return this.setLightChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasLightChannel = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional SingleChannel infrared_channel = 40;
 * @return {?proto.SingleChannel}
 */
proto.RedvoxPacket1000.prototype.getInfraredChannel = function() {
  return /** @type{?proto.SingleChannel} */ (
    jspb.Message.getWrapperField(this, proto.SingleChannel, 40));
};


/**
 * @param {?proto.SingleChannel|undefined} value
 * @return {!proto.RedvoxPacket1000} returns this
*/
proto.RedvoxPacket1000.prototype.setInfraredChannel = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearInfraredChannel = function() {
  return this.setInfraredChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RedvoxPacket1000.prototype.hasInfraredChannel = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * map<string, string> metadata = 41;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.RedvoxPacket1000.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 41, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.RedvoxPacket1000} returns this
 */
proto.RedvoxPacket1000.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


