/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SummaryStatistics');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SummaryStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SummaryStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SummaryStatistics.displayName = 'proto.SummaryStatistics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SummaryStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.SummaryStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SummaryStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SummaryStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    mean: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    median: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    mode: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    variance: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    min: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    max: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    range: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SummaryStatistics}
 */
proto.SummaryStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SummaryStatistics;
  return proto.SummaryStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SummaryStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SummaryStatistics}
 */
proto.SummaryStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMean(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMedian(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVariance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRange(value);
      break;
    case 9:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SummaryStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SummaryStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SummaryStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SummaryStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMean();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMedian();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getVariance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getRange();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional double count = 1;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getCount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setCount = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double mean = 2;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getMean = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setMean = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double median = 3;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getMedian = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setMedian = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double mode = 4;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getMode = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setMode = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double variance = 5;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getVariance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setVariance = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double min = 6;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getMin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setMin = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double max = 7;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setMax = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double range = 8;
 * @return {number}
 */
proto.SummaryStatistics.prototype.getRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.SummaryStatistics.prototype.setRange = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * map<string, string> metadata = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.SummaryStatistics.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.SummaryStatistics.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


