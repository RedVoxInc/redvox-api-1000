# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer as google___protobuf___internal___containers___RepeatedScalarFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Mapping as typing___Mapping,
    MutableMapping as typing___MutableMapping,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    Union as typing___Union,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int
builtin___str = str
if sys.version_info < (3,):
    builtin___buffer = buffer
    builtin___unicode = unicode


class RedvoxPacketM(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Unit(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'RedvoxPacketM.Unit': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['RedvoxPacketM.Unit']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.Unit']]: ...
        METERS_PER_SECOND_SQUARED = typing___cast('RedvoxPacketM.Unit', 0)
        KILOPASCAL = typing___cast('RedvoxPacketM.Unit', 1)
        RADIANS_PER_SECOND = typing___cast('RedvoxPacketM.Unit', 2)
        DECIMAL_DEGREES = typing___cast('RedvoxPacketM.Unit', 3)
        METERS = typing___cast('RedvoxPacketM.Unit', 4)
        METERS_PER_SECOND = typing___cast('RedvoxPacketM.Unit', 5)
        MICROTESLA = typing___cast('RedvoxPacketM.Unit', 6)
        LSB_PLUS_MINUS_COUNTS = typing___cast('RedvoxPacketM.Unit', 7)
        MICROSECONDS_SINCE_UNIX_EPOCH = typing___cast('RedvoxPacketM.Unit', 8)
        DECIBEL = typing___cast('RedvoxPacketM.Unit', 9)
        DEGREES_CELSIUS = typing___cast('RedvoxPacketM.Unit', 10)
        BYTE = typing___cast('RedvoxPacketM.Unit', 11)
        PERCENTAGE = typing___cast('RedvoxPacketM.Unit', 12)
        RADIANS = typing___cast('RedvoxPacketM.Unit', 13)
        MICROAMPERES = typing___cast('RedvoxPacketM.Unit', 14)
        CENTIMETERS = typing___cast('RedvoxPacketM.Unit', 15)
        NORMALIZED_COUNTS = typing___cast('RedvoxPacketM.Unit', 16)
    METERS_PER_SECOND_SQUARED = typing___cast('RedvoxPacketM.Unit', 0)
    KILOPASCAL = typing___cast('RedvoxPacketM.Unit', 1)
    RADIANS_PER_SECOND = typing___cast('RedvoxPacketM.Unit', 2)
    DECIMAL_DEGREES = typing___cast('RedvoxPacketM.Unit', 3)
    METERS = typing___cast('RedvoxPacketM.Unit', 4)
    METERS_PER_SECOND = typing___cast('RedvoxPacketM.Unit', 5)
    MICROTESLA = typing___cast('RedvoxPacketM.Unit', 6)
    LSB_PLUS_MINUS_COUNTS = typing___cast('RedvoxPacketM.Unit', 7)
    MICROSECONDS_SINCE_UNIX_EPOCH = typing___cast('RedvoxPacketM.Unit', 8)
    DECIBEL = typing___cast('RedvoxPacketM.Unit', 9)
    DEGREES_CELSIUS = typing___cast('RedvoxPacketM.Unit', 10)
    BYTE = typing___cast('RedvoxPacketM.Unit', 11)
    PERCENTAGE = typing___cast('RedvoxPacketM.Unit', 12)
    RADIANS = typing___cast('RedvoxPacketM.Unit', 13)
    MICROAMPERES = typing___cast('RedvoxPacketM.Unit', 14)
    CENTIMETERS = typing___cast('RedvoxPacketM.Unit', 15)
    NORMALIZED_COUNTS = typing___cast('RedvoxPacketM.Unit', 16)

    class MetadataEntry(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        key = ... # type: typing___Text
        value = ... # type: typing___Text

        def __init__(self,
            *,
            key : typing___Optional[typing___Text] = None,
            value : typing___Optional[typing___Text] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.MetadataEntry: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.MetadataEntry: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class UserInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.UserInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.UserInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        auth_email = ... # type: typing___Text
        auth_token = ... # type: typing___Text
        firebase_token = ... # type: typing___Text

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            auth_email : typing___Optional[typing___Text] = None,
            auth_token : typing___Optional[typing___Text] = None,
            firebase_token : typing___Optional[typing___Text] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.UserInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.UserInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",u"auth_token",u"firebase_token",u"metadata"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",b"auth_email",u"auth_token",b"auth_token",u"firebase_token",b"firebase_token",u"metadata",b"metadata"]) -> None: ...

    class StationInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class OsType(builtin___int):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            @classmethod
            def Name(cls, number: builtin___int) -> builtin___str: ...
            @classmethod
            def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.OsType': ...
            @classmethod
            def keys(cls) -> typing___List[builtin___str]: ...
            @classmethod
            def values(cls) -> typing___List['RedvoxPacketM.StationInformation.OsType']: ...
            @classmethod
            def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.OsType']]: ...
            ANDROID = typing___cast('RedvoxPacketM.StationInformation.OsType', 0)
            IOS = typing___cast('RedvoxPacketM.StationInformation.OsType', 1)
            LINUX = typing___cast('RedvoxPacketM.StationInformation.OsType', 2)
            WINDOWS = typing___cast('RedvoxPacketM.StationInformation.OsType', 3)
        ANDROID = typing___cast('RedvoxPacketM.StationInformation.OsType', 0)
        IOS = typing___cast('RedvoxPacketM.StationInformation.OsType', 1)
        LINUX = typing___cast('RedvoxPacketM.StationInformation.OsType', 2)
        WINDOWS = typing___cast('RedvoxPacketM.StationInformation.OsType', 3)

        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.StationInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.StationInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        class StationMetrics(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class NetworkType(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.StationMetrics.NetworkType': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.StationMetrics.NetworkType']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.StationMetrics.NetworkType']]: ...
                NO_NETWORK = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.NetworkType', 0)
                WIFI = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.NetworkType', 1)
                CELLULAR = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.NetworkType', 2)
            NO_NETWORK = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.NetworkType', 0)
            WIFI = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.NetworkType', 1)
            CELLULAR = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.NetworkType', 2)

            class WifiWakeLock(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock']]: ...
                NONE = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 0)
                HIGH_PERF = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 1)
                LOW_LATENCY = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 2)
                OTHER = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 3)
            NONE = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 0)
            HIGH_PERF = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 1)
            LOW_LATENCY = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 2)
            OTHER = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock', 3)

            class CellServiceState(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.StationMetrics.CellServiceState': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.StationMetrics.CellServiceState']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.StationMetrics.CellServiceState']]: ...
                UNKNOWN = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 0)
                EMERGENCY = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 1)
                NOMINAL = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 2)
                OUT_OF_SERVICE = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 3)
                POWER_OFF = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 4)
            UNKNOWN = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 0)
            EMERGENCY = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 1)
            NOMINAL = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 2)
            OUT_OF_SERVICE = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 3)
            POWER_OFF = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.CellServiceState', 4)

            class PowerState(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.StationMetrics.PowerState': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.StationMetrics.PowerState']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.StationMetrics.PowerState']]: ...
                UNPLUGGED = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.PowerState', 0)
                CHARGING = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.PowerState', 1)
                CHARGED = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.PowerState', 2)
            UNPLUGGED = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.PowerState', 0)
            CHARGING = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.PowerState', 1)
            CHARGED = typing___cast('RedvoxPacketM.StationInformation.StationMetrics.PowerState', 2)

            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.StationInformation.StationMetrics.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.StationInformation.StationMetrics.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            network_type = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[RedvoxPacketM.StationInformation.StationMetrics.NetworkType]
            cell_service_state = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[RedvoxPacketM.StationInformation.StationMetrics.CellServiceState]
            power_state = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[RedvoxPacketM.StationInformation.StationMetrics.PowerState]
            wifi_wake_lock = ... # type: RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock

            @property
            def station_information_timestamps(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def network_strength(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def temperature(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def battery(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def battery_current(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def available_ram(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def available_disk(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def cpu_utilization(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                station_information_timestamps : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                network_type : typing___Optional[typing___Iterable[RedvoxPacketM.StationInformation.StationMetrics.NetworkType]] = None,
                cell_service_state : typing___Optional[typing___Iterable[RedvoxPacketM.StationInformation.StationMetrics.CellServiceState]] = None,
                network_strength : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                temperature : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                battery : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                battery_current : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                available_ram : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                available_disk : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                cpu_utilization : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                power_state : typing___Optional[typing___Iterable[RedvoxPacketM.StationInformation.StationMetrics.PowerState]] = None,
                wifi_wake_lock : typing___Optional[RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.StationInformation.StationMetrics: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.StationInformation.StationMetrics: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"available_disk",u"available_ram",u"battery",u"battery_current",u"cpu_utilization",u"network_strength",u"station_information_timestamps",u"temperature"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"available_disk",u"available_ram",u"battery",u"battery_current",u"cell_service_state",u"cpu_utilization",u"metadata",u"network_strength",u"network_type",u"power_state",u"station_information_timestamps",u"temperature",u"wifi_wake_lock"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"available_disk",b"available_disk",u"available_ram",b"available_ram",u"battery",b"battery",u"battery_current",b"battery_current",u"cpu_utilization",b"cpu_utilization",u"network_strength",b"network_strength",u"station_information_timestamps",b"station_information_timestamps",u"temperature",b"temperature"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"available_disk",b"available_disk",u"available_ram",b"available_ram",u"battery",b"battery",u"battery_current",b"battery_current",u"cell_service_state",b"cell_service_state",u"cpu_utilization",b"cpu_utilization",u"metadata",b"metadata",u"network_strength",b"network_strength",u"network_type",b"network_type",u"power_state",b"power_state",u"station_information_timestamps",b"station_information_timestamps",u"temperature",b"temperature",u"wifi_wake_lock",b"wifi_wake_lock"]) -> None: ...

        class AppSettings(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class FftOverlap(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.AppSettings.FftOverlap': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.AppSettings.FftOverlap']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.AppSettings.FftOverlap']]: ...
                PERCENT_25 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.FftOverlap', 0)
                PERCENT_50 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.FftOverlap', 1)
                PERCENT_75 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.FftOverlap', 2)
            PERCENT_25 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.FftOverlap', 0)
            PERCENT_50 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.FftOverlap', 1)
            PERCENT_75 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.FftOverlap', 2)

            class AudioSamplingRate(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate']]: ...
                HZ_80 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 0)
                HZ_800 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 1)
                HZ_8000 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 2)
                HZ_16000 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 3)
                HZ_48000 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 4)
            HZ_80 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 0)
            HZ_800 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 1)
            HZ_8000 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 2)
            HZ_16000 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 3)
            HZ_48000 = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate', 4)

            class AudioSourceTuning(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning']]: ...
                INFRASOUND_TUNING = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning', 0)
                LOW_AUDIO_TUNING = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning', 1)
                AUDIO_TUNING = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning', 2)
            INFRASOUND_TUNING = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning', 0)
            LOW_AUDIO_TUNING = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning', 1)
            AUDIO_TUNING = typing___cast('RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning', 2)

            class InputSensor(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.StationInformation.AppSettings.InputSensor': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.StationInformation.AppSettings.InputSensor']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.StationInformation.AppSettings.InputSensor']]: ...
                ACCELEROMETER = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 0)
                AMBIENT_TEMPERATURE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 1)
                AUDIO = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 2)
                COMPRESSED_AUDIO = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 3)
                GRAVITY = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 4)
                GYROSCOPE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 5)
                IMAGE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 6)
                LIGHT = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 7)
                LINEAR_ACCELERATION = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 8)
                LOCATION = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 9)
                MAGNETOMETER = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 10)
                ORIENTATION = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 11)
                PRESSURE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 12)
                PROXIMITY = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 13)
                RELATIVE_HUMIDITY = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 14)
                ROTATION_VECTOR = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 15)
            ACCELEROMETER = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 0)
            AMBIENT_TEMPERATURE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 1)
            AUDIO = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 2)
            COMPRESSED_AUDIO = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 3)
            GRAVITY = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 4)
            GYROSCOPE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 5)
            IMAGE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 6)
            LIGHT = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 7)
            LINEAR_ACCELERATION = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 8)
            LOCATION = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 9)
            MAGNETOMETER = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 10)
            ORIENTATION = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 11)
            PRESSURE = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 12)
            PROXIMITY = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 13)
            RELATIVE_HUMIDITY = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 14)
            ROTATION_VECTOR = typing___cast('RedvoxPacketM.StationInformation.AppSettings.InputSensor', 15)

            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.StationInformation.AppSettings.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.StationInformation.AppSettings.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            audio_sampling_rate = ... # type: RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate
            audio_source_tuning = ... # type: RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning
            additional_input_sensors = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[RedvoxPacketM.StationInformation.AppSettings.InputSensor]
            automatically_record = ... # type: builtin___bool
            launch_at_power_up = ... # type: builtin___bool
            station_id = ... # type: typing___Text
            push_to_server = ... # type: builtin___bool
            publish_data_as_private = ... # type: builtin___bool
            scramble_audio_data = ... # type: builtin___bool
            provide_backfill = ... # type: builtin___bool
            remove_sensor_dc_offset = ... # type: builtin___bool
            fft_overlap = ... # type: RedvoxPacketM.StationInformation.AppSettings.FftOverlap
            use_custom_time_sync_server = ... # type: builtin___bool
            time_sync_server_url = ... # type: typing___Text
            use_custom_data_server = ... # type: builtin___bool
            data_server_url = ... # type: typing___Text
            auto_delete_data_files = ... # type: builtin___bool
            storage_space_allowance = ... # type: builtin___float
            use_sd_card_for_data_storage = ... # type: builtin___bool
            use_location_services = ... # type: builtin___bool
            use_latitude = ... # type: builtin___float
            use_longitude = ... # type: builtin___float
            use_altitude = ... # type: builtin___float

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                audio_sampling_rate : typing___Optional[RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate] = None,
                audio_source_tuning : typing___Optional[RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning] = None,
                additional_input_sensors : typing___Optional[typing___Iterable[RedvoxPacketM.StationInformation.AppSettings.InputSensor]] = None,
                automatically_record : typing___Optional[builtin___bool] = None,
                launch_at_power_up : typing___Optional[builtin___bool] = None,
                station_id : typing___Optional[typing___Text] = None,
                push_to_server : typing___Optional[builtin___bool] = None,
                publish_data_as_private : typing___Optional[builtin___bool] = None,
                scramble_audio_data : typing___Optional[builtin___bool] = None,
                provide_backfill : typing___Optional[builtin___bool] = None,
                remove_sensor_dc_offset : typing___Optional[builtin___bool] = None,
                fft_overlap : typing___Optional[RedvoxPacketM.StationInformation.AppSettings.FftOverlap] = None,
                use_custom_time_sync_server : typing___Optional[builtin___bool] = None,
                time_sync_server_url : typing___Optional[typing___Text] = None,
                use_custom_data_server : typing___Optional[builtin___bool] = None,
                data_server_url : typing___Optional[typing___Text] = None,
                auto_delete_data_files : typing___Optional[builtin___bool] = None,
                storage_space_allowance : typing___Optional[builtin___float] = None,
                use_sd_card_for_data_storage : typing___Optional[builtin___bool] = None,
                use_location_services : typing___Optional[builtin___bool] = None,
                use_latitude : typing___Optional[builtin___float] = None,
                use_longitude : typing___Optional[builtin___float] = None,
                use_altitude : typing___Optional[builtin___float] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.StationInformation.AppSettings: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.StationInformation.AppSettings: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"additional_input_sensors",u"audio_sampling_rate",u"audio_source_tuning",u"auto_delete_data_files",u"automatically_record",u"data_server_url",u"fft_overlap",u"launch_at_power_up",u"metadata",u"provide_backfill",u"publish_data_as_private",u"push_to_server",u"remove_sensor_dc_offset",u"scramble_audio_data",u"station_id",u"storage_space_allowance",u"time_sync_server_url",u"use_altitude",u"use_custom_data_server",u"use_custom_time_sync_server",u"use_latitude",u"use_location_services",u"use_longitude",u"use_sd_card_for_data_storage"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"additional_input_sensors",b"additional_input_sensors",u"audio_sampling_rate",b"audio_sampling_rate",u"audio_source_tuning",b"audio_source_tuning",u"auto_delete_data_files",b"auto_delete_data_files",u"automatically_record",b"automatically_record",u"data_server_url",b"data_server_url",u"fft_overlap",b"fft_overlap",u"launch_at_power_up",b"launch_at_power_up",u"metadata",b"metadata",u"provide_backfill",b"provide_backfill",u"publish_data_as_private",b"publish_data_as_private",u"push_to_server",b"push_to_server",u"remove_sensor_dc_offset",b"remove_sensor_dc_offset",u"scramble_audio_data",b"scramble_audio_data",u"station_id",b"station_id",u"storage_space_allowance",b"storage_space_allowance",u"time_sync_server_url",b"time_sync_server_url",u"use_altitude",b"use_altitude",u"use_custom_data_server",b"use_custom_data_server",u"use_custom_time_sync_server",b"use_custom_time_sync_server",u"use_latitude",b"use_latitude",u"use_location_services",b"use_location_services",u"use_longitude",b"use_longitude",u"use_sd_card_for_data_storage",b"use_sd_card_for_data_storage"]) -> None: ...

        id = ... # type: typing___Text
        uuid = ... # type: typing___Text
        make = ... # type: typing___Text
        model = ... # type: typing___Text
        os = ... # type: RedvoxPacketM.StationInformation.OsType
        os_version = ... # type: typing___Text
        app_version = ... # type: typing___Text

        @property
        def app_settings(self) -> RedvoxPacketM.StationInformation.AppSettings: ...

        @property
        def station_metrics(self) -> RedvoxPacketM.StationInformation.StationMetrics: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            id : typing___Optional[typing___Text] = None,
            uuid : typing___Optional[typing___Text] = None,
            make : typing___Optional[typing___Text] = None,
            model : typing___Optional[typing___Text] = None,
            os : typing___Optional[RedvoxPacketM.StationInformation.OsType] = None,
            os_version : typing___Optional[typing___Text] = None,
            app_version : typing___Optional[typing___Text] = None,
            app_settings : typing___Optional[RedvoxPacketM.StationInformation.AppSettings] = None,
            station_metrics : typing___Optional[RedvoxPacketM.StationInformation.StationMetrics] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.StationInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.StationInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"app_settings",u"station_metrics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"app_settings",u"app_version",u"id",u"make",u"metadata",u"model",u"os",u"os_version",u"station_metrics",u"uuid"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"app_settings",b"app_settings",u"station_metrics",b"station_metrics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"app_settings",b"app_settings",u"app_version",b"app_version",u"id",b"id",u"make",b"make",u"metadata",b"metadata",u"model",b"model",u"os",b"os",u"os_version",b"os_version",u"station_metrics",b"station_metrics",u"uuid",b"uuid"]) -> None: ...

    class PacketInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.PacketInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.PacketInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        is_backfilled = ... # type: builtin___bool
        is_private = ... # type: builtin___bool

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            is_backfilled : typing___Optional[builtin___bool] = None,
            is_private : typing___Optional[builtin___bool] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.PacketInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.PacketInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"is_backfilled",u"is_private",u"metadata"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"is_backfilled",b"is_backfilled",u"is_private",b"is_private",u"metadata",b"metadata"]) -> None: ...

    class TimingInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class TimingScoreMethod(builtin___int):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            @classmethod
            def Name(cls, number: builtin___int) -> builtin___str: ...
            @classmethod
            def Value(cls, name: builtin___str) -> 'RedvoxPacketM.TimingInformation.TimingScoreMethod': ...
            @classmethod
            def keys(cls) -> typing___List[builtin___str]: ...
            @classmethod
            def values(cls) -> typing___List['RedvoxPacketM.TimingInformation.TimingScoreMethod']: ...
            @classmethod
            def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.TimingInformation.TimingScoreMethod']]: ...
            UNKNOWN = typing___cast('RedvoxPacketM.TimingInformation.TimingScoreMethod', 0)
        UNKNOWN = typing___cast('RedvoxPacketM.TimingInformation.TimingScoreMethod', 0)

        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.TimingInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.TimingInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        class SynchExchange(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.TimingInformation.SynchExchange.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.TimingInformation.SynchExchange.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            a1 = ... # type: builtin___float
            a2 = ... # type: builtin___float
            a3 = ... # type: builtin___float
            b1 = ... # type: builtin___float
            b2 = ... # type: builtin___float
            b3 = ... # type: builtin___float
            unit = ... # type: RedvoxPacketM.Unit

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                a1 : typing___Optional[builtin___float] = None,
                a2 : typing___Optional[builtin___float] = None,
                a3 : typing___Optional[builtin___float] = None,
                b1 : typing___Optional[builtin___float] = None,
                b2 : typing___Optional[builtin___float] = None,
                b3 : typing___Optional[builtin___float] = None,
                unit : typing___Optional[RedvoxPacketM.Unit] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.TimingInformation.SynchExchange: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.TimingInformation.SynchExchange: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"a1",u"a2",u"a3",u"b1",u"b2",u"b3",u"metadata",u"unit"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"a1",b"a1",u"a2",b"a2",u"a3",b"a3",u"b1",b"b1",u"b2",b"b2",u"b3",b"b3",u"metadata",b"metadata",u"unit",b"unit"]) -> None: ...

        packet_start_os_timestamp = ... # type: builtin___float
        packet_start_mach_timestamp = ... # type: builtin___float
        packet_end_os_timestamp = ... # type: builtin___float
        packet_end_mach_timestamp = ... # type: builtin___float
        server_acquisition_arrival_timestamp = ... # type: builtin___float
        app_start_mach_timestamp = ... # type: builtin___float
        best_latency = ... # type: builtin___float
        best_offset = ... # type: builtin___float
        score = ... # type: builtin___float
        score_method = ... # type: RedvoxPacketM.TimingInformation.TimingScoreMethod
        unit = ... # type: RedvoxPacketM.Unit

        @property
        def synch_exchanges(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[RedvoxPacketM.TimingInformation.SynchExchange]: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            packet_start_os_timestamp : typing___Optional[builtin___float] = None,
            packet_start_mach_timestamp : typing___Optional[builtin___float] = None,
            packet_end_os_timestamp : typing___Optional[builtin___float] = None,
            packet_end_mach_timestamp : typing___Optional[builtin___float] = None,
            server_acquisition_arrival_timestamp : typing___Optional[builtin___float] = None,
            app_start_mach_timestamp : typing___Optional[builtin___float] = None,
            synch_exchanges : typing___Optional[typing___Iterable[RedvoxPacketM.TimingInformation.SynchExchange]] = None,
            best_latency : typing___Optional[builtin___float] = None,
            best_offset : typing___Optional[builtin___float] = None,
            score : typing___Optional[builtin___float] = None,
            score_method : typing___Optional[RedvoxPacketM.TimingInformation.TimingScoreMethod] = None,
            unit : typing___Optional[RedvoxPacketM.Unit] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.TimingInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.TimingInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"app_start_mach_timestamp",u"best_latency",u"best_offset",u"metadata",u"packet_end_mach_timestamp",u"packet_end_os_timestamp",u"packet_start_mach_timestamp",u"packet_start_os_timestamp",u"score",u"score_method",u"server_acquisition_arrival_timestamp",u"synch_exchanges",u"unit"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"app_start_mach_timestamp",b"app_start_mach_timestamp",u"best_latency",b"best_latency",u"best_offset",b"best_offset",u"metadata",b"metadata",u"packet_end_mach_timestamp",b"packet_end_mach_timestamp",u"packet_end_os_timestamp",b"packet_end_os_timestamp",u"packet_start_mach_timestamp",b"packet_start_mach_timestamp",u"packet_start_os_timestamp",b"packet_start_os_timestamp",u"score",b"score",u"score_method",b"score_method",u"server_acquisition_arrival_timestamp",b"server_acquisition_arrival_timestamp",u"synch_exchanges",b"synch_exchanges",u"unit",b"unit"]) -> None: ...

    class ServerInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.ServerInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.ServerInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        auth_server_url = ... # type: typing___Text
        synch_server_url = ... # type: typing___Text
        acquisition_server_url = ... # type: typing___Text

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            auth_server_url : typing___Optional[typing___Text] = None,
            synch_server_url : typing___Optional[typing___Text] = None,
            acquisition_server_url : typing___Optional[typing___Text] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.ServerInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.ServerInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"acquisition_server_url",u"auth_server_url",u"metadata",u"synch_server_url"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"acquisition_server_url",b"acquisition_server_url",u"auth_server_url",b"auth_server_url",u"metadata",b"metadata",u"synch_server_url",b"synch_server_url"]) -> None: ...

    class Sensors(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        class Audio(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Audio.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Audio.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text
            first_sample_timestamp = ... # type: builtin___float
            sample_rate = ... # type: builtin___float
            is_scrambled = ... # type: builtin___bool

            @property
            def samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                first_sample_timestamp : typing___Optional[builtin___float] = None,
                sample_rate : typing___Optional[builtin___float] = None,
                is_scrambled : typing___Optional[builtin___bool] = None,
                samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Audio: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Audio: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"first_sample_timestamp",u"is_scrambled",u"metadata",u"sample_rate",u"samples",u"sensor_description"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"samples",b"samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"first_sample_timestamp",b"first_sample_timestamp",u"is_scrambled",b"is_scrambled",u"metadata",b"metadata",u"sample_rate",b"sample_rate",u"samples",b"samples",u"sensor_description",b"sensor_description"]) -> None: ...

        class CompressedAudio(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class AudioCodec(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.Sensors.CompressedAudio.AudioCodec': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.Sensors.CompressedAudio.AudioCodec']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.Sensors.CompressedAudio.AudioCodec']]: ...
                TODO = typing___cast('RedvoxPacketM.Sensors.CompressedAudio.AudioCodec', 0)
            TODO = typing___cast('RedvoxPacketM.Sensors.CompressedAudio.AudioCodec', 0)

            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.CompressedAudio.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.CompressedAudio.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text
            first_sample_timestamp = ... # type: builtin___float
            sample_rate = ... # type: builtin___float
            is_scrambled = ... # type: builtin___bool
            audio_bytes = ... # type: builtin___bytes
            audio_codec = ... # type: RedvoxPacketM.Sensors.CompressedAudio.AudioCodec

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                first_sample_timestamp : typing___Optional[builtin___float] = None,
                sample_rate : typing___Optional[builtin___float] = None,
                is_scrambled : typing___Optional[builtin___bool] = None,
                audio_bytes : typing___Optional[builtin___bytes] = None,
                audio_codec : typing___Optional[RedvoxPacketM.Sensors.CompressedAudio.AudioCodec] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.CompressedAudio: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.CompressedAudio: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"audio_bytes",u"audio_codec",u"first_sample_timestamp",u"is_scrambled",u"metadata",u"sample_rate",u"sensor_description"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"audio_bytes",b"audio_bytes",u"audio_codec",b"audio_codec",u"first_sample_timestamp",b"first_sample_timestamp",u"is_scrambled",b"is_scrambled",u"metadata",b"metadata",u"sample_rate",b"sample_rate",u"sensor_description",b"sensor_description"]) -> None: ...

        class Single(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Single.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Single.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text

            @property
            def timestamps(self) -> RedvoxPacketM.TimingPayload: ...

            @property
            def samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                timestamps : typing___Optional[RedvoxPacketM.TimingPayload] = None,
                samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Single: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Single: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"samples",u"timestamps"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",u"samples",u"sensor_description",u"timestamps"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"samples",b"samples",u"timestamps",b"timestamps"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",b"metadata",u"samples",b"samples",u"sensor_description",b"sensor_description",u"timestamps",b"timestamps"]) -> None: ...

        class Location(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class LocationScoreMethod(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.Sensors.Location.LocationScoreMethod': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.Sensors.Location.LocationScoreMethod']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.Sensors.Location.LocationScoreMethod']]: ...
                TODO = typing___cast('RedvoxPacketM.Sensors.Location.LocationScoreMethod', 0)
            TODO = typing___cast('RedvoxPacketM.Sensors.Location.LocationScoreMethod', 0)

            class LocationProvider(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.Sensors.Location.LocationProvider': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.Sensors.Location.LocationProvider']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.Sensors.Location.LocationProvider']]: ...
                NONE = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 0)
                USER = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 1)
                GPS = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 2)
                NETWORK = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 3)
            NONE = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 0)
            USER = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 1)
            GPS = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 2)
            NETWORK = typing___cast('RedvoxPacketM.Sensors.Location.LocationProvider', 3)

            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Location.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Location.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text
            best_latitude = ... # type: builtin___float
            best_longitude = ... # type: builtin___float
            best_altitude = ... # type: builtin___float
            best_speed = ... # type: builtin___float
            best_bearing = ... # type: builtin___float
            score = ... # type: builtin___float
            location_score_method = ... # type: RedvoxPacketM.Sensors.Location.LocationScoreMethod
            location_permissions_granted = ... # type: builtin___bool
            location_services_requested = ... # type: builtin___bool
            location_services_enabled = ... # type: builtin___bool
            location_provider = ... # type: RedvoxPacketM.Sensors.Location.LocationProvider

            @property
            def timestamps(self) -> RedvoxPacketM.TimingPayload: ...

            @property
            def latitude_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def longitude_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def altitude_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def speed_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def bearing_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def horizontal_accuracy_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def vertical_accuracy_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def speed_accuracy_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def bearing_accuracy_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                timestamps : typing___Optional[RedvoxPacketM.TimingPayload] = None,
                latitude_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                longitude_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                altitude_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                speed_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                bearing_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                horizontal_accuracy_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                vertical_accuracy_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                speed_accuracy_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                bearing_accuracy_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                best_latitude : typing___Optional[builtin___float] = None,
                best_longitude : typing___Optional[builtin___float] = None,
                best_altitude : typing___Optional[builtin___float] = None,
                best_speed : typing___Optional[builtin___float] = None,
                best_bearing : typing___Optional[builtin___float] = None,
                score : typing___Optional[builtin___float] = None,
                location_score_method : typing___Optional[RedvoxPacketM.Sensors.Location.LocationScoreMethod] = None,
                location_permissions_granted : typing___Optional[builtin___bool] = None,
                location_services_requested : typing___Optional[builtin___bool] = None,
                location_services_enabled : typing___Optional[builtin___bool] = None,
                location_provider : typing___Optional[RedvoxPacketM.Sensors.Location.LocationProvider] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Location: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Location: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"altitude_samples",u"bearing_accuracy_samples",u"bearing_samples",u"horizontal_accuracy_samples",u"latitude_samples",u"longitude_samples",u"speed_accuracy_samples",u"speed_samples",u"timestamps",u"vertical_accuracy_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"altitude_samples",u"bearing_accuracy_samples",u"bearing_samples",u"best_altitude",u"best_bearing",u"best_latitude",u"best_longitude",u"best_speed",u"horizontal_accuracy_samples",u"latitude_samples",u"location_permissions_granted",u"location_provider",u"location_score_method",u"location_services_enabled",u"location_services_requested",u"longitude_samples",u"metadata",u"score",u"sensor_description",u"speed_accuracy_samples",u"speed_samples",u"timestamps",u"vertical_accuracy_samples"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"altitude_samples",b"altitude_samples",u"bearing_accuracy_samples",b"bearing_accuracy_samples",u"bearing_samples",b"bearing_samples",u"horizontal_accuracy_samples",b"horizontal_accuracy_samples",u"latitude_samples",b"latitude_samples",u"longitude_samples",b"longitude_samples",u"speed_accuracy_samples",b"speed_accuracy_samples",u"speed_samples",b"speed_samples",u"timestamps",b"timestamps",u"vertical_accuracy_samples",b"vertical_accuracy_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"altitude_samples",b"altitude_samples",u"bearing_accuracy_samples",b"bearing_accuracy_samples",u"bearing_samples",b"bearing_samples",u"best_altitude",b"best_altitude",u"best_bearing",b"best_bearing",u"best_latitude",b"best_latitude",u"best_longitude",b"best_longitude",u"best_speed",b"best_speed",u"horizontal_accuracy_samples",b"horizontal_accuracy_samples",u"latitude_samples",b"latitude_samples",u"location_permissions_granted",b"location_permissions_granted",u"location_provider",b"location_provider",u"location_score_method",b"location_score_method",u"location_services_enabled",b"location_services_enabled",u"location_services_requested",b"location_services_requested",u"longitude_samples",b"longitude_samples",u"metadata",b"metadata",u"score",b"score",u"sensor_description",b"sensor_description",u"speed_accuracy_samples",b"speed_accuracy_samples",u"speed_samples",b"speed_samples",u"timestamps",b"timestamps",u"vertical_accuracy_samples",b"vertical_accuracy_samples"]) -> None: ...

        class Xyz(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Xyz.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Xyz.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text

            @property
            def timestamps(self) -> RedvoxPacketM.TimingPayload: ...

            @property
            def x_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def y_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def z_samples(self) -> RedvoxPacketM.SamplePayload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                timestamps : typing___Optional[RedvoxPacketM.TimingPayload] = None,
                x_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                y_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                z_samples : typing___Optional[RedvoxPacketM.SamplePayload] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.Xyz: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.Xyz: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"timestamps",u"x_samples",u"y_samples",u"z_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",u"sensor_description",u"timestamps",u"x_samples",u"y_samples",u"z_samples"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"timestamps",b"timestamps",u"x_samples",b"x_samples",u"y_samples",b"y_samples",u"z_samples",b"z_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",b"metadata",u"sensor_description",b"sensor_description",u"timestamps",b"timestamps",u"x_samples",b"x_samples",u"y_samples",b"y_samples",u"z_samples",b"z_samples"]) -> None: ...

        class ImageChannel(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class ImageCodec(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacketM.Sensors.ImageChannel.ImageCodec': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacketM.Sensors.ImageChannel.ImageCodec']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacketM.Sensors.ImageChannel.ImageCodec']]: ...
                PNG = typing___cast('RedvoxPacketM.Sensors.ImageChannel.ImageCodec', 0)
                JPG = typing___cast('RedvoxPacketM.Sensors.ImageChannel.ImageCodec', 1)
                BMP = typing___cast('RedvoxPacketM.Sensors.ImageChannel.ImageCodec', 2)
            PNG = typing___cast('RedvoxPacketM.Sensors.ImageChannel.ImageCodec', 0)
            JPG = typing___cast('RedvoxPacketM.Sensors.ImageChannel.ImageCodec', 1)
            BMP = typing___cast('RedvoxPacketM.Sensors.ImageChannel.ImageCodec', 2)

            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.ImageChannel.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.ImageChannel.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text
            samples = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[builtin___bytes]
            image_codec = ... # type: RedvoxPacketM.Sensors.ImageChannel.ImageCodec

            @property
            def timestamps(self) -> RedvoxPacketM.TimingPayload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                timestamps : typing___Optional[RedvoxPacketM.TimingPayload] = None,
                samples : typing___Optional[typing___Iterable[builtin___bytes]] = None,
                image_codec : typing___Optional[RedvoxPacketM.Sensors.ImageChannel.ImageCodec] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors.ImageChannel: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors.ImageChannel: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"timestamps"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"image_codec",u"metadata",u"samples",u"sensor_description",u"timestamps"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"timestamps",b"timestamps"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"image_codec",b"image_codec",u"metadata",b"metadata",u"samples",b"samples",u"sensor_description",b"sensor_description",u"timestamps",b"timestamps"]) -> None: ...


        @property
        def accelerometer(self) -> RedvoxPacketM.Sensors.Xyz: ...

        @property
        def ambient_temperature(self) -> RedvoxPacketM.Sensors.Single: ...

        @property
        def audio(self) -> RedvoxPacketM.Sensors.Audio: ...

        @property
        def compressed_audio(self) -> RedvoxPacketM.Sensors.CompressedAudio: ...

        @property
        def gravity(self) -> RedvoxPacketM.Sensors.Xyz: ...

        @property
        def gyroscope(self) -> RedvoxPacketM.Sensors.Xyz: ...

        @property
        def image(self) -> RedvoxPacketM.Sensors.ImageChannel: ...

        @property
        def light(self) -> RedvoxPacketM.Sensors.Single: ...

        @property
        def linear_acceleration(self) -> RedvoxPacketM.Sensors.Xyz: ...

        @property
        def location(self) -> RedvoxPacketM.Sensors.Location: ...

        @property
        def magnetometer(self) -> RedvoxPacketM.Sensors.Xyz: ...

        @property
        def orientation(self) -> RedvoxPacketM.Sensors.Xyz: ...

        @property
        def pressure(self) -> RedvoxPacketM.Sensors.Single: ...

        @property
        def proximity(self) -> RedvoxPacketM.Sensors.Single: ...

        @property
        def relative_humidity(self) -> RedvoxPacketM.Sensors.Single: ...

        @property
        def rotation_vector(self) -> RedvoxPacketM.Sensors.Xyz: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            accelerometer : typing___Optional[RedvoxPacketM.Sensors.Xyz] = None,
            ambient_temperature : typing___Optional[RedvoxPacketM.Sensors.Single] = None,
            audio : typing___Optional[RedvoxPacketM.Sensors.Audio] = None,
            compressed_audio : typing___Optional[RedvoxPacketM.Sensors.CompressedAudio] = None,
            gravity : typing___Optional[RedvoxPacketM.Sensors.Xyz] = None,
            gyroscope : typing___Optional[RedvoxPacketM.Sensors.Xyz] = None,
            image : typing___Optional[RedvoxPacketM.Sensors.ImageChannel] = None,
            light : typing___Optional[RedvoxPacketM.Sensors.Single] = None,
            linear_acceleration : typing___Optional[RedvoxPacketM.Sensors.Xyz] = None,
            location : typing___Optional[RedvoxPacketM.Sensors.Location] = None,
            magnetometer : typing___Optional[RedvoxPacketM.Sensors.Xyz] = None,
            orientation : typing___Optional[RedvoxPacketM.Sensors.Xyz] = None,
            pressure : typing___Optional[RedvoxPacketM.Sensors.Single] = None,
            proximity : typing___Optional[RedvoxPacketM.Sensors.Single] = None,
            relative_humidity : typing___Optional[RedvoxPacketM.Sensors.Single] = None,
            rotation_vector : typing___Optional[RedvoxPacketM.Sensors.Xyz] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.Sensors: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.Sensors: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"accelerometer",u"ambient_temperature",u"audio",u"compressed_audio",u"gravity",u"gyroscope",u"image",u"light",u"linear_acceleration",u"location",u"magnetometer",u"orientation",u"pressure",u"proximity",u"relative_humidity",u"rotation_vector"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"accelerometer",u"ambient_temperature",u"audio",u"compressed_audio",u"gravity",u"gyroscope",u"image",u"light",u"linear_acceleration",u"location",u"magnetometer",u"metadata",u"orientation",u"pressure",u"proximity",u"relative_humidity",u"rotation_vector"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"accelerometer",b"accelerometer",u"ambient_temperature",b"ambient_temperature",u"audio",b"audio",u"compressed_audio",b"compressed_audio",u"gravity",b"gravity",u"gyroscope",b"gyroscope",u"image",b"image",u"light",b"light",u"linear_acceleration",b"linear_acceleration",u"location",b"location",u"magnetometer",b"magnetometer",u"orientation",b"orientation",u"pressure",b"pressure",u"proximity",b"proximity",u"relative_humidity",b"relative_humidity",u"rotation_vector",b"rotation_vector"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"accelerometer",b"accelerometer",u"ambient_temperature",b"ambient_temperature",u"audio",b"audio",u"compressed_audio",b"compressed_audio",u"gravity",b"gravity",u"gyroscope",b"gyroscope",u"image",b"image",u"light",b"light",u"linear_acceleration",b"linear_acceleration",u"location",b"location",u"magnetometer",b"magnetometer",u"metadata",b"metadata",u"orientation",b"orientation",u"pressure",b"pressure",u"proximity",b"proximity",u"relative_humidity",b"relative_humidity",u"rotation_vector",b"rotation_vector"]) -> None: ...

    class SamplePayload(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.SamplePayload.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.SamplePayload.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        unit = ... # type: RedvoxPacketM.Unit
        values = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[builtin___float]

        @property
        def value_statistics(self) -> RedvoxPacketM.SummaryStatistics: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            unit : typing___Optional[RedvoxPacketM.Unit] = None,
            values : typing___Optional[typing___Iterable[builtin___float]] = None,
            value_statistics : typing___Optional[RedvoxPacketM.SummaryStatistics] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.SamplePayload: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.SamplePayload: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"value_statistics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"metadata",u"unit",u"value_statistics",u"values"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"value_statistics",b"value_statistics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"metadata",b"metadata",u"unit",b"unit",u"value_statistics",b"value_statistics",u"values",b"values"]) -> None: ...

    class TimingPayload(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.TimingPayload.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.TimingPayload.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        unit = ... # type: RedvoxPacketM.Unit
        values = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[builtin___float]
        mean_sample_rate = ... # type: builtin___float
        stdev_sample_rate = ... # type: builtin___float

        @property
        def value_statistics(self) -> RedvoxPacketM.SummaryStatistics: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            unit : typing___Optional[RedvoxPacketM.Unit] = None,
            values : typing___Optional[typing___Iterable[builtin___float]] = None,
            value_statistics : typing___Optional[RedvoxPacketM.SummaryStatistics] = None,
            mean_sample_rate : typing___Optional[builtin___float] = None,
            stdev_sample_rate : typing___Optional[builtin___float] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.TimingPayload: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.TimingPayload: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"value_statistics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"mean_sample_rate",u"metadata",u"stdev_sample_rate",u"unit",u"value_statistics",u"values"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"value_statistics",b"value_statistics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"mean_sample_rate",b"mean_sample_rate",u"metadata",b"metadata",u"stdev_sample_rate",b"stdev_sample_rate",u"unit",b"unit",u"value_statistics",b"value_statistics",u"values",b"values"]) -> None: ...

    class SummaryStatistics(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.SummaryStatistics.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.SummaryStatistics.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        count = ... # type: builtin___float
        mean = ... # type: builtin___float
        median = ... # type: builtin___float
        mode = ... # type: builtin___float
        variance = ... # type: builtin___float
        min = ... # type: builtin___float
        max = ... # type: builtin___float
        range = ... # type: builtin___float

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            count : typing___Optional[builtin___float] = None,
            mean : typing___Optional[builtin___float] = None,
            median : typing___Optional[builtin___float] = None,
            mode : typing___Optional[builtin___float] = None,
            variance : typing___Optional[builtin___float] = None,
            min : typing___Optional[builtin___float] = None,
            max : typing___Optional[builtin___float] = None,
            range : typing___Optional[builtin___float] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacketM.SummaryStatistics: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM.SummaryStatistics: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"count",u"max",u"mean",u"median",u"metadata",u"min",u"mode",u"range",u"variance"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"count",b"count",u"max",b"max",u"mean",b"mean",u"median",b"median",u"metadata",b"metadata",u"min",b"min",u"mode",b"mode",u"range",b"range",u"variance",b"variance"]) -> None: ...

    api = ... # type: builtin___float

    @property
    def user_information(self) -> RedvoxPacketM.UserInformation: ...

    @property
    def station_information(self) -> RedvoxPacketM.StationInformation: ...

    @property
    def packet_information(self) -> RedvoxPacketM.PacketInformation: ...

    @property
    def timing_information(self) -> RedvoxPacketM.TimingInformation: ...

    @property
    def server_information(self) -> RedvoxPacketM.ServerInformation: ...

    @property
    def sensors(self) -> RedvoxPacketM.Sensors: ...

    @property
    def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

    def __init__(self,
        *,
        api : typing___Optional[builtin___float] = None,
        user_information : typing___Optional[RedvoxPacketM.UserInformation] = None,
        station_information : typing___Optional[RedvoxPacketM.StationInformation] = None,
        packet_information : typing___Optional[RedvoxPacketM.PacketInformation] = None,
        timing_information : typing___Optional[RedvoxPacketM.TimingInformation] = None,
        server_information : typing___Optional[RedvoxPacketM.ServerInformation] = None,
        sensors : typing___Optional[RedvoxPacketM.Sensors] = None,
        metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> RedvoxPacketM: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacketM: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"packet_information",u"sensors",u"server_information",u"station_information",u"timing_information",u"user_information"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"api",u"metadata",u"packet_information",u"sensors",u"server_information",u"station_information",u"timing_information",u"user_information"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"packet_information",b"packet_information",u"sensors",b"sensors",u"server_information",b"server_information",u"station_information",b"station_information",u"timing_information",b"timing_information",u"user_information",b"user_information"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"api",b"api",u"metadata",b"metadata",u"packet_information",b"packet_information",u"sensors",b"sensors",u"server_information",b"server_information",u"station_information",b"station_information",u"timing_information",b"timing_information",u"user_information",b"user_information"]) -> None: ...

class EncryptedRedvoxPacket1000(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Header(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        station_id = ... # type: typing___Text
        station_uuid = ... # type: typing___Text
        auth_token = ... # type: typing___Text
        auth_email = ... # type: typing___Text

        def __init__(self,
            *,
            station_id : typing___Optional[typing___Text] = None,
            station_uuid : typing___Optional[typing___Text] = None,
            auth_token : typing___Optional[typing___Text] = None,
            auth_email : typing___Optional[typing___Text] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> EncryptedRedvoxPacket1000.Header: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> EncryptedRedvoxPacket1000.Header: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",u"auth_token",u"station_id",u"station_uuid"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",b"auth_email",u"auth_token",b"auth_token",u"station_id",b"station_id",u"station_uuid",b"station_uuid"]) -> None: ...

    header = ... # type: builtin___bytes
    packet = ... # type: builtin___bytes

    def __init__(self,
        *,
        header : typing___Optional[builtin___bytes] = None,
        packet : typing___Optional[builtin___bytes] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> EncryptedRedvoxPacket1000: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> EncryptedRedvoxPacket1000: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"header",u"packet"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"header",b"header",u"packet",b"packet"]) -> None: ...

class AcquisitionRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    payload = ... # type: builtin___bytes
    is_encrypted = ... # type: builtin___bool
    checksum = ... # type: builtin___int

    def __init__(self,
        *,
        payload : typing___Optional[builtin___bytes] = None,
        is_encrypted : typing___Optional[builtin___bool] = None,
        checksum : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> AcquisitionRequest: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> AcquisitionRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",u"is_encrypted",u"payload"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",b"checksum",u"is_encrypted",b"is_encrypted",u"payload",b"payload"]) -> None: ...

class AcquisitionResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class ResponseType(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'AcquisitionResponse.ResponseType': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['AcquisitionResponse.ResponseType']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'AcquisitionResponse.ResponseType']]: ...
        OK = typing___cast('AcquisitionResponse.ResponseType', 0)
        AUTH_ERROR = typing___cast('AcquisitionResponse.ResponseType', 1)
        DATA_ERROR = typing___cast('AcquisitionResponse.ResponseType', 2)
        OTHER_ERROR = typing___cast('AcquisitionResponse.ResponseType', 3)
    OK = typing___cast('AcquisitionResponse.ResponseType', 0)
    AUTH_ERROR = typing___cast('AcquisitionResponse.ResponseType', 1)
    DATA_ERROR = typing___cast('AcquisitionResponse.ResponseType', 2)
    OTHER_ERROR = typing___cast('AcquisitionResponse.ResponseType', 3)

    response_type = ... # type: AcquisitionResponse.ResponseType
    checksum = ... # type: builtin___int
    details = ... # type: typing___Text
    resend = ... # type: builtin___bool

    def __init__(self,
        *,
        response_type : typing___Optional[AcquisitionResponse.ResponseType] = None,
        checksum : typing___Optional[builtin___int] = None,
        details : typing___Optional[typing___Text] = None,
        resend : typing___Optional[builtin___bool] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> AcquisitionResponse: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> AcquisitionResponse: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",u"details",u"resend",u"response_type"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",b"checksum",u"details",b"details",u"resend",b"resend",u"response_type",b"response_type"]) -> None: ...

class SynchRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    station_id = ... # type: typing___Text
    station_uuid = ... # type: typing___Text
    seq_id = ... # type: builtin___int
    sub_seq_id = ... # type: builtin___int

    def __init__(self,
        *,
        station_id : typing___Optional[typing___Text] = None,
        station_uuid : typing___Optional[typing___Text] = None,
        seq_id : typing___Optional[builtin___int] = None,
        sub_seq_id : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> SynchRequest: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> SynchRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"seq_id",u"station_id",u"station_uuid",u"sub_seq_id"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"seq_id",b"seq_id",u"station_id",b"station_id",u"station_uuid",b"station_uuid",u"sub_seq_id",b"sub_seq_id"]) -> None: ...

class SynchResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    station_id = ... # type: typing___Text
    station_uuid = ... # type: typing___Text
    seq_id = ... # type: builtin___int
    sub_seq_id = ... # type: builtin___int
    recv_ts_us = ... # type: builtin___int
    send_ts_us = ... # type: builtin___int

    def __init__(self,
        *,
        station_id : typing___Optional[typing___Text] = None,
        station_uuid : typing___Optional[typing___Text] = None,
        seq_id : typing___Optional[builtin___int] = None,
        sub_seq_id : typing___Optional[builtin___int] = None,
        recv_ts_us : typing___Optional[builtin___int] = None,
        send_ts_us : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> SynchResponse: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> SynchResponse: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"recv_ts_us",u"send_ts_us",u"seq_id",u"station_id",u"station_uuid",u"sub_seq_id"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"recv_ts_us",b"recv_ts_us",u"send_ts_us",b"send_ts_us",u"seq_id",b"seq_id",u"station_id",b"station_id",u"station_uuid",b"station_uuid",u"sub_seq_id",b"sub_seq_id"]) -> None: ...
