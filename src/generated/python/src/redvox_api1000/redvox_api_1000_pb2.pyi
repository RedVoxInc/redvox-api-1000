# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer as google___protobuf___internal___containers___RepeatedScalarFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Mapping as typing___Mapping,
    MutableMapping as typing___MutableMapping,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    Union as typing___Union,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int
builtin___str = str
if sys.version_info < (3,):
    builtin___buffer = buffer
    builtin___unicode = unicode


class RedvoxPacket1000(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Unit(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'RedvoxPacket1000.Unit': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['RedvoxPacket1000.Unit']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacket1000.Unit']]: ...
        METERS_PER_SECOND_SQUARED = typing___cast('RedvoxPacket1000.Unit', 0)
        KILOPASCAL = typing___cast('RedvoxPacket1000.Unit', 1)
        RADIANS_PER_SECOND = typing___cast('RedvoxPacket1000.Unit', 2)
        DECIMAL_DEGREES = typing___cast('RedvoxPacket1000.Unit', 3)
        METERS = typing___cast('RedvoxPacket1000.Unit', 4)
        METERS_PER_SECOND = typing___cast('RedvoxPacket1000.Unit', 5)
        MICROTESLA = typing___cast('RedvoxPacket1000.Unit', 6)
        LSB_PLUS_MINUS_COUNTS = typing___cast('RedvoxPacket1000.Unit', 7)
        MICROSECONDS_SINCE_UNIX_EPOCH = typing___cast('RedvoxPacket1000.Unit', 8)
        DECIBEL = typing___cast('RedvoxPacket1000.Unit', 9)
        DEGREES_CELSIUS = typing___cast('RedvoxPacket1000.Unit', 10)
        BYTE = typing___cast('RedvoxPacket1000.Unit', 11)
    METERS_PER_SECOND_SQUARED = typing___cast('RedvoxPacket1000.Unit', 0)
    KILOPASCAL = typing___cast('RedvoxPacket1000.Unit', 1)
    RADIANS_PER_SECOND = typing___cast('RedvoxPacket1000.Unit', 2)
    DECIMAL_DEGREES = typing___cast('RedvoxPacket1000.Unit', 3)
    METERS = typing___cast('RedvoxPacket1000.Unit', 4)
    METERS_PER_SECOND = typing___cast('RedvoxPacket1000.Unit', 5)
    MICROTESLA = typing___cast('RedvoxPacket1000.Unit', 6)
    LSB_PLUS_MINUS_COUNTS = typing___cast('RedvoxPacket1000.Unit', 7)
    MICROSECONDS_SINCE_UNIX_EPOCH = typing___cast('RedvoxPacket1000.Unit', 8)
    DECIBEL = typing___cast('RedvoxPacket1000.Unit', 9)
    DEGREES_CELSIUS = typing___cast('RedvoxPacket1000.Unit', 10)
    BYTE = typing___cast('RedvoxPacket1000.Unit', 11)

    class MetadataEntry(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        key = ... # type: typing___Text
        value = ... # type: typing___Text

        def __init__(self,
            *,
            key : typing___Optional[typing___Text] = None,
            value : typing___Optional[typing___Text] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.MetadataEntry: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.MetadataEntry: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class UserInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.UserInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.UserInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        auth_email = ... # type: typing___Text
        auth_token = ... # type: typing___Text
        firebase_token = ... # type: typing___Text

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            auth_email : typing___Optional[typing___Text] = None,
            auth_token : typing___Optional[typing___Text] = None,
            firebase_token : typing___Optional[typing___Text] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.UserInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.UserInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",u"auth_token",u"firebase_token",u"metadata"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",b"auth_email",u"auth_token",b"auth_token",u"firebase_token",b"firebase_token",u"metadata",b"metadata"]) -> None: ...

    class StationInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class NetworkType(builtin___int):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            @classmethod
            def Name(cls, number: builtin___int) -> builtin___str: ...
            @classmethod
            def Value(cls, name: builtin___str) -> 'RedvoxPacket1000.StationInformation.NetworkType': ...
            @classmethod
            def keys(cls) -> typing___List[builtin___str]: ...
            @classmethod
            def values(cls) -> typing___List['RedvoxPacket1000.StationInformation.NetworkType']: ...
            @classmethod
            def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacket1000.StationInformation.NetworkType']]: ...
            WIFI = typing___cast('RedvoxPacket1000.StationInformation.NetworkType', 0)
            CELLULAR = typing___cast('RedvoxPacket1000.StationInformation.NetworkType', 1)
            NONE = typing___cast('RedvoxPacket1000.StationInformation.NetworkType', 2)
        WIFI = typing___cast('RedvoxPacket1000.StationInformation.NetworkType', 0)
        CELLULAR = typing___cast('RedvoxPacket1000.StationInformation.NetworkType', 1)
        NONE = typing___cast('RedvoxPacket1000.StationInformation.NetworkType', 2)

        class OsType(builtin___int):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            @classmethod
            def Name(cls, number: builtin___int) -> builtin___str: ...
            @classmethod
            def Value(cls, name: builtin___str) -> 'RedvoxPacket1000.StationInformation.OsType': ...
            @classmethod
            def keys(cls) -> typing___List[builtin___str]: ...
            @classmethod
            def values(cls) -> typing___List['RedvoxPacket1000.StationInformation.OsType']: ...
            @classmethod
            def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacket1000.StationInformation.OsType']]: ...
            ANDROID = typing___cast('RedvoxPacket1000.StationInformation.OsType', 0)
            IOS = typing___cast('RedvoxPacket1000.StationInformation.OsType', 1)
            LINUX = typing___cast('RedvoxPacket1000.StationInformation.OsType', 2)
            WINDOWS = typing___cast('RedvoxPacket1000.StationInformation.OsType', 3)
        ANDROID = typing___cast('RedvoxPacket1000.StationInformation.OsType', 0)
        IOS = typing___cast('RedvoxPacket1000.StationInformation.OsType', 1)
        LINUX = typing___cast('RedvoxPacket1000.StationInformation.OsType', 2)
        WINDOWS = typing___cast('RedvoxPacket1000.StationInformation.OsType', 3)

        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.StationInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.StationInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        class AppSettings(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class AudioSamplingRate(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate']]: ...
                HZ_80 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 0)
                HZ_800 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 1)
                HZ_8000 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 2)
                HZ_16000 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 3)
                HZ_48000 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 4)
            HZ_80 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 0)
            HZ_800 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 1)
            HZ_8000 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 2)
            HZ_16000 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 3)
            HZ_48000 = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate', 4)

            class AudioSourceTuning(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning']]: ...
                INFRASOUND = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning', 0)
                LOW_AUDIO = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning', 1)
                AUDIO = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning', 2)
            INFRASOUND = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning', 0)
            LOW_AUDIO = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning', 1)
            AUDIO = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning', 2)

            class InputSensor(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacket1000.StationInformation.AppSettings.InputSensor': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacket1000.StationInformation.AppSettings.InputSensor']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacket1000.StationInformation.AppSettings.InputSensor']]: ...
                BAROMETER = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 0)
                ACCELEROMETER = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 1)
                ACCELEROMETER_FAST = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 2)
                MAGNETOMETER = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 3)
                MAGNETOMETER_FAST = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 4)
                GYROSCOPE = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 5)
                GYROSCOPE_FAST = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 6)
                LUMINOSITY = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 7)
            BAROMETER = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 0)
            ACCELEROMETER = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 1)
            ACCELEROMETER_FAST = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 2)
            MAGNETOMETER = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 3)
            MAGNETOMETER_FAST = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 4)
            GYROSCOPE = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 5)
            GYROSCOPE_FAST = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 6)
            LUMINOSITY = typing___cast('RedvoxPacket1000.StationInformation.AppSettings.InputSensor', 7)

            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.StationInformation.AppSettings.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.StationInformation.AppSettings.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            audio_sampling_rate_hz = ... # type: RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate
            audio_source_tuning = ... # type: RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning
            additional_input_sensors = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[RedvoxPacket1000.StationInformation.AppSettings.InputSensor]
            automatically_record = ... # type: builtin___bool
            launch_at_power_up = ... # type: builtin___bool
            redvox_id = ... # type: typing___Text
            push_to_server = ... # type: builtin___bool
            publish_data_as_private = ... # type: builtin___bool
            scramble_voice_data = ... # type: builtin___bool
            provide_backfill = ... # type: builtin___bool
            use_custom_time_sync_server = ... # type: builtin___bool
            time_sync_server_url = ... # type: typing___Text
            use_custom_data_server = ... # type: builtin___bool
            data_server_url = ... # type: typing___Text
            auto_delete_data_files = ... # type: builtin___bool
            storage_space_allowance = ... # type: builtin___float
            use_sd_card_for_data_storage = ... # type: builtin___bool
            use_location_services = ... # type: builtin___bool
            use_latitude = ... # type: builtin___float
            use_longitude = ... # type: builtin___float

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                audio_sampling_rate_hz : typing___Optional[RedvoxPacket1000.StationInformation.AppSettings.AudioSamplingRate] = None,
                audio_source_tuning : typing___Optional[RedvoxPacket1000.StationInformation.AppSettings.AudioSourceTuning] = None,
                additional_input_sensors : typing___Optional[typing___Iterable[RedvoxPacket1000.StationInformation.AppSettings.InputSensor]] = None,
                automatically_record : typing___Optional[builtin___bool] = None,
                launch_at_power_up : typing___Optional[builtin___bool] = None,
                redvox_id : typing___Optional[typing___Text] = None,
                push_to_server : typing___Optional[builtin___bool] = None,
                publish_data_as_private : typing___Optional[builtin___bool] = None,
                scramble_voice_data : typing___Optional[builtin___bool] = None,
                provide_backfill : typing___Optional[builtin___bool] = None,
                use_custom_time_sync_server : typing___Optional[builtin___bool] = None,
                time_sync_server_url : typing___Optional[typing___Text] = None,
                use_custom_data_server : typing___Optional[builtin___bool] = None,
                data_server_url : typing___Optional[typing___Text] = None,
                auto_delete_data_files : typing___Optional[builtin___bool] = None,
                storage_space_allowance : typing___Optional[builtin___float] = None,
                use_sd_card_for_data_storage : typing___Optional[builtin___bool] = None,
                use_location_services : typing___Optional[builtin___bool] = None,
                use_latitude : typing___Optional[builtin___float] = None,
                use_longitude : typing___Optional[builtin___float] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.StationInformation.AppSettings: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.StationInformation.AppSettings: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"additional_input_sensors",u"audio_sampling_rate_hz",u"audio_source_tuning",u"auto_delete_data_files",u"automatically_record",u"data_server_url",u"launch_at_power_up",u"metadata",u"provide_backfill",u"publish_data_as_private",u"push_to_server",u"redvox_id",u"scramble_voice_data",u"storage_space_allowance",u"time_sync_server_url",u"use_custom_data_server",u"use_custom_time_sync_server",u"use_latitude",u"use_location_services",u"use_longitude",u"use_sd_card_for_data_storage"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"additional_input_sensors",b"additional_input_sensors",u"audio_sampling_rate_hz",b"audio_sampling_rate_hz",u"audio_source_tuning",b"audio_source_tuning",u"auto_delete_data_files",b"auto_delete_data_files",u"automatically_record",b"automatically_record",u"data_server_url",b"data_server_url",u"launch_at_power_up",b"launch_at_power_up",u"metadata",b"metadata",u"provide_backfill",b"provide_backfill",u"publish_data_as_private",b"publish_data_as_private",u"push_to_server",b"push_to_server",u"redvox_id",b"redvox_id",u"scramble_voice_data",b"scramble_voice_data",u"storage_space_allowance",b"storage_space_allowance",u"time_sync_server_url",b"time_sync_server_url",u"use_custom_data_server",b"use_custom_data_server",u"use_custom_time_sync_server",b"use_custom_time_sync_server",u"use_latitude",b"use_latitude",u"use_location_services",b"use_location_services",u"use_longitude",b"use_longitude",u"use_sd_card_for_data_storage",b"use_sd_card_for_data_storage"]) -> None: ...

        id = ... # type: typing___Text
        uuid = ... # type: typing___Text
        make = ... # type: typing___Text
        model = ... # type: typing___Text
        os = ... # type: RedvoxPacket1000.StationInformation.OsType
        os_version = ... # type: typing___Text
        app_version = ... # type: typing___Text
        network_type = ... # type: RedvoxPacket1000.StationInformation.NetworkType

        @property
        def app_settings(self) -> RedvoxPacket1000.StationInformation.AppSettings: ...

        @property
        def station_information_timestamps(self) -> RedvoxPacket1000.Payload: ...

        @property
        def network_strength(self) -> RedvoxPacket1000.Payload: ...

        @property
        def temperature(self) -> RedvoxPacket1000.Payload: ...

        @property
        def battery(self) -> RedvoxPacket1000.Payload: ...

        @property
        def available_ram(self) -> RedvoxPacket1000.Payload: ...

        @property
        def available_disk(self) -> RedvoxPacket1000.Payload: ...

        @property
        def cpu_utilization(self) -> RedvoxPacket1000.Payload: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            id : typing___Optional[typing___Text] = None,
            uuid : typing___Optional[typing___Text] = None,
            make : typing___Optional[typing___Text] = None,
            model : typing___Optional[typing___Text] = None,
            os : typing___Optional[RedvoxPacket1000.StationInformation.OsType] = None,
            os_version : typing___Optional[typing___Text] = None,
            app_version : typing___Optional[typing___Text] = None,
            app_settings : typing___Optional[RedvoxPacket1000.StationInformation.AppSettings] = None,
            network_type : typing___Optional[RedvoxPacket1000.StationInformation.NetworkType] = None,
            station_information_timestamps : typing___Optional[RedvoxPacket1000.Payload] = None,
            network_strength : typing___Optional[RedvoxPacket1000.Payload] = None,
            temperature : typing___Optional[RedvoxPacket1000.Payload] = None,
            battery : typing___Optional[RedvoxPacket1000.Payload] = None,
            available_ram : typing___Optional[RedvoxPacket1000.Payload] = None,
            available_disk : typing___Optional[RedvoxPacket1000.Payload] = None,
            cpu_utilization : typing___Optional[RedvoxPacket1000.Payload] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.StationInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.StationInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"app_settings",u"available_disk",u"available_ram",u"battery",u"cpu_utilization",u"network_strength",u"station_information_timestamps",u"temperature"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"app_settings",u"app_version",u"available_disk",u"available_ram",u"battery",u"cpu_utilization",u"id",u"make",u"metadata",u"model",u"network_strength",u"network_type",u"os",u"os_version",u"station_information_timestamps",u"temperature",u"uuid"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"app_settings",b"app_settings",u"available_disk",b"available_disk",u"available_ram",b"available_ram",u"battery",b"battery",u"cpu_utilization",b"cpu_utilization",u"network_strength",b"network_strength",u"station_information_timestamps",b"station_information_timestamps",u"temperature",b"temperature"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"app_settings",b"app_settings",u"app_version",b"app_version",u"available_disk",b"available_disk",u"available_ram",b"available_ram",u"battery",b"battery",u"cpu_utilization",b"cpu_utilization",u"id",b"id",u"make",b"make",u"metadata",b"metadata",u"model",b"model",u"network_strength",b"network_strength",u"network_type",b"network_type",u"os",b"os",u"os_version",b"os_version",u"station_information_timestamps",b"station_information_timestamps",u"temperature",b"temperature",u"uuid",b"uuid"]) -> None: ...

    class PacketInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.PacketInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.PacketInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        is_backfilled = ... # type: builtin___bool
        is_private = ... # type: builtin___bool

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            is_backfilled : typing___Optional[builtin___bool] = None,
            is_private : typing___Optional[builtin___bool] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.PacketInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.PacketInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"is_backfilled",u"is_private",u"metadata"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"is_backfilled",b"is_backfilled",u"is_private",b"is_private",u"metadata",b"metadata"]) -> None: ...

    class TimingInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.TimingInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.TimingInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        class SynchExchange(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.TimingInformation.SynchExchange.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.TimingInformation.SynchExchange.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            a1 = ... # type: builtin___float
            a2 = ... # type: builtin___float
            a3 = ... # type: builtin___float
            b1 = ... # type: builtin___float
            b2 = ... # type: builtin___float
            b3 = ... # type: builtin___float

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                a1 : typing___Optional[builtin___float] = None,
                a2 : typing___Optional[builtin___float] = None,
                a3 : typing___Optional[builtin___float] = None,
                b1 : typing___Optional[builtin___float] = None,
                b2 : typing___Optional[builtin___float] = None,
                b3 : typing___Optional[builtin___float] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.TimingInformation.SynchExchange: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.TimingInformation.SynchExchange: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"a1",u"a2",u"a3",u"b1",u"b2",u"b3",u"metadata"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"a1",b"a1",u"a2",b"a2",u"a3",b"a3",u"b1",b"b1",u"b2",b"b2",u"b3",b"b3",u"metadata",b"metadata"]) -> None: ...

        packet_start_ts_us_os = ... # type: builtin___float
        packet_start_ts_us_mach = ... # type: builtin___float
        packet_end_ts_us_os = ... # type: builtin___float
        packet_end_ts_us_mach = ... # type: builtin___float
        server_acquisition_arrival_ts_us = ... # type: builtin___float
        app_start_ts_us_mach = ... # type: builtin___float
        best_latency_us = ... # type: builtin___float
        best_offset_us = ... # type: builtin___float

        @property
        def synch_exchanges(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[RedvoxPacket1000.TimingInformation.SynchExchange]: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            packet_start_ts_us_os : typing___Optional[builtin___float] = None,
            packet_start_ts_us_mach : typing___Optional[builtin___float] = None,
            packet_end_ts_us_os : typing___Optional[builtin___float] = None,
            packet_end_ts_us_mach : typing___Optional[builtin___float] = None,
            server_acquisition_arrival_ts_us : typing___Optional[builtin___float] = None,
            app_start_ts_us_mach : typing___Optional[builtin___float] = None,
            synch_exchanges : typing___Optional[typing___Iterable[RedvoxPacket1000.TimingInformation.SynchExchange]] = None,
            best_latency_us : typing___Optional[builtin___float] = None,
            best_offset_us : typing___Optional[builtin___float] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.TimingInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.TimingInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"app_start_ts_us_mach",u"best_latency_us",u"best_offset_us",u"metadata",u"packet_end_ts_us_mach",u"packet_end_ts_us_os",u"packet_start_ts_us_mach",u"packet_start_ts_us_os",u"server_acquisition_arrival_ts_us",u"synch_exchanges"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"app_start_ts_us_mach",b"app_start_ts_us_mach",u"best_latency_us",b"best_latency_us",u"best_offset_us",b"best_offset_us",u"metadata",b"metadata",u"packet_end_ts_us_mach",b"packet_end_ts_us_mach",u"packet_end_ts_us_os",b"packet_end_ts_us_os",u"packet_start_ts_us_mach",b"packet_start_ts_us_mach",u"packet_start_ts_us_os",b"packet_start_ts_us_os",u"server_acquisition_arrival_ts_us",b"server_acquisition_arrival_ts_us",u"synch_exchanges",b"synch_exchanges"]) -> None: ...

    class ServerInformation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.ServerInformation.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.ServerInformation.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        auth_server_url = ... # type: typing___Text
        synch_server_url = ... # type: typing___Text
        acquisition_server_url = ... # type: typing___Text

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            auth_server_url : typing___Optional[typing___Text] = None,
            synch_server_url : typing___Optional[typing___Text] = None,
            acquisition_server_url : typing___Optional[typing___Text] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.ServerInformation: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.ServerInformation: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"acquisition_server_url",u"auth_server_url",u"metadata",u"synch_server_url"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"acquisition_server_url",b"acquisition_server_url",u"auth_server_url",b"auth_server_url",u"metadata",b"metadata",u"synch_server_url",b"synch_server_url"]) -> None: ...

    class SensorChannels(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        class AudioChannel(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.AudioChannel.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.AudioChannel.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text
            first_sample_timestamp = ... # type: builtin___float
            sample_rate_hz = ... # type: builtin___float
            is_scrambled = ... # type: builtin___bool

            @property
            def samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                first_sample_timestamp : typing___Optional[builtin___float] = None,
                sample_rate_hz : typing___Optional[builtin___float] = None,
                is_scrambled : typing___Optional[builtin___bool] = None,
                samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.AudioChannel: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.AudioChannel: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"first_sample_timestamp",u"is_scrambled",u"metadata",u"sample_rate_hz",u"samples",u"sensor_description"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"samples",b"samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"first_sample_timestamp",b"first_sample_timestamp",u"is_scrambled",b"is_scrambled",u"metadata",b"metadata",u"sample_rate_hz",b"sample_rate_hz",u"samples",b"samples",u"sensor_description",b"sensor_description"]) -> None: ...

        class SingleChannel(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.SingleChannel.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.SingleChannel.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text

            @property
            def timestamps(self) -> RedvoxPacket1000.Payload: ...

            @property
            def samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                timestamps : typing___Optional[RedvoxPacket1000.Payload] = None,
                samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.SingleChannel: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.SingleChannel: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"samples",u"timestamps"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",u"samples",u"sensor_description",u"timestamps"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"samples",b"samples",u"timestamps",b"timestamps"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",b"metadata",u"samples",b"samples",u"sensor_description",b"sensor_description",u"timestamps",b"timestamps"]) -> None: ...

        class LocationChannel(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class LocationProvider(builtin___int):
                DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
                @classmethod
                def Name(cls, number: builtin___int) -> builtin___str: ...
                @classmethod
                def Value(cls, name: builtin___str) -> 'RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider': ...
                @classmethod
                def keys(cls) -> typing___List[builtin___str]: ...
                @classmethod
                def values(cls) -> typing___List['RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider']: ...
                @classmethod
                def items(cls) -> typing___List[typing___Tuple[builtin___str, 'RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider']]: ...
                NONE = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 0)
                USER = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 1)
                GPS = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 2)
                NETWORK = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 3)
            NONE = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 0)
            USER = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 1)
            GPS = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 2)
            NETWORK = typing___cast('RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider', 3)

            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.LocationChannel.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.LocationChannel.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text
            location_permissions_granted = ... # type: builtin___bool
            location_services_requested = ... # type: builtin___bool
            location_services_enabled = ... # type: builtin___bool
            location_provider = ... # type: RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider

            @property
            def timestamps(self) -> RedvoxPacket1000.Payload: ...

            @property
            def latitude_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def longitude_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def altitude_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def speed_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def bearing_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def horizontal_accuracy_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def vertical_accuracy_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def speed_accuracy_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def bearing_accuracy_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                timestamps : typing___Optional[RedvoxPacket1000.Payload] = None,
                latitude_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                longitude_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                altitude_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                speed_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                bearing_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                horizontal_accuracy_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                vertical_accuracy_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                speed_accuracy_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                bearing_accuracy_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                location_permissions_granted : typing___Optional[builtin___bool] = None,
                location_services_requested : typing___Optional[builtin___bool] = None,
                location_services_enabled : typing___Optional[builtin___bool] = None,
                location_provider : typing___Optional[RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.LocationChannel: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.LocationChannel: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"altitude_samples",u"bearing_accuracy_samples",u"bearing_samples",u"horizontal_accuracy_samples",u"latitude_samples",u"longitude_samples",u"speed_accuracy_samples",u"speed_samples",u"timestamps",u"vertical_accuracy_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"altitude_samples",u"bearing_accuracy_samples",u"bearing_samples",u"horizontal_accuracy_samples",u"latitude_samples",u"location_permissions_granted",u"location_provider",u"location_services_enabled",u"location_services_requested",u"longitude_samples",u"metadata",u"sensor_description",u"speed_accuracy_samples",u"speed_samples",u"timestamps",u"vertical_accuracy_samples"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"altitude_samples",b"altitude_samples",u"bearing_accuracy_samples",b"bearing_accuracy_samples",u"bearing_samples",b"bearing_samples",u"horizontal_accuracy_samples",b"horizontal_accuracy_samples",u"latitude_samples",b"latitude_samples",u"longitude_samples",b"longitude_samples",u"speed_accuracy_samples",b"speed_accuracy_samples",u"speed_samples",b"speed_samples",u"timestamps",b"timestamps",u"vertical_accuracy_samples",b"vertical_accuracy_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"altitude_samples",b"altitude_samples",u"bearing_accuracy_samples",b"bearing_accuracy_samples",u"bearing_samples",b"bearing_samples",u"horizontal_accuracy_samples",b"horizontal_accuracy_samples",u"latitude_samples",b"latitude_samples",u"location_permissions_granted",b"location_permissions_granted",u"location_provider",b"location_provider",u"location_services_enabled",b"location_services_enabled",u"location_services_requested",b"location_services_requested",u"longitude_samples",b"longitude_samples",u"metadata",b"metadata",u"sensor_description",b"sensor_description",u"speed_accuracy_samples",b"speed_accuracy_samples",u"speed_samples",b"speed_samples",u"timestamps",b"timestamps",u"vertical_accuracy_samples",b"vertical_accuracy_samples"]) -> None: ...

        class XyzChannel(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.XyzChannel.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.XyzChannel.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text

            @property
            def timestamps(self) -> RedvoxPacket1000.Payload: ...

            @property
            def x_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def y_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def z_samples(self) -> RedvoxPacket1000.Payload: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                timestamps : typing___Optional[RedvoxPacket1000.Payload] = None,
                x_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                y_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                z_samples : typing___Optional[RedvoxPacket1000.Payload] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.XyzChannel: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.XyzChannel: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"timestamps",u"x_samples",u"y_samples",u"z_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",u"sensor_description",u"timestamps",u"x_samples",u"y_samples",u"z_samples"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"timestamps",b"timestamps",u"x_samples",b"x_samples",u"y_samples",b"y_samples",u"z_samples",b"z_samples"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"metadata",b"metadata",u"sensor_description",b"sensor_description",u"timestamps",b"timestamps",u"x_samples",b"x_samples",u"y_samples",b"y_samples",u"z_samples",b"z_samples"]) -> None: ...

        class ImageChannel(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            class MetadataEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key = ... # type: typing___Text
                value = ... # type: typing___Text

                def __init__(self,
                    *,
                    key : typing___Optional[typing___Text] = None,
                    value : typing___Optional[typing___Text] = None,
                    ) -> None: ...
                if sys.version_info >= (3,):
                    @classmethod
                    def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.ImageChannel.MetadataEntry: ...
                else:
                    @classmethod
                    def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.ImageChannel.MetadataEntry: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

            sensor_description = ... # type: typing___Text
            mean_sample_rate_hz = ... # type: builtin___float
            sample_ts_us = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[builtin___float]
            samples = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[builtin___bytes]

            @property
            def sample_rate_statistics(self) -> RedvoxPacket1000.SummaryStatistics: ...

            @property
            def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

            def __init__(self,
                *,
                sensor_description : typing___Optional[typing___Text] = None,
                mean_sample_rate_hz : typing___Optional[builtin___float] = None,
                sample_ts_us : typing___Optional[typing___Iterable[builtin___float]] = None,
                samples : typing___Optional[typing___Iterable[builtin___bytes]] = None,
                sample_rate_statistics : typing___Optional[RedvoxPacket1000.SummaryStatistics] = None,
                metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels.ImageChannel: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels.ImageChannel: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def HasField(self, field_name: typing_extensions___Literal[u"sample_rate_statistics"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"mean_sample_rate_hz",u"metadata",u"sample_rate_statistics",u"sample_ts_us",u"samples",u"sensor_description"]) -> None: ...
            else:
                def HasField(self, field_name: typing_extensions___Literal[u"sample_rate_statistics",b"sample_rate_statistics"]) -> builtin___bool: ...
                def ClearField(self, field_name: typing_extensions___Literal[u"mean_sample_rate_hz",b"mean_sample_rate_hz",u"metadata",b"metadata",u"sample_rate_statistics",b"sample_rate_statistics",u"sample_ts_us",b"sample_ts_us",u"samples",b"samples",u"sensor_description",b"sensor_description"]) -> None: ...


        @property
        def audio_channel(self) -> RedvoxPacket1000.SensorChannels.AudioChannel: ...

        @property
        def barometer_channel(self) -> RedvoxPacket1000.SensorChannels.SingleChannel: ...

        @property
        def location_channel(self) -> RedvoxPacket1000.SensorChannels.LocationChannel: ...

        @property
        def accelerometer_channel(self) -> RedvoxPacket1000.SensorChannels.XyzChannel: ...

        @property
        def gyroscope_channel(self) -> RedvoxPacket1000.SensorChannels.XyzChannel: ...

        @property
        def magnetometer_channel(self) -> RedvoxPacket1000.SensorChannels.XyzChannel: ...

        @property
        def light_channel(self) -> RedvoxPacket1000.SensorChannels.SingleChannel: ...

        @property
        def infrared_channel(self) -> RedvoxPacket1000.SensorChannels.SingleChannel: ...

        @property
        def image_channel(self) -> RedvoxPacket1000.SensorChannels.ImageChannel: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            audio_channel : typing___Optional[RedvoxPacket1000.SensorChannels.AudioChannel] = None,
            barometer_channel : typing___Optional[RedvoxPacket1000.SensorChannels.SingleChannel] = None,
            location_channel : typing___Optional[RedvoxPacket1000.SensorChannels.LocationChannel] = None,
            accelerometer_channel : typing___Optional[RedvoxPacket1000.SensorChannels.XyzChannel] = None,
            gyroscope_channel : typing___Optional[RedvoxPacket1000.SensorChannels.XyzChannel] = None,
            magnetometer_channel : typing___Optional[RedvoxPacket1000.SensorChannels.XyzChannel] = None,
            light_channel : typing___Optional[RedvoxPacket1000.SensorChannels.SingleChannel] = None,
            infrared_channel : typing___Optional[RedvoxPacket1000.SensorChannels.SingleChannel] = None,
            image_channel : typing___Optional[RedvoxPacket1000.SensorChannels.ImageChannel] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SensorChannels: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SensorChannels: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"accelerometer_channel",u"audio_channel",u"barometer_channel",u"gyroscope_channel",u"image_channel",u"infrared_channel",u"light_channel",u"location_channel",u"magnetometer_channel"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"accelerometer_channel",u"audio_channel",u"barometer_channel",u"gyroscope_channel",u"image_channel",u"infrared_channel",u"light_channel",u"location_channel",u"magnetometer_channel",u"metadata"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"accelerometer_channel",b"accelerometer_channel",u"audio_channel",b"audio_channel",u"barometer_channel",b"barometer_channel",u"gyroscope_channel",b"gyroscope_channel",u"image_channel",b"image_channel",u"infrared_channel",b"infrared_channel",u"light_channel",b"light_channel",u"location_channel",b"location_channel",u"magnetometer_channel",b"magnetometer_channel"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"accelerometer_channel",b"accelerometer_channel",u"audio_channel",b"audio_channel",u"barometer_channel",b"barometer_channel",u"gyroscope_channel",b"gyroscope_channel",u"image_channel",b"image_channel",u"infrared_channel",b"infrared_channel",u"light_channel",b"light_channel",u"location_channel",b"location_channel",u"magnetometer_channel",b"magnetometer_channel",u"metadata",b"metadata"]) -> None: ...

    class Payload(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.Payload.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.Payload.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        unit = ... # type: RedvoxPacket1000.Unit
        values = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[builtin___float]

        @property
        def value_statistics(self) -> RedvoxPacket1000.SummaryStatistics: ...

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            unit : typing___Optional[RedvoxPacket1000.Unit] = None,
            values : typing___Optional[typing___Iterable[builtin___float]] = None,
            value_statistics : typing___Optional[RedvoxPacket1000.SummaryStatistics] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.Payload: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.Payload: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"value_statistics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"metadata",u"unit",u"value_statistics",u"values"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"value_statistics",b"value_statistics"]) -> builtin___bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"metadata",b"metadata",u"unit",b"unit",u"value_statistics",b"value_statistics",u"values",b"values"]) -> None: ...

    class SummaryStatistics(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        class MetadataEntry(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            key = ... # type: typing___Text
            value = ... # type: typing___Text

            def __init__(self,
                *,
                key : typing___Optional[typing___Text] = None,
                value : typing___Optional[typing___Text] = None,
                ) -> None: ...
            if sys.version_info >= (3,):
                @classmethod
                def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SummaryStatistics.MetadataEntry: ...
            else:
                @classmethod
                def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SummaryStatistics.MetadataEntry: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"key",u"value"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        count = ... # type: builtin___float
        mean = ... # type: builtin___float
        median = ... # type: builtin___float
        mode = ... # type: builtin___float
        variance = ... # type: builtin___float
        min = ... # type: builtin___float
        max = ... # type: builtin___float
        range = ... # type: builtin___float

        @property
        def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

        def __init__(self,
            *,
            count : typing___Optional[builtin___float] = None,
            mean : typing___Optional[builtin___float] = None,
            median : typing___Optional[builtin___float] = None,
            mode : typing___Optional[builtin___float] = None,
            variance : typing___Optional[builtin___float] = None,
            min : typing___Optional[builtin___float] = None,
            max : typing___Optional[builtin___float] = None,
            range : typing___Optional[builtin___float] = None,
            metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000.SummaryStatistics: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000.SummaryStatistics: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"count",u"max",u"mean",u"median",u"metadata",u"min",u"mode",u"range",u"variance"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"count",b"count",u"max",b"max",u"mean",b"mean",u"median",b"median",u"metadata",b"metadata",u"min",b"min",u"mode",b"mode",u"range",b"range",u"variance",b"variance"]) -> None: ...

    api = ... # type: builtin___float

    @property
    def user_information(self) -> RedvoxPacket1000.UserInformation: ...

    @property
    def station_information(self) -> RedvoxPacket1000.StationInformation: ...

    @property
    def packet_information(self) -> RedvoxPacket1000.PacketInformation: ...

    @property
    def timing_information(self) -> RedvoxPacket1000.TimingInformation: ...

    @property
    def server_information(self) -> RedvoxPacket1000.ServerInformation: ...

    @property
    def sensor_channels(self) -> RedvoxPacket1000.SensorChannels: ...

    @property
    def metadata(self) -> typing___MutableMapping[typing___Text, typing___Text]: ...

    def __init__(self,
        *,
        api : typing___Optional[builtin___float] = None,
        user_information : typing___Optional[RedvoxPacket1000.UserInformation] = None,
        station_information : typing___Optional[RedvoxPacket1000.StationInformation] = None,
        packet_information : typing___Optional[RedvoxPacket1000.PacketInformation] = None,
        timing_information : typing___Optional[RedvoxPacket1000.TimingInformation] = None,
        server_information : typing___Optional[RedvoxPacket1000.ServerInformation] = None,
        sensor_channels : typing___Optional[RedvoxPacket1000.SensorChannels] = None,
        metadata : typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> RedvoxPacket1000: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> RedvoxPacket1000: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"packet_information",u"sensor_channels",u"server_information",u"station_information",u"timing_information",u"user_information"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"api",u"metadata",u"packet_information",u"sensor_channels",u"server_information",u"station_information",u"timing_information",u"user_information"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"packet_information",b"packet_information",u"sensor_channels",b"sensor_channels",u"server_information",b"server_information",u"station_information",b"station_information",u"timing_information",b"timing_information",u"user_information",b"user_information"]) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"api",b"api",u"metadata",b"metadata",u"packet_information",b"packet_information",u"sensor_channels",b"sensor_channels",u"server_information",b"server_information",u"station_information",b"station_information",u"timing_information",b"timing_information",u"user_information",b"user_information"]) -> None: ...

class EncryptedRedvoxPacket1000(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class Header(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        station_id = ... # type: typing___Text
        station_uuid = ... # type: typing___Text
        auth_token = ... # type: typing___Text
        auth_email = ... # type: typing___Text

        def __init__(self,
            *,
            station_id : typing___Optional[typing___Text] = None,
            station_uuid : typing___Optional[typing___Text] = None,
            auth_token : typing___Optional[typing___Text] = None,
            auth_email : typing___Optional[typing___Text] = None,
            ) -> None: ...
        if sys.version_info >= (3,):
            @classmethod
            def FromString(cls, s: builtin___bytes) -> EncryptedRedvoxPacket1000.Header: ...
        else:
            @classmethod
            def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> EncryptedRedvoxPacket1000.Header: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",u"auth_token",u"station_id",u"station_uuid"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"auth_email",b"auth_email",u"auth_token",b"auth_token",u"station_id",b"station_id",u"station_uuid",b"station_uuid"]) -> None: ...

    header = ... # type: builtin___bytes
    packet = ... # type: builtin___bytes

    def __init__(self,
        *,
        header : typing___Optional[builtin___bytes] = None,
        packet : typing___Optional[builtin___bytes] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> EncryptedRedvoxPacket1000: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> EncryptedRedvoxPacket1000: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"header",u"packet"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"header",b"header",u"packet",b"packet"]) -> None: ...

class AcquisitionRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    compressed_redvox_packet_1000 = ... # type: builtin___bytes
    checksum = ... # type: builtin___int

    def __init__(self,
        *,
        compressed_redvox_packet_1000 : typing___Optional[builtin___bytes] = None,
        checksum : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> AcquisitionRequest: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> AcquisitionRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",u"compressed_redvox_packet_1000"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",b"checksum",u"compressed_redvox_packet_1000",b"compressed_redvox_packet_1000"]) -> None: ...

class AcquisitionResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class ResponseType(builtin___int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: builtin___int) -> builtin___str: ...
        @classmethod
        def Value(cls, name: builtin___str) -> 'AcquisitionResponse.ResponseType': ...
        @classmethod
        def keys(cls) -> typing___List[builtin___str]: ...
        @classmethod
        def values(cls) -> typing___List['AcquisitionResponse.ResponseType']: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[builtin___str, 'AcquisitionResponse.ResponseType']]: ...
        OK = typing___cast('AcquisitionResponse.ResponseType', 0)
        AUTH_ERROR = typing___cast('AcquisitionResponse.ResponseType', 1)
        DATA_ERROR = typing___cast('AcquisitionResponse.ResponseType', 2)
        OTHER_ERROR = typing___cast('AcquisitionResponse.ResponseType', 3)
    OK = typing___cast('AcquisitionResponse.ResponseType', 0)
    AUTH_ERROR = typing___cast('AcquisitionResponse.ResponseType', 1)
    DATA_ERROR = typing___cast('AcquisitionResponse.ResponseType', 2)
    OTHER_ERROR = typing___cast('AcquisitionResponse.ResponseType', 3)

    response_type = ... # type: AcquisitionResponse.ResponseType
    checksum = ... # type: builtin___int
    details = ... # type: typing___Text
    resend = ... # type: builtin___bool

    def __init__(self,
        *,
        response_type : typing___Optional[AcquisitionResponse.ResponseType] = None,
        checksum : typing___Optional[builtin___int] = None,
        details : typing___Optional[typing___Text] = None,
        resend : typing___Optional[builtin___bool] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> AcquisitionResponse: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> AcquisitionResponse: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",u"details",u"resend",u"response_type"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"checksum",b"checksum",u"details",b"details",u"resend",b"resend",u"response_type",b"response_type"]) -> None: ...

class SynchRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    seq_id = ... # type: builtin___int
    sub_seq_id = ... # type: builtin___int

    def __init__(self,
        *,
        seq_id : typing___Optional[builtin___int] = None,
        sub_seq_id : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> SynchRequest: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> SynchRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"seq_id",u"sub_seq_id"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"seq_id",b"seq_id",u"sub_seq_id",b"sub_seq_id"]) -> None: ...

class SynchResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    seq_id = ... # type: builtin___int
    sub_seq_id = ... # type: builtin___int
    recv_ts_us = ... # type: builtin___int
    send_ts_us = ... # type: builtin___int

    def __init__(self,
        *,
        seq_id : typing___Optional[builtin___int] = None,
        sub_seq_id : typing___Optional[builtin___int] = None,
        recv_ts_us : typing___Optional[builtin___int] = None,
        send_ts_us : typing___Optional[builtin___int] = None,
        ) -> None: ...
    if sys.version_info >= (3,):
        @classmethod
        def FromString(cls, s: builtin___bytes) -> SynchResponse: ...
    else:
        @classmethod
        def FromString(cls, s: typing___Union[builtin___bytes, builtin___buffer, builtin___unicode]) -> SynchResponse: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"recv_ts_us",u"send_ts_us",u"seq_id",u"sub_seq_id"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"recv_ts_us",b"recv_ts_us",u"send_ts_us",b"send_ts_us",u"seq_id",b"seq_id",u"sub_seq_id",b"sub_seq_id"]) -> None: ...
