//*
// This file contains the protobuf message definitions for RedVox API 1000 (M) data and network communications.
//
// Standards and related documentation for API M is available at:
//   - https://github.com/RedVoxInc/redvox-api-1000

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.1
// source: redvox_api_m.proto

package redvoxpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of API M supported units
type RedvoxPacketM_Unit int32

const (
	RedvoxPacketM_UNKNOWN                       RedvoxPacketM_Unit = 0
	RedvoxPacketM_METERS_PER_SECOND_SQUARED     RedvoxPacketM_Unit = 1
	RedvoxPacketM_KILOPASCAL                    RedvoxPacketM_Unit = 2
	RedvoxPacketM_RADIANS_PER_SECOND            RedvoxPacketM_Unit = 3
	RedvoxPacketM_DECIMAL_DEGREES               RedvoxPacketM_Unit = 4
	RedvoxPacketM_METERS                        RedvoxPacketM_Unit = 5
	RedvoxPacketM_METERS_PER_SECOND             RedvoxPacketM_Unit = 6
	RedvoxPacketM_MICROTESLA                    RedvoxPacketM_Unit = 7
	RedvoxPacketM_LSB_PLUS_MINUS_COUNTS         RedvoxPacketM_Unit = 8
	RedvoxPacketM_MICROSECONDS_SINCE_UNIX_EPOCH RedvoxPacketM_Unit = 9
	RedvoxPacketM_DECIBEL                       RedvoxPacketM_Unit = 10
	RedvoxPacketM_DEGREES_CELSIUS               RedvoxPacketM_Unit = 11
	RedvoxPacketM_BYTE                          RedvoxPacketM_Unit = 12
	RedvoxPacketM_PERCENTAGE                    RedvoxPacketM_Unit = 13
	RedvoxPacketM_RADIANS                       RedvoxPacketM_Unit = 14
	RedvoxPacketM_MICROAMPERES                  RedvoxPacketM_Unit = 15
	RedvoxPacketM_CENTIMETERS                   RedvoxPacketM_Unit = 16
	RedvoxPacketM_NORMALIZED_COUNTS             RedvoxPacketM_Unit = 17
	RedvoxPacketM_LUX                           RedvoxPacketM_Unit = 18
	RedvoxPacketM_UNITLESS                      RedvoxPacketM_Unit = 19
	RedvoxPacketM_PCM                           RedvoxPacketM_Unit = 20
)

// Enum value maps for RedvoxPacketM_Unit.
var (
	RedvoxPacketM_Unit_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "METERS_PER_SECOND_SQUARED",
		2:  "KILOPASCAL",
		3:  "RADIANS_PER_SECOND",
		4:  "DECIMAL_DEGREES",
		5:  "METERS",
		6:  "METERS_PER_SECOND",
		7:  "MICROTESLA",
		8:  "LSB_PLUS_MINUS_COUNTS",
		9:  "MICROSECONDS_SINCE_UNIX_EPOCH",
		10: "DECIBEL",
		11: "DEGREES_CELSIUS",
		12: "BYTE",
		13: "PERCENTAGE",
		14: "RADIANS",
		15: "MICROAMPERES",
		16: "CENTIMETERS",
		17: "NORMALIZED_COUNTS",
		18: "LUX",
		19: "UNITLESS",
		20: "PCM",
	}
	RedvoxPacketM_Unit_value = map[string]int32{
		"UNKNOWN":                       0,
		"METERS_PER_SECOND_SQUARED":     1,
		"KILOPASCAL":                    2,
		"RADIANS_PER_SECOND":            3,
		"DECIMAL_DEGREES":               4,
		"METERS":                        5,
		"METERS_PER_SECOND":             6,
		"MICROTESLA":                    7,
		"LSB_PLUS_MINUS_COUNTS":         8,
		"MICROSECONDS_SINCE_UNIX_EPOCH": 9,
		"DECIBEL":                       10,
		"DEGREES_CELSIUS":               11,
		"BYTE":                          12,
		"PERCENTAGE":                    13,
		"RADIANS":                       14,
		"MICROAMPERES":                  15,
		"CENTIMETERS":                   16,
		"NORMALIZED_COUNTS":             17,
		"LUX":                           18,
		"UNITLESS":                      19,
		"PCM":                           20,
	}
)

func (x RedvoxPacketM_Unit) Enum() *RedvoxPacketM_Unit {
	p := new(RedvoxPacketM_Unit)
	*p = x
	return p
}

func (x RedvoxPacketM_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[0].Descriptor()
}

func (RedvoxPacketM_Unit) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[0]
}

func (x RedvoxPacketM_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_Unit.Descriptor instead.
func (RedvoxPacketM_Unit) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 0}
}

// An enumeration specifying the available operating system types
type RedvoxPacketM_StationInformation_OsType int32

const (
	RedvoxPacketM_StationInformation_UNKNOWN_OS RedvoxPacketM_StationInformation_OsType = 0
	RedvoxPacketM_StationInformation_ANDROID    RedvoxPacketM_StationInformation_OsType = 1
	RedvoxPacketM_StationInformation_IOS        RedvoxPacketM_StationInformation_OsType = 2
	RedvoxPacketM_StationInformation_OSX        RedvoxPacketM_StationInformation_OsType = 3
	RedvoxPacketM_StationInformation_LINUX      RedvoxPacketM_StationInformation_OsType = 4
	RedvoxPacketM_StationInformation_WINDOWS    RedvoxPacketM_StationInformation_OsType = 5
)

// Enum value maps for RedvoxPacketM_StationInformation_OsType.
var (
	RedvoxPacketM_StationInformation_OsType_name = map[int32]string{
		0: "UNKNOWN_OS",
		1: "ANDROID",
		2: "IOS",
		3: "OSX",
		4: "LINUX",
		5: "WINDOWS",
	}
	RedvoxPacketM_StationInformation_OsType_value = map[string]int32{
		"UNKNOWN_OS": 0,
		"ANDROID":    1,
		"IOS":        2,
		"OSX":        3,
		"LINUX":      4,
		"WINDOWS":    5,
	}
)

func (x RedvoxPacketM_StationInformation_OsType) Enum() *RedvoxPacketM_StationInformation_OsType {
	p := new(RedvoxPacketM_StationInformation_OsType)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_OsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_OsType) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[1].Descriptor()
}

func (RedvoxPacketM_StationInformation_OsType) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[1]
}

func (x RedvoxPacketM_StationInformation_OsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_OsType.Descriptor instead.
func (RedvoxPacketM_StationInformation_OsType) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Defines how often metrics are collected
type RedvoxPacketM_StationInformation_MetricsRate int32

const (
	RedvoxPacketM_StationInformation_UNKNOWN         RedvoxPacketM_StationInformation_MetricsRate = 0
	RedvoxPacketM_StationInformation_ONCE_PER_SECOND RedvoxPacketM_StationInformation_MetricsRate = 1
	RedvoxPacketM_StationInformation_ONCE_PER_PACKET RedvoxPacketM_StationInformation_MetricsRate = 2
)

// Enum value maps for RedvoxPacketM_StationInformation_MetricsRate.
var (
	RedvoxPacketM_StationInformation_MetricsRate_name = map[int32]string{
		0: "UNKNOWN",
		1: "ONCE_PER_SECOND",
		2: "ONCE_PER_PACKET",
	}
	RedvoxPacketM_StationInformation_MetricsRate_value = map[string]int32{
		"UNKNOWN":         0,
		"ONCE_PER_SECOND": 1,
		"ONCE_PER_PACKET": 2,
	}
)

func (x RedvoxPacketM_StationInformation_MetricsRate) Enum() *RedvoxPacketM_StationInformation_MetricsRate {
	p := new(RedvoxPacketM_StationInformation_MetricsRate)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_MetricsRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_MetricsRate) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[2].Descriptor()
}

func (RedvoxPacketM_StationInformation_MetricsRate) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[2]
}

func (x RedvoxPacketM_StationInformation_MetricsRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_MetricsRate.Descriptor instead.
func (RedvoxPacketM_StationInformation_MetricsRate) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 1}
}

// An enumeration specifying the available network types
type RedvoxPacketM_StationInformation_StationMetrics_NetworkType int32

const (
	RedvoxPacketM_StationInformation_StationMetrics_UNKNOWN_NETWORK RedvoxPacketM_StationInformation_StationMetrics_NetworkType = 0
	RedvoxPacketM_StationInformation_StationMetrics_NO_NETWORK      RedvoxPacketM_StationInformation_StationMetrics_NetworkType = 1
	RedvoxPacketM_StationInformation_StationMetrics_WIFI            RedvoxPacketM_StationInformation_StationMetrics_NetworkType = 2
	RedvoxPacketM_StationInformation_StationMetrics_CELLULAR        RedvoxPacketM_StationInformation_StationMetrics_NetworkType = 3
	RedvoxPacketM_StationInformation_StationMetrics_WIRED           RedvoxPacketM_StationInformation_StationMetrics_NetworkType = 4
)

// Enum value maps for RedvoxPacketM_StationInformation_StationMetrics_NetworkType.
var (
	RedvoxPacketM_StationInformation_StationMetrics_NetworkType_name = map[int32]string{
		0: "UNKNOWN_NETWORK",
		1: "NO_NETWORK",
		2: "WIFI",
		3: "CELLULAR",
		4: "WIRED",
	}
	RedvoxPacketM_StationInformation_StationMetrics_NetworkType_value = map[string]int32{
		"UNKNOWN_NETWORK": 0,
		"NO_NETWORK":      1,
		"WIFI":            2,
		"CELLULAR":        3,
		"WIRED":           4,
	}
)

func (x RedvoxPacketM_StationInformation_StationMetrics_NetworkType) Enum() *RedvoxPacketM_StationInformation_StationMetrics_NetworkType {
	p := new(RedvoxPacketM_StationInformation_StationMetrics_NetworkType)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_StationMetrics_NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_StationMetrics_NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[3].Descriptor()
}

func (RedvoxPacketM_StationInformation_StationMetrics_NetworkType) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[3]
}

func (x RedvoxPacketM_StationInformation_StationMetrics_NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_StationMetrics_NetworkType.Descriptor instead.
func (RedvoxPacketM_StationInformation_StationMetrics_NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

// Type of WiFi wake lock un use
type RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock int32

const (
	RedvoxPacketM_StationInformation_StationMetrics_NONE        RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock = 0
	RedvoxPacketM_StationInformation_StationMetrics_HIGH_PERF   RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock = 1
	RedvoxPacketM_StationInformation_StationMetrics_LOW_LATENCY RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock = 2
	RedvoxPacketM_StationInformation_StationMetrics_OTHER       RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock = 3
)

// Enum value maps for RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock.
var (
	RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_name = map[int32]string{
		0: "NONE",
		1: "HIGH_PERF",
		2: "LOW_LATENCY",
		3: "OTHER",
	}
	RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_value = map[string]int32{
		"NONE":        0,
		"HIGH_PERF":   1,
		"LOW_LATENCY": 2,
		"OTHER":       3,
	}
)

func (x RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock) Enum() *RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock {
	p := new(RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[4].Descriptor()
}

func (RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[4]
}

func (x RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock.Descriptor instead.
func (RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 2, 1}
}

// State of the cellular service
type RedvoxPacketM_StationInformation_StationMetrics_CellServiceState int32

const (
	// State is unknown
	RedvoxPacketM_StationInformation_StationMetrics_UNKNOWN RedvoxPacketM_StationInformation_StationMetrics_CellServiceState = 0
	// Only emergency calls
	RedvoxPacketM_StationInformation_StationMetrics_EMERGENCY RedvoxPacketM_StationInformation_StationMetrics_CellServiceState = 1
	// Everything is working fine
	RedvoxPacketM_StationInformation_StationMetrics_NOMINAL RedvoxPacketM_StationInformation_StationMetrics_CellServiceState = 2
	// Cell is searching for service, no available networks
	RedvoxPacketM_StationInformation_StationMetrics_OUT_OF_SERVICE RedvoxPacketM_StationInformation_StationMetrics_CellServiceState = 3
	// Cellular radio is powered off
	RedvoxPacketM_StationInformation_StationMetrics_POWER_OFF RedvoxPacketM_StationInformation_StationMetrics_CellServiceState = 4
)

// Enum value maps for RedvoxPacketM_StationInformation_StationMetrics_CellServiceState.
var (
	RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_name = map[int32]string{
		0: "UNKNOWN",
		1: "EMERGENCY",
		2: "NOMINAL",
		3: "OUT_OF_SERVICE",
		4: "POWER_OFF",
	}
	RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_value = map[string]int32{
		"UNKNOWN":        0,
		"EMERGENCY":      1,
		"NOMINAL":        2,
		"OUT_OF_SERVICE": 3,
		"POWER_OFF":      4,
	}
)

func (x RedvoxPacketM_StationInformation_StationMetrics_CellServiceState) Enum() *RedvoxPacketM_StationInformation_StationMetrics_CellServiceState {
	p := new(RedvoxPacketM_StationInformation_StationMetrics_CellServiceState)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_StationMetrics_CellServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_StationMetrics_CellServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[5].Descriptor()
}

func (RedvoxPacketM_StationInformation_StationMetrics_CellServiceState) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[5]
}

func (x RedvoxPacketM_StationInformation_StationMetrics_CellServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_StationMetrics_CellServiceState.Descriptor instead.
func (RedvoxPacketM_StationInformation_StationMetrics_CellServiceState) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 2, 2}
}

// The state of power supply to station
type RedvoxPacketM_StationInformation_StationMetrics_PowerState int32

const (
	// Station is in an unknown power state
	RedvoxPacketM_StationInformation_StationMetrics_UNKNOWN_POWER_STATE RedvoxPacketM_StationInformation_StationMetrics_PowerState = 0
	// Station is unplugged
	RedvoxPacketM_StationInformation_StationMetrics_UNPLUGGED RedvoxPacketM_StationInformation_StationMetrics_PowerState = 1
	// Station is charging
	RedvoxPacketM_StationInformation_StationMetrics_CHARGING RedvoxPacketM_StationInformation_StationMetrics_PowerState = 2
	// Station is charged
	RedvoxPacketM_StationInformation_StationMetrics_CHARGED RedvoxPacketM_StationInformation_StationMetrics_PowerState = 3
)

// Enum value maps for RedvoxPacketM_StationInformation_StationMetrics_PowerState.
var (
	RedvoxPacketM_StationInformation_StationMetrics_PowerState_name = map[int32]string{
		0: "UNKNOWN_POWER_STATE",
		1: "UNPLUGGED",
		2: "CHARGING",
		3: "CHARGED",
	}
	RedvoxPacketM_StationInformation_StationMetrics_PowerState_value = map[string]int32{
		"UNKNOWN_POWER_STATE": 0,
		"UNPLUGGED":           1,
		"CHARGING":            2,
		"CHARGED":             3,
	}
)

func (x RedvoxPacketM_StationInformation_StationMetrics_PowerState) Enum() *RedvoxPacketM_StationInformation_StationMetrics_PowerState {
	p := new(RedvoxPacketM_StationInformation_StationMetrics_PowerState)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_StationMetrics_PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_StationMetrics_PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[6].Descriptor()
}

func (RedvoxPacketM_StationInformation_StationMetrics_PowerState) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[6]
}

func (x RedvoxPacketM_StationInformation_StationMetrics_PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_StationMetrics_PowerState.Descriptor instead.
func (RedvoxPacketM_StationInformation_StationMetrics_PowerState) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 2, 3}
}

// State of the station's screen
type RedvoxPacketM_StationInformation_StationMetrics_ScreenState int32

const (
	// Unknown screen state
	RedvoxPacketM_StationInformation_StationMetrics_UNKNOWN_SCREEN_STATE RedvoxPacketM_StationInformation_StationMetrics_ScreenState = 0
	// Screen is turned on
	RedvoxPacketM_StationInformation_StationMetrics_ON RedvoxPacketM_StationInformation_StationMetrics_ScreenState = 1
	// Screen is turned off
	RedvoxPacketM_StationInformation_StationMetrics_OFF RedvoxPacketM_StationInformation_StationMetrics_ScreenState = 2
	// Station is running in headless mode and does not utilize a screen
	RedvoxPacketM_StationInformation_StationMetrics_HEADLESS RedvoxPacketM_StationInformation_StationMetrics_ScreenState = 3
)

// Enum value maps for RedvoxPacketM_StationInformation_StationMetrics_ScreenState.
var (
	RedvoxPacketM_StationInformation_StationMetrics_ScreenState_name = map[int32]string{
		0: "UNKNOWN_SCREEN_STATE",
		1: "ON",
		2: "OFF",
		3: "HEADLESS",
	}
	RedvoxPacketM_StationInformation_StationMetrics_ScreenState_value = map[string]int32{
		"UNKNOWN_SCREEN_STATE": 0,
		"ON":                   1,
		"OFF":                  2,
		"HEADLESS":             3,
	}
)

func (x RedvoxPacketM_StationInformation_StationMetrics_ScreenState) Enum() *RedvoxPacketM_StationInformation_StationMetrics_ScreenState {
	p := new(RedvoxPacketM_StationInformation_StationMetrics_ScreenState)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_StationMetrics_ScreenState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_StationMetrics_ScreenState) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[7].Descriptor()
}

func (RedvoxPacketM_StationInformation_StationMetrics_ScreenState) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[7]
}

func (x RedvoxPacketM_StationInformation_StationMetrics_ScreenState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_StationMetrics_ScreenState.Descriptor instead.
func (RedvoxPacketM_StationInformation_StationMetrics_ScreenState) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 2, 4}
}

// Configured FFT overlap
type RedvoxPacketM_StationInformation_AppSettings_FftOverlap int32

const (
	RedvoxPacketM_StationInformation_AppSettings_UNKNOWN    RedvoxPacketM_StationInformation_AppSettings_FftOverlap = 0
	RedvoxPacketM_StationInformation_AppSettings_PERCENT_25 RedvoxPacketM_StationInformation_AppSettings_FftOverlap = 1
	RedvoxPacketM_StationInformation_AppSettings_PERCENT_50 RedvoxPacketM_StationInformation_AppSettings_FftOverlap = 2
	RedvoxPacketM_StationInformation_AppSettings_PERCENT_75 RedvoxPacketM_StationInformation_AppSettings_FftOverlap = 3
)

// Enum value maps for RedvoxPacketM_StationInformation_AppSettings_FftOverlap.
var (
	RedvoxPacketM_StationInformation_AppSettings_FftOverlap_name = map[int32]string{
		0: "UNKNOWN",
		1: "PERCENT_25",
		2: "PERCENT_50",
		3: "PERCENT_75",
	}
	RedvoxPacketM_StationInformation_AppSettings_FftOverlap_value = map[string]int32{
		"UNKNOWN":    0,
		"PERCENT_25": 1,
		"PERCENT_50": 2,
		"PERCENT_75": 3,
	}
)

func (x RedvoxPacketM_StationInformation_AppSettings_FftOverlap) Enum() *RedvoxPacketM_StationInformation_AppSettings_FftOverlap {
	p := new(RedvoxPacketM_StationInformation_AppSettings_FftOverlap)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_AppSettings_FftOverlap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_AppSettings_FftOverlap) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[8].Descriptor()
}

func (RedvoxPacketM_StationInformation_AppSettings_FftOverlap) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[8]
}

func (x RedvoxPacketM_StationInformation_AppSettings_FftOverlap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_AppSettings_FftOverlap.Descriptor instead.
func (RedvoxPacketM_StationInformation_AppSettings_FftOverlap) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 3, 0}
}

// Configured sampling rate
type RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate int32

const (
	RedvoxPacketM_StationInformation_AppSettings_UNKNOWN_SAMPLING_RATE RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate = 0
	RedvoxPacketM_StationInformation_AppSettings_HZ_80                 RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate = 1
	RedvoxPacketM_StationInformation_AppSettings_HZ_800                RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate = 2
	RedvoxPacketM_StationInformation_AppSettings_HZ_8000               RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate = 3
	RedvoxPacketM_StationInformation_AppSettings_HZ_16000              RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate = 4
	RedvoxPacketM_StationInformation_AppSettings_HZ_48000              RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate = 5
)

// Enum value maps for RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate.
var (
	RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_name = map[int32]string{
		0: "UNKNOWN_SAMPLING_RATE",
		1: "HZ_80",
		2: "HZ_800",
		3: "HZ_8000",
		4: "HZ_16000",
		5: "HZ_48000",
	}
	RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_value = map[string]int32{
		"UNKNOWN_SAMPLING_RATE": 0,
		"HZ_80":                 1,
		"HZ_800":                2,
		"HZ_8000":               3,
		"HZ_16000":              4,
		"HZ_48000":              5,
	}
)

func (x RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate) Enum() *RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate {
	p := new(RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[9].Descriptor()
}

func (RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[9]
}

func (x RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate.Descriptor instead.
func (RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 3, 1}
}

// Configured audio source tuning
type RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning int32

const (
	RedvoxPacketM_StationInformation_AppSettings_UNKNOWN_TUNING    RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning = 0
	RedvoxPacketM_StationInformation_AppSettings_INFRASOUND_TUNING RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning = 1
	RedvoxPacketM_StationInformation_AppSettings_LOW_AUDIO_TUNING  RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning = 2
	RedvoxPacketM_StationInformation_AppSettings_AUDIO_TUNING      RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning = 3
)

// Enum value maps for RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning.
var (
	RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_name = map[int32]string{
		0: "UNKNOWN_TUNING",
		1: "INFRASOUND_TUNING",
		2: "LOW_AUDIO_TUNING",
		3: "AUDIO_TUNING",
	}
	RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_value = map[string]int32{
		"UNKNOWN_TUNING":    0,
		"INFRASOUND_TUNING": 1,
		"LOW_AUDIO_TUNING":  2,
		"AUDIO_TUNING":      3,
	}
)

func (x RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning) Enum() *RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning {
	p := new(RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[10].Descriptor()
}

func (RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[10]
}

func (x RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning.Descriptor instead.
func (RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 3, 2}
}

// Configured input sensors
type RedvoxPacketM_StationInformation_AppSettings_InputSensor int32

const (
	RedvoxPacketM_StationInformation_AppSettings_UNKNOWN_SENSOR      RedvoxPacketM_StationInformation_AppSettings_InputSensor = 0
	RedvoxPacketM_StationInformation_AppSettings_ACCELEROMETER       RedvoxPacketM_StationInformation_AppSettings_InputSensor = 1
	RedvoxPacketM_StationInformation_AppSettings_ACCELEROMETER_FAST  RedvoxPacketM_StationInformation_AppSettings_InputSensor = 2
	RedvoxPacketM_StationInformation_AppSettings_AMBIENT_TEMPERATURE RedvoxPacketM_StationInformation_AppSettings_InputSensor = 3
	RedvoxPacketM_StationInformation_AppSettings_AUDIO               RedvoxPacketM_StationInformation_AppSettings_InputSensor = 4
	RedvoxPacketM_StationInformation_AppSettings_COMPRESSED_AUDIO    RedvoxPacketM_StationInformation_AppSettings_InputSensor = 5
	RedvoxPacketM_StationInformation_AppSettings_GRAVITY             RedvoxPacketM_StationInformation_AppSettings_InputSensor = 6
	RedvoxPacketM_StationInformation_AppSettings_GYROSCOPE           RedvoxPacketM_StationInformation_AppSettings_InputSensor = 7
	RedvoxPacketM_StationInformation_AppSettings_GYROSCOPE_FAST      RedvoxPacketM_StationInformation_AppSettings_InputSensor = 8
	RedvoxPacketM_StationInformation_AppSettings_IMAGE_PER_SECOND    RedvoxPacketM_StationInformation_AppSettings_InputSensor = 9
	RedvoxPacketM_StationInformation_AppSettings_IMAGE_PER_PACKET    RedvoxPacketM_StationInformation_AppSettings_InputSensor = 10
	RedvoxPacketM_StationInformation_AppSettings_LIGHT               RedvoxPacketM_StationInformation_AppSettings_InputSensor = 11
	RedvoxPacketM_StationInformation_AppSettings_LINEAR_ACCELERATION RedvoxPacketM_StationInformation_AppSettings_InputSensor = 12
	RedvoxPacketM_StationInformation_AppSettings_LOCATION            RedvoxPacketM_StationInformation_AppSettings_InputSensor = 13
	RedvoxPacketM_StationInformation_AppSettings_MAGNETOMETER        RedvoxPacketM_StationInformation_AppSettings_InputSensor = 14
	RedvoxPacketM_StationInformation_AppSettings_MAGNETOMETER_FAST   RedvoxPacketM_StationInformation_AppSettings_InputSensor = 15
	RedvoxPacketM_StationInformation_AppSettings_ORIENTATION         RedvoxPacketM_StationInformation_AppSettings_InputSensor = 16
	RedvoxPacketM_StationInformation_AppSettings_PRESSURE            RedvoxPacketM_StationInformation_AppSettings_InputSensor = 17
	RedvoxPacketM_StationInformation_AppSettings_PROXIMITY           RedvoxPacketM_StationInformation_AppSettings_InputSensor = 18
	RedvoxPacketM_StationInformation_AppSettings_RELATIVE_HUMIDITY   RedvoxPacketM_StationInformation_AppSettings_InputSensor = 19
	RedvoxPacketM_StationInformation_AppSettings_ROTATION_VECTOR     RedvoxPacketM_StationInformation_AppSettings_InputSensor = 20
	RedvoxPacketM_StationInformation_AppSettings_VELOCITY            RedvoxPacketM_StationInformation_AppSettings_InputSensor = 21
)

// Enum value maps for RedvoxPacketM_StationInformation_AppSettings_InputSensor.
var (
	RedvoxPacketM_StationInformation_AppSettings_InputSensor_name = map[int32]string{
		0:  "UNKNOWN_SENSOR",
		1:  "ACCELEROMETER",
		2:  "ACCELEROMETER_FAST",
		3:  "AMBIENT_TEMPERATURE",
		4:  "AUDIO",
		5:  "COMPRESSED_AUDIO",
		6:  "GRAVITY",
		7:  "GYROSCOPE",
		8:  "GYROSCOPE_FAST",
		9:  "IMAGE_PER_SECOND",
		10: "IMAGE_PER_PACKET",
		11: "LIGHT",
		12: "LINEAR_ACCELERATION",
		13: "LOCATION",
		14: "MAGNETOMETER",
		15: "MAGNETOMETER_FAST",
		16: "ORIENTATION",
		17: "PRESSURE",
		18: "PROXIMITY",
		19: "RELATIVE_HUMIDITY",
		20: "ROTATION_VECTOR",
		21: "VELOCITY",
	}
	RedvoxPacketM_StationInformation_AppSettings_InputSensor_value = map[string]int32{
		"UNKNOWN_SENSOR":      0,
		"ACCELEROMETER":       1,
		"ACCELEROMETER_FAST":  2,
		"AMBIENT_TEMPERATURE": 3,
		"AUDIO":               4,
		"COMPRESSED_AUDIO":    5,
		"GRAVITY":             6,
		"GYROSCOPE":           7,
		"GYROSCOPE_FAST":      8,
		"IMAGE_PER_SECOND":    9,
		"IMAGE_PER_PACKET":    10,
		"LIGHT":               11,
		"LINEAR_ACCELERATION": 12,
		"LOCATION":            13,
		"MAGNETOMETER":        14,
		"MAGNETOMETER_FAST":   15,
		"ORIENTATION":         16,
		"PRESSURE":            17,
		"PROXIMITY":           18,
		"RELATIVE_HUMIDITY":   19,
		"ROTATION_VECTOR":     20,
		"VELOCITY":            21,
	}
)

func (x RedvoxPacketM_StationInformation_AppSettings_InputSensor) Enum() *RedvoxPacketM_StationInformation_AppSettings_InputSensor {
	p := new(RedvoxPacketM_StationInformation_AppSettings_InputSensor)
	*p = x
	return p
}

func (x RedvoxPacketM_StationInformation_AppSettings_InputSensor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_StationInformation_AppSettings_InputSensor) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[11].Descriptor()
}

func (RedvoxPacketM_StationInformation_AppSettings_InputSensor) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[11]
}

func (x RedvoxPacketM_StationInformation_AppSettings_InputSensor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_AppSettings_InputSensor.Descriptor instead.
func (RedvoxPacketM_StationInformation_AppSettings_InputSensor) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 3, 3}
}

// Method used to score timing metrics
type RedvoxPacketM_TimingInformation_TimingScoreMethod int32

const (
	RedvoxPacketM_TimingInformation_UNKNOWN RedvoxPacketM_TimingInformation_TimingScoreMethod = 0
)

// Enum value maps for RedvoxPacketM_TimingInformation_TimingScoreMethod.
var (
	RedvoxPacketM_TimingInformation_TimingScoreMethod_name = map[int32]string{
		0: "UNKNOWN",
	}
	RedvoxPacketM_TimingInformation_TimingScoreMethod_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x RedvoxPacketM_TimingInformation_TimingScoreMethod) Enum() *RedvoxPacketM_TimingInformation_TimingScoreMethod {
	p := new(RedvoxPacketM_TimingInformation_TimingScoreMethod)
	*p = x
	return p
}

func (x RedvoxPacketM_TimingInformation_TimingScoreMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_TimingInformation_TimingScoreMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[12].Descriptor()
}

func (RedvoxPacketM_TimingInformation_TimingScoreMethod) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[12]
}

func (x RedvoxPacketM_TimingInformation_TimingScoreMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_TimingInformation_TimingScoreMethod.Descriptor instead.
func (RedvoxPacketM_TimingInformation_TimingScoreMethod) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Available audio codecs
type RedvoxPacketM_Sensors_CompressedAudio_AudioCodec int32

const (
	RedvoxPacketM_Sensors_CompressedAudio_UNKNOWN RedvoxPacketM_Sensors_CompressedAudio_AudioCodec = 0
	RedvoxPacketM_Sensors_CompressedAudio_FLAC    RedvoxPacketM_Sensors_CompressedAudio_AudioCodec = 1
)

// Enum value maps for RedvoxPacketM_Sensors_CompressedAudio_AudioCodec.
var (
	RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_name = map[int32]string{
		0: "UNKNOWN",
		1: "FLAC",
	}
	RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_value = map[string]int32{
		"UNKNOWN": 0,
		"FLAC":    1,
	}
)

func (x RedvoxPacketM_Sensors_CompressedAudio_AudioCodec) Enum() *RedvoxPacketM_Sensors_CompressedAudio_AudioCodec {
	p := new(RedvoxPacketM_Sensors_CompressedAudio_AudioCodec)
	*p = x
	return p
}

func (x RedvoxPacketM_Sensors_CompressedAudio_AudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_Sensors_CompressedAudio_AudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[13].Descriptor()
}

func (RedvoxPacketM_Sensors_CompressedAudio_AudioCodec) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[13]
}

func (x RedvoxPacketM_Sensors_CompressedAudio_AudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_CompressedAudio_AudioCodec.Descriptor instead.
func (RedvoxPacketM_Sensors_CompressedAudio_AudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

// An enumeration of location providers
type RedvoxPacketM_Sensors_Location_LocationProvider int32

const (
	RedvoxPacketM_Sensors_Location_UNKNOWN RedvoxPacketM_Sensors_Location_LocationProvider = 0
	RedvoxPacketM_Sensors_Location_NONE    RedvoxPacketM_Sensors_Location_LocationProvider = 1
	RedvoxPacketM_Sensors_Location_USER    RedvoxPacketM_Sensors_Location_LocationProvider = 2
	RedvoxPacketM_Sensors_Location_GPS     RedvoxPacketM_Sensors_Location_LocationProvider = 3
	RedvoxPacketM_Sensors_Location_NETWORK RedvoxPacketM_Sensors_Location_LocationProvider = 4
)

// Enum value maps for RedvoxPacketM_Sensors_Location_LocationProvider.
var (
	RedvoxPacketM_Sensors_Location_LocationProvider_name = map[int32]string{
		0: "UNKNOWN",
		1: "NONE",
		2: "USER",
		3: "GPS",
		4: "NETWORK",
	}
	RedvoxPacketM_Sensors_Location_LocationProvider_value = map[string]int32{
		"UNKNOWN": 0,
		"NONE":    1,
		"USER":    2,
		"GPS":     3,
		"NETWORK": 4,
	}
)

func (x RedvoxPacketM_Sensors_Location_LocationProvider) Enum() *RedvoxPacketM_Sensors_Location_LocationProvider {
	p := new(RedvoxPacketM_Sensors_Location_LocationProvider)
	*p = x
	return p
}

func (x RedvoxPacketM_Sensors_Location_LocationProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_Sensors_Location_LocationProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[14].Descriptor()
}

func (RedvoxPacketM_Sensors_Location_LocationProvider) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[14]
}

func (x RedvoxPacketM_Sensors_Location_LocationProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Location_LocationProvider.Descriptor instead.
func (RedvoxPacketM_Sensors_Location_LocationProvider) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 4, 0}
}

// An enumeration for the various scoring methods for the "best of" metrics
type RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod int32

const (
	RedvoxPacketM_Sensors_Location_BestLocation_UNKNOWN_METHOD RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod = 0
)

// Enum value maps for RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod.
var (
	RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod_name = map[int32]string{
		0: "UNKNOWN_METHOD",
	}
	RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod_value = map[string]int32{
		"UNKNOWN_METHOD": 0,
	}
)

func (x RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod) Enum() *RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod {
	p := new(RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod)
	*p = x
	return p
}

func (x RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[15].Descriptor()
}

func (RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[15]
}

func (x RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod.Descriptor instead.
func (RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 4, 1, 0}
}

// Codec used to encode the image
type RedvoxPacketM_Sensors_Image_ImageCodec int32

const (
	RedvoxPacketM_Sensors_Image_UNKNOWN RedvoxPacketM_Sensors_Image_ImageCodec = 0
	RedvoxPacketM_Sensors_Image_PNG     RedvoxPacketM_Sensors_Image_ImageCodec = 1
	RedvoxPacketM_Sensors_Image_JPG     RedvoxPacketM_Sensors_Image_ImageCodec = 2
	RedvoxPacketM_Sensors_Image_BMP     RedvoxPacketM_Sensors_Image_ImageCodec = 3
)

// Enum value maps for RedvoxPacketM_Sensors_Image_ImageCodec.
var (
	RedvoxPacketM_Sensors_Image_ImageCodec_name = map[int32]string{
		0: "UNKNOWN",
		1: "PNG",
		2: "JPG",
		3: "BMP",
	}
	RedvoxPacketM_Sensors_Image_ImageCodec_value = map[string]int32{
		"UNKNOWN": 0,
		"PNG":     1,
		"JPG":     2,
		"BMP":     3,
	}
)

func (x RedvoxPacketM_Sensors_Image_ImageCodec) Enum() *RedvoxPacketM_Sensors_Image_ImageCodec {
	p := new(RedvoxPacketM_Sensors_Image_ImageCodec)
	*p = x
	return p
}

func (x RedvoxPacketM_Sensors_Image_ImageCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedvoxPacketM_Sensors_Image_ImageCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[16].Descriptor()
}

func (RedvoxPacketM_Sensors_Image_ImageCodec) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[16]
}

func (x RedvoxPacketM_Sensors_Image_ImageCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Image_ImageCodec.Descriptor instead.
func (RedvoxPacketM_Sensors_Image_ImageCodec) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 6, 0}
}

type AcquisitionResponse_ResponseType int32

const (
	// Unknown (default) response type
	AcquisitionResponse_UNKNOWN AcquisitionResponse_ResponseType = 0
	// No issues with packet
	AcquisitionResponse_OK AcquisitionResponse_ResponseType = 1
	// An authentication error has occurred
	AcquisitionResponse_AUTH_ERROR AcquisitionResponse_ResponseType = 2
	// An error with the data decoding or data quality
	AcquisitionResponse_DATA_ERROR AcquisitionResponse_ResponseType = 3
	// Any other errors
	AcquisitionResponse_OTHER_ERROR AcquisitionResponse_ResponseType = 4
)

// Enum value maps for AcquisitionResponse_ResponseType.
var (
	AcquisitionResponse_ResponseType_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "AUTH_ERROR",
		3: "DATA_ERROR",
		4: "OTHER_ERROR",
	}
	AcquisitionResponse_ResponseType_value = map[string]int32{
		"UNKNOWN":     0,
		"OK":          1,
		"AUTH_ERROR":  2,
		"DATA_ERROR":  3,
		"OTHER_ERROR": 4,
	}
)

func (x AcquisitionResponse_ResponseType) Enum() *AcquisitionResponse_ResponseType {
	p := new(AcquisitionResponse_ResponseType)
	*p = x
	return p
}

func (x AcquisitionResponse_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquisitionResponse_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_redvox_api_m_proto_enumTypes[17].Descriptor()
}

func (AcquisitionResponse_ResponseType) Type() protoreflect.EnumType {
	return &file_redvox_api_m_proto_enumTypes[17]
}

func (x AcquisitionResponse_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquisitionResponse_ResponseType.Descriptor instead.
func (AcquisitionResponse_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{3, 0}
}

type RedvoxPacketM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The API version, should always be 1000
	Api float32 `protobuf:"fixed32,1,opt,name=api,proto3" json:"api,omitempty"`
	// The sub-api version.
	SubApi float32 `protobuf:"fixed32,2,opt,name=sub_api,json=subApi,proto3" json:"sub_api,omitempty"`
	// Station metadata/metrics
	StationInformation *RedvoxPacketM_StationInformation `protobuf:"bytes,3,opt,name=station_information,json=stationInformation,proto3" json:"station_information,omitempty"`
	// Timing information, synch exchanges
	TimingInformation *RedvoxPacketM_TimingInformation `protobuf:"bytes,4,opt,name=timing_information,json=timingInformation,proto3" json:"timing_information,omitempty"`
	// Sensors, payloads, etc
	Sensors *RedvoxPacketM_Sensors `protobuf:"bytes,5,opt,name=sensors,proto3" json:"sensors,omitempty"`
	// Derived event streams
	EventStreams []*RedvoxPacketM_EventStream `protobuf:"bytes,6,rep,name=event_streams,json=eventStreams,proto3" json:"event_streams,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM) Reset() {
	*x = RedvoxPacketM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM) ProtoMessage() {}

func (x *RedvoxPacketM) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0}
}

func (x *RedvoxPacketM) GetApi() float32 {
	if x != nil {
		return x.Api
	}
	return 0
}

func (x *RedvoxPacketM) GetSubApi() float32 {
	if x != nil {
		return x.SubApi
	}
	return 0
}

func (x *RedvoxPacketM) GetStationInformation() *RedvoxPacketM_StationInformation {
	if x != nil {
		return x.StationInformation
	}
	return nil
}

func (x *RedvoxPacketM) GetTimingInformation() *RedvoxPacketM_TimingInformation {
	if x != nil {
		return x.TimingInformation
	}
	return nil
}

func (x *RedvoxPacketM) GetSensors() *RedvoxPacketM_Sensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *RedvoxPacketM) GetEventStreams() []*RedvoxPacketM_EventStream {
	if x != nil {
		return x.EventStreams
	}
	return nil
}

func (x *RedvoxPacketM) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Message type for providing E2E encryption.
// The header is encrypted via RedVox keys.
// The body is encrypted via user keys.
// Each payload consists of bytes from the following transformations
//
//	Serialization: Object -> serialize to bytes -> LZ4 frame compress -> encrypt -> payload bytes
//	Deserialization: Payload bytes -> decrypt -> LZ4 frame decompress -> deserialize from bytes -> object
type EncryptedRedvoxPacketM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// redvox encrypt(compress(EncryptedRedvoxPacket1000.Header))
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// user encrypt(compress(RedvoxPacketApi1000))
	Packet []byte `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
}

func (x *EncryptedRedvoxPacketM) Reset() {
	*x = EncryptedRedvoxPacketM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedRedvoxPacketM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedRedvoxPacketM) ProtoMessage() {}

func (x *EncryptedRedvoxPacketM) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedRedvoxPacketM.ProtoReflect.Descriptor instead.
func (*EncryptedRedvoxPacketM) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptedRedvoxPacketM) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EncryptedRedvoxPacketM) GetPacket() []byte {
	if x != nil {
		return x.Packet
	}
	return nil
}

// --------- Message types for communicating with RedVox data acquisition servers
// Message for sending RedVox data to a redvox.io data acquisition service.
type AcquisitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server provided authentication token
	AuthToken string `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// The API provided firebase token
	FirebaseToken string `protobuf:"bytes,2,opt,name=firebase_token,json=firebaseToken,proto3" json:"firebase_token,omitempty"`
	// A checksum of the payload bytes
	Checksum int64 `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// If set, then the payload contains
	IsEncrypted bool `protobuf:"varint,4,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
	// The compressed packet to send
	Payload []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// A variable that starts at 0 when the data stream starts and increments by one for each transmission
	SeqId int64 `protobuf:"varint,6,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
}

func (x *AcquisitionRequest) Reset() {
	*x = AcquisitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionRequest) ProtoMessage() {}

func (x *AcquisitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionRequest.ProtoReflect.Descriptor instead.
func (*AcquisitionRequest) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{2}
}

func (x *AcquisitionRequest) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *AcquisitionRequest) GetFirebaseToken() string {
	if x != nil {
		return x.FirebaseToken
	}
	return ""
}

func (x *AcquisitionRequest) GetChecksum() int64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *AcquisitionRequest) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *AcquisitionRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AcquisitionRequest) GetSeqId() int64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

// Response from data acquisition services.
type AcquisitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response type (as above)
	ResponseType AcquisitionResponse_ResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=redvox_api_m.AcquisitionResponse_ResponseType" json:"response_type,omitempty"`
	// Checksum computed by server
	Checksum int64 `protobuf:"varint,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// Any other error details
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	// If set, client to should attempt to resend the file
	// otherwise, don't resend the file.
	Resend bool `protobuf:"varint,4,opt,name=resend,proto3" json:"resend,omitempty"`
	// A copy of the seq_id provided in the AcquisitionRequest
	SeqId int64 `protobuf:"varint,5,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
}

func (x *AcquisitionResponse) Reset() {
	*x = AcquisitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionResponse) ProtoMessage() {}

func (x *AcquisitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionResponse.ProtoReflect.Descriptor instead.
func (*AcquisitionResponse) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{3}
}

func (x *AcquisitionResponse) GetResponseType() AcquisitionResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return AcquisitionResponse_UNKNOWN
}

func (x *AcquisitionResponse) GetChecksum() int64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *AcquisitionResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *AcquisitionResponse) GetResend() bool {
	if x != nil {
		return x.Resend
	}
	return false
}

func (x *AcquisitionResponse) GetSeqId() int64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

// --------- Message types for communicating with RedVox v3 time synchronization service
type SynchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the station
	StationId string `protobuf:"bytes,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
	// Uuid of the station
	StationUuid string `protobuf:"bytes,2,opt,name=station_uuid,json=stationUuid,proto3" json:"station_uuid,omitempty"`
	// The overall number of synch requests made. Starts at 0 on recording start.
	SeqId uint32 `protobuf:"varint,3,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	// The seq id within a single exchange
	SubSeqId uint32 `protobuf:"varint,4,opt,name=sub_seq_id,json=subSeqId,proto3" json:"sub_seq_id,omitempty"`
}

func (x *SynchRequest) Reset() {
	*x = SynchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchRequest) ProtoMessage() {}

func (x *SynchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchRequest.ProtoReflect.Descriptor instead.
func (*SynchRequest) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{4}
}

func (x *SynchRequest) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

func (x *SynchRequest) GetStationUuid() string {
	if x != nil {
		return x.StationUuid
	}
	return ""
}

func (x *SynchRequest) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *SynchRequest) GetSubSeqId() uint32 {
	if x != nil {
		return x.SubSeqId
	}
	return 0
}

type SynchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should match same field from request
	StationId string `protobuf:"bytes,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
	// Should match same field from request
	StationUuid string `protobuf:"bytes,2,opt,name=station_uuid,json=stationUuid,proto3" json:"station_uuid,omitempty"`
	// Should match same field from request
	SeqId uint32 `protobuf:"varint,3,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	// Should be req field + 1
	SubSeqId uint32 `protobuf:"varint,4,opt,name=sub_seq_id,json=subSeqId,proto3" json:"sub_seq_id,omitempty"`
	// Time synch server received request
	RecvTsUs uint64 `protobuf:"varint,5,opt,name=recv_ts_us,json=recvTsUs,proto3" json:"recv_ts_us,omitempty"`
	// Time synch server sent response
	SendTsUs uint64 `protobuf:"varint,6,opt,name=send_ts_us,json=sendTsUs,proto3" json:"send_ts_us,omitempty"`
}

func (x *SynchResponse) Reset() {
	*x = SynchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchResponse) ProtoMessage() {}

func (x *SynchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchResponse.ProtoReflect.Descriptor instead.
func (*SynchResponse) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{5}
}

func (x *SynchResponse) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

func (x *SynchResponse) GetStationUuid() string {
	if x != nil {
		return x.StationUuid
	}
	return ""
}

func (x *SynchResponse) GetSeqId() uint32 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *SynchResponse) GetSubSeqId() uint32 {
	if x != nil {
		return x.SubSeqId
	}
	return 0
}

func (x *SynchResponse) GetRecvTsUs() uint64 {
	if x != nil {
		return x.RecvTsUs
	}
	return 0
}

func (x *SynchResponse) GetSendTsUs() uint64 {
	if x != nil {
		return x.SendTsUs
	}
	return 0
}

// This message contains station metadata and related station state metrics
type RedvoxPacketM_StationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user selectable station id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The software provided UUID
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Human friendly description of station (i.e. ISLA_0)
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Authentication ID (user's email)
	AuthId string `protobuf:"bytes,4,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	// Make of the station
	Make string `protobuf:"bytes,5,opt,name=make,proto3" json:"make,omitempty"`
	// Model of the station
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// OS of the station
	Os RedvoxPacketM_StationInformation_OsType `protobuf:"varint,7,opt,name=os,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_OsType" json:"os,omitempty"`
	// OS version of the station
	OsVersion string `protobuf:"bytes,8,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// App version on the station
	AppVersion string `protobuf:"bytes,9,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// If the station was set to record privately when this packet was recorded
	IsPrivate bool `protobuf:"varint,10,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// A copy of the App's settings
	AppSettings *RedvoxPacketM_StationInformation_AppSettings `protobuf:"bytes,11,opt,name=app_settings,json=appSettings,proto3" json:"app_settings,omitempty"`
	// Detail station performance metrics
	StationMetrics *RedvoxPacketM_StationInformation_StationMetrics `protobuf:"bytes,12,opt,name=station_metrics,json=stationMetrics,proto3" json:"station_metrics,omitempty"`
	// URLs of remote services utilized by this station
	ServiceUrls *RedvoxPacketM_StationInformation_ServiceUrls `protobuf:"bytes,13,opt,name=service_urls,json=serviceUrls,proto3" json:"service_urls,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_StationInformation) Reset() {
	*x = RedvoxPacketM_StationInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_StationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_StationInformation) ProtoMessage() {}

func (x *RedvoxPacketM_StationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_StationInformation) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RedvoxPacketM_StationInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetMake() string {
	if x != nil {
		return x.Make
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetOs() RedvoxPacketM_StationInformation_OsType {
	if x != nil {
		return x.Os
	}
	return RedvoxPacketM_StationInformation_UNKNOWN_OS
}

func (x *RedvoxPacketM_StationInformation) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *RedvoxPacketM_StationInformation) GetAppSettings() *RedvoxPacketM_StationInformation_AppSettings {
	if x != nil {
		return x.AppSettings
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation) GetStationMetrics() *RedvoxPacketM_StationInformation_StationMetrics {
	if x != nil {
		return x.StationMetrics
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation) GetServiceUrls() *RedvoxPacketM_StationInformation_ServiceUrls {
	if x != nil {
		return x.ServiceUrls
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Stores timing information and related metrics
// See: https://github.com/RedVoxInc/redvox-api-1000/src/master/docs/standards/keeping_time.md
type RedvoxPacketM_TimingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start timestamp of the packet using the os clock (corresponding to first audio sample)
	PacketStartOsTimestamp float64 `protobuf:"fixed64,1,opt,name=packet_start_os_timestamp,json=packetStartOsTimestamp,proto3" json:"packet_start_os_timestamp,omitempty"`
	// Start timestamp of the packet using machine time (corresponding to the first audio sample)
	PacketStartMachTimestamp float64 `protobuf:"fixed64,2,opt,name=packet_start_mach_timestamp,json=packetStartMachTimestamp,proto3" json:"packet_start_mach_timestamp,omitempty"`
	// End timestamp of the packet using the os clock (corresponding to the last audio sample)
	PacketEndOsTimestamp float64 `protobuf:"fixed64,3,opt,name=packet_end_os_timestamp,json=packetEndOsTimestamp,proto3" json:"packet_end_os_timestamp,omitempty"`
	// End timestamp of the packet using machine time (corresponding to the last audio sample)
	PacketEndMachTimestamp float64 `protobuf:"fixed64,4,opt,name=packet_end_mach_timestamp,json=packetEndMachTimestamp,proto3" json:"packet_end_mach_timestamp,omitempty"`
	// Timestamp that the packet arrived at the acquisition server
	ServerAcquisitionArrivalTimestamp float64 `protobuf:"fixed64,5,opt,name=server_acquisition_arrival_timestamp,json=serverAcquisitionArrivalTimestamp,proto3" json:"server_acquisition_arrival_timestamp,omitempty"`
	// The start of the app as machine time
	AppStartMachTimestamp float64 `protobuf:"fixed64,6,opt,name=app_start_mach_timestamp,json=appStartMachTimestamp,proto3" json:"app_start_mach_timestamp,omitempty"`
	// An array of synchronization params from the synch server
	SynchExchanges []*RedvoxPacketM_TimingInformation_SynchExchange `protobuf:"bytes,7,rep,name=synch_exchanges,json=synchExchanges,proto3" json:"synch_exchanges,omitempty"`
	// The best latency as determined from the synch params in microseconds
	BestLatency float32 `protobuf:"fixed32,8,opt,name=best_latency,json=bestLatency,proto3" json:"best_latency,omitempty"`
	// The best offset as determined from the synch params in microseconds
	BestOffset float32 `protobuf:"fixed32,9,opt,name=best_offset,json=bestOffset,proto3" json:"best_offset,omitempty"`
	// The overall timing score
	Score float32 `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`
	// Method used to provide score
	ScoreMethod RedvoxPacketM_TimingInformation_TimingScoreMethod `protobuf:"varint,11,opt,name=score_method,json=scoreMethod,proto3,enum=redvox_api_m.RedvoxPacketM_TimingInformation_TimingScoreMethod" json:"score_method,omitempty"`
	// A unit describing the time (should always be MICROSECONDS_SINCE_UNIX_EPOCH)
	Unit RedvoxPacketM_Unit `protobuf:"varint,12,opt,name=unit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"unit,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,13,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_TimingInformation) Reset() {
	*x = RedvoxPacketM_TimingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_TimingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_TimingInformation) ProtoMessage() {}

func (x *RedvoxPacketM_TimingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_TimingInformation.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_TimingInformation) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RedvoxPacketM_TimingInformation) GetPacketStartOsTimestamp() float64 {
	if x != nil {
		return x.PacketStartOsTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetPacketStartMachTimestamp() float64 {
	if x != nil {
		return x.PacketStartMachTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetPacketEndOsTimestamp() float64 {
	if x != nil {
		return x.PacketEndOsTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetPacketEndMachTimestamp() float64 {
	if x != nil {
		return x.PacketEndMachTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetServerAcquisitionArrivalTimestamp() float64 {
	if x != nil {
		return x.ServerAcquisitionArrivalTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetAppStartMachTimestamp() float64 {
	if x != nil {
		return x.AppStartMachTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetSynchExchanges() []*RedvoxPacketM_TimingInformation_SynchExchange {
	if x != nil {
		return x.SynchExchanges
	}
	return nil
}

func (x *RedvoxPacketM_TimingInformation) GetBestLatency() float32 {
	if x != nil {
		return x.BestLatency
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetBestOffset() float32 {
	if x != nil {
		return x.BestOffset
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation) GetScoreMethod() RedvoxPacketM_TimingInformation_TimingScoreMethod {
	if x != nil {
		return x.ScoreMethod
	}
	return RedvoxPacketM_TimingInformation_UNKNOWN
}

func (x *RedvoxPacketM_TimingInformation) GetUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.Unit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_TimingInformation) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Collection of available sensor types
// See: https://github.com/RedVoxInc/redvox-api-1000/src/master/docs/standards/standard_sensor_units.md
type RedvoxPacketM_Sensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// meters/second^2
	Accelerometer *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,1,opt,name=accelerometer,proto3" json:"accelerometer,omitempty"`
	// degrees Celsius
	AmbientTemperature *RedvoxPacketM_Sensors_Single `protobuf:"bytes,2,opt,name=ambient_temperature,json=ambientTemperature,proto3" json:"ambient_temperature,omitempty"`
	// normalized counts
	Audio *RedvoxPacketM_Sensors_Audio `protobuf:"bytes,3,opt,name=audio,proto3" json:"audio,omitempty"`
	// bytes (codec specific)
	CompressedAudio *RedvoxPacketM_Sensors_CompressedAudio `protobuf:"bytes,4,opt,name=compressed_audio,json=compressedAudio,proto3" json:"compressed_audio,omitempty"`
	// meters/second^2
	Gravity *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,5,opt,name=gravity,proto3" json:"gravity,omitempty"`
	// radians/second
	Gyroscope *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,6,opt,name=gyroscope,proto3" json:"gyroscope,omitempty"`
	// bytes (codec specific)
	Image *RedvoxPacketM_Sensors_Image `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	// lux
	Light *RedvoxPacketM_Sensors_Single `protobuf:"bytes,8,opt,name=light,proto3" json:"light,omitempty"`
	// meters/second^2
	LinearAcceleration *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,9,opt,name=linear_acceleration,json=linearAcceleration,proto3" json:"linear_acceleration,omitempty"`
	// See standard
	Location *RedvoxPacketM_Sensors_Location `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	// microtesla
	Magnetometer *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,11,opt,name=magnetometer,proto3" json:"magnetometer,omitempty"`
	// radians
	Orientation *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,12,opt,name=orientation,proto3" json:"orientation,omitempty"`
	// kilopascal
	Pressure *RedvoxPacketM_Sensors_Single `protobuf:"bytes,13,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// on, off, cm
	Proximity *RedvoxPacketM_Sensors_Single `protobuf:"bytes,14,opt,name=proximity,proto3" json:"proximity,omitempty"`
	// percentage
	RelativeHumidity *RedvoxPacketM_Sensors_Single `protobuf:"bytes,15,opt,name=relative_humidity,json=relativeHumidity,proto3" json:"relative_humidity,omitempty"`
	// Unitless
	RotationVector *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,16,opt,name=rotation_vector,json=rotationVector,proto3" json:"rotation_vector,omitempty"`
	// m/s
	Velocity *RedvoxPacketM_Sensors_Xyz `protobuf:"bytes,17,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,18,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors) Reset() {
	*x = RedvoxPacketM_Sensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RedvoxPacketM_Sensors) GetAccelerometer() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.Accelerometer
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetAmbientTemperature() *RedvoxPacketM_Sensors_Single {
	if x != nil {
		return x.AmbientTemperature
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetAudio() *RedvoxPacketM_Sensors_Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetCompressedAudio() *RedvoxPacketM_Sensors_CompressedAudio {
	if x != nil {
		return x.CompressedAudio
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetGravity() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.Gravity
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetGyroscope() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.Gyroscope
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetImage() *RedvoxPacketM_Sensors_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetLight() *RedvoxPacketM_Sensors_Single {
	if x != nil {
		return x.Light
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetLinearAcceleration() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.LinearAcceleration
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetLocation() *RedvoxPacketM_Sensors_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetMagnetometer() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.Magnetometer
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetOrientation() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetPressure() *RedvoxPacketM_Sensors_Single {
	if x != nil {
		return x.Pressure
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetProximity() *RedvoxPacketM_Sensors_Single {
	if x != nil {
		return x.Proximity
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetRelativeHumidity() *RedvoxPacketM_Sensors_Single {
	if x != nil {
		return x.RelativeHumidity
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetRotationVector() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.RotationVector
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetVelocity() *RedvoxPacketM_Sensors_Xyz {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *RedvoxPacketM_Sensors) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Provides a mechanism for storing various generic derived events
type RedvoxPacketM_EventStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this stream
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of timestamps, each associated with one Event
	Timestamps *RedvoxPacketM_TimingPayload `protobuf:"bytes,2,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// List of events that belong to this stream
	Events []*RedvoxPacketM_EventStream_Event `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_EventStream) Reset() {
	*x = RedvoxPacketM_EventStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_EventStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_EventStream) ProtoMessage() {}

func (x *RedvoxPacketM_EventStream) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_EventStream.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_EventStream) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RedvoxPacketM_EventStream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RedvoxPacketM_EventStream) GetTimestamps() *RedvoxPacketM_TimingPayload {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RedvoxPacketM_EventStream) GetEvents() []*RedvoxPacketM_EventStream_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *RedvoxPacketM_EventStream) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Combines a unit, sample values, and value statistics
// Used to store collections of samples, their unit, and the statistics for those samples.
type RedvoxPacketM_SamplePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unit of payload values
	Unit RedvoxPacketM_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"unit,omitempty"`
	// Values in payload
	Values []float32 `protobuf:"fixed32,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	// Statistics of stored values
	ValueStatistics *RedvoxPacketM_SummaryStatistics `protobuf:"bytes,3,opt,name=value_statistics,json=valueStatistics,proto3" json:"value_statistics,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_SamplePayload) Reset() {
	*x = RedvoxPacketM_SamplePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_SamplePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_SamplePayload) ProtoMessage() {}

func (x *RedvoxPacketM_SamplePayload) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_SamplePayload.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_SamplePayload) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RedvoxPacketM_SamplePayload) GetUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.Unit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_SamplePayload) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *RedvoxPacketM_SamplePayload) GetValueStatistics() *RedvoxPacketM_SummaryStatistics {
	if x != nil {
		return x.ValueStatistics
	}
	return nil
}

func (x *RedvoxPacketM_SamplePayload) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Exactly like a SamplePayload, but payload values are 64-bit floats rather than 32-bit floats.
type RedvoxPacketM_DoubleSamplePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unit of payload values
	Unit RedvoxPacketM_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"unit,omitempty"`
	// Values in payload
	Values []float64 `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	// Statistics of stored values
	ValueStatistics *RedvoxPacketM_SummaryStatistics `protobuf:"bytes,3,opt,name=value_statistics,json=valueStatistics,proto3" json:"value_statistics,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_DoubleSamplePayload) Reset() {
	*x = RedvoxPacketM_DoubleSamplePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_DoubleSamplePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_DoubleSamplePayload) ProtoMessage() {}

func (x *RedvoxPacketM_DoubleSamplePayload) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_DoubleSamplePayload.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_DoubleSamplePayload) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RedvoxPacketM_DoubleSamplePayload) GetUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.Unit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_DoubleSamplePayload) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *RedvoxPacketM_DoubleSamplePayload) GetValueStatistics() *RedvoxPacketM_SummaryStatistics {
	if x != nil {
		return x.ValueStatistics
	}
	return nil
}

func (x *RedvoxPacketM_DoubleSamplePayload) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Combines a unit, sample values, and value statistics
// Used to store collections of samples, their unit, and the statistics for those samples.
type RedvoxPacketM_TimingPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unit of payload values
	Unit RedvoxPacketM_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"unit,omitempty"`
	// Values in payload
	Timestamps []float64 `protobuf:"fixed64,2,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	// Statistics of stored values
	TimestampStatistics *RedvoxPacketM_SummaryStatistics `protobuf:"bytes,3,opt,name=timestamp_statistics,json=timestampStatistics,proto3" json:"timestamp_statistics,omitempty"`
	// Mean sample rate in Hz
	MeanSampleRate float32 `protobuf:"fixed32,4,opt,name=mean_sample_rate,json=meanSampleRate,proto3" json:"mean_sample_rate,omitempty"`
	// Standard deviation of sample rate in Hz
	StdevSampleRate float32 `protobuf:"fixed32,5,opt,name=stdev_sample_rate,json=stdevSampleRate,proto3" json:"stdev_sample_rate,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_TimingPayload) Reset() {
	*x = RedvoxPacketM_TimingPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_TimingPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_TimingPayload) ProtoMessage() {}

func (x *RedvoxPacketM_TimingPayload) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_TimingPayload.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_TimingPayload) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RedvoxPacketM_TimingPayload) GetUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.Unit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_TimingPayload) GetTimestamps() []float64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RedvoxPacketM_TimingPayload) GetTimestampStatistics() *RedvoxPacketM_SummaryStatistics {
	if x != nil {
		return x.TimestampStatistics
	}
	return nil
}

func (x *RedvoxPacketM_TimingPayload) GetMeanSampleRate() float32 {
	if x != nil {
		return x.MeanSampleRate
	}
	return 0
}

func (x *RedvoxPacketM_TimingPayload) GetStdevSampleRate() float32 {
	if x != nil {
		return x.StdevSampleRate
	}
	return 0
}

func (x *RedvoxPacketM_TimingPayload) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Common statistics stored with payloads
type RedvoxPacketM_SummaryStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total count of values included in the statistics
	Count float64 `protobuf:"fixed64,1,opt,name=count,proto3" json:"count,omitempty"`
	// The mean of the values
	Mean float64 `protobuf:"fixed64,2,opt,name=mean,proto3" json:"mean,omitempty"`
	// The standard deviation of the values
	StandardDeviation float64 `protobuf:"fixed64,3,opt,name=standard_deviation,json=standardDeviation,proto3" json:"standard_deviation,omitempty"`
	// The minimum value
	Min float64 `protobuf:"fixed64,4,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum value
	Max float64 `protobuf:"fixed64,5,opt,name=max,proto3" json:"max,omitempty"`
	// The range of the values
	Range float64 `protobuf:"fixed64,6,opt,name=range,proto3" json:"range,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_SummaryStatistics) Reset() {
	*x = RedvoxPacketM_SummaryStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_SummaryStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_SummaryStatistics) ProtoMessage() {}

func (x *RedvoxPacketM_SummaryStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_SummaryStatistics.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_SummaryStatistics) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RedvoxPacketM_SummaryStatistics) GetCount() float64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RedvoxPacketM_SummaryStatistics) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *RedvoxPacketM_SummaryStatistics) GetStandardDeviation() float64 {
	if x != nil {
		return x.StandardDeviation
	}
	return 0
}

func (x *RedvoxPacketM_SummaryStatistics) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RedvoxPacketM_SummaryStatistics) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RedvoxPacketM_SummaryStatistics) GetRange() float64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *RedvoxPacketM_SummaryStatistics) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Backend service URLs used in the creation of this packet
type RedvoxPacketM_StationInformation_ServiceUrls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the authentication server
	AuthServer string `protobuf:"bytes,1,opt,name=auth_server,json=authServer,proto3" json:"auth_server,omitempty"`
	// The URL of the synch server
	SynchServer string `protobuf:"bytes,2,opt,name=synch_server,json=synchServer,proto3" json:"synch_server,omitempty"`
	// The URL of the acquisition server
	AcquisitionServer string `protobuf:"bytes,3,opt,name=acquisition_server,json=acquisitionServer,proto3" json:"acquisition_server,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_StationInformation_ServiceUrls) Reset() {
	*x = RedvoxPacketM_StationInformation_ServiceUrls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_StationInformation_ServiceUrls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_StationInformation_ServiceUrls) ProtoMessage() {}

func (x *RedvoxPacketM_StationInformation_ServiceUrls) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_ServiceUrls.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_StationInformation_ServiceUrls) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *RedvoxPacketM_StationInformation_ServiceUrls) GetAuthServer() string {
	if x != nil {
		return x.AuthServer
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_ServiceUrls) GetSynchServer() string {
	if x != nil {
		return x.SynchServer
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_ServiceUrls) GetAcquisitionServer() string {
	if x != nil {
		return x.AcquisitionServer
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_ServiceUrls) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Collection of station state and performance metrics
type RedvoxPacketM_StationInformation_StationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamps associated with following sensor state metrics
	Timestamps *RedvoxPacketM_TimingPayload `protobuf:"bytes,1,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// Type of network connection
	NetworkType []RedvoxPacketM_StationInformation_StationMetrics_NetworkType `protobuf:"varint,2,rep,packed,name=network_type,json=networkType,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_StationMetrics_NetworkType" json:"network_type,omitempty"`
	// State of the cellular service
	CellServiceState []RedvoxPacketM_StationInformation_StationMetrics_CellServiceState `protobuf:"varint,3,rep,packed,name=cell_service_state,json=cellServiceState,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_StationMetrics_CellServiceState" json:"cell_service_state,omitempty"`
	// A value representing the strength of the network connection in decibels
	NetworkStrength *RedvoxPacketM_SamplePayload `protobuf:"bytes,4,opt,name=network_strength,json=networkStrength,proto3" json:"network_strength,omitempty"`
	// Internal temperature of station in degrees Celsius
	Temperature *RedvoxPacketM_SamplePayload `protobuf:"bytes,5,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Remaining percentage of station's battery
	Battery *RedvoxPacketM_SamplePayload `protobuf:"bytes,6,opt,name=battery,proto3" json:"battery,omitempty"`
	// Current in microamperes
	BatteryCurrent *RedvoxPacketM_SamplePayload `protobuf:"bytes,7,opt,name=battery_current,json=batteryCurrent,proto3" json:"battery_current,omitempty"`
	// Available ram in bytes
	AvailableRam *RedvoxPacketM_SamplePayload `protobuf:"bytes,8,opt,name=available_ram,json=availableRam,proto3" json:"available_ram,omitempty"`
	// Available disk space in bytes
	AvailableDisk *RedvoxPacketM_SamplePayload `protobuf:"bytes,9,opt,name=available_disk,json=availableDisk,proto3" json:"available_disk,omitempty"`
	// CPU utilization as a percentage
	CpuUtilization *RedvoxPacketM_SamplePayload `protobuf:"bytes,10,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty"`
	// Power state enumeration
	PowerState []RedvoxPacketM_StationInformation_StationMetrics_PowerState `protobuf:"varint,11,rep,packed,name=power_state,json=powerState,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_StationMetrics_PowerState" json:"power_state,omitempty"`
	// If a wifi wake lock is being utilized
	WifiWakeLock []RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock `protobuf:"varint,12,rep,packed,name=wifi_wake_lock,json=wifiWakeLock,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock" json:"wifi_wake_lock,omitempty"`
	// The screen state (if available)
	ScreenState []RedvoxPacketM_StationInformation_StationMetrics_ScreenState `protobuf:"varint,13,rep,packed,name=screen_state,json=screenState,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_StationMetrics_ScreenState" json:"screen_state,omitempty"`
	// Screen brightness as a percentage
	ScreenBrightness *RedvoxPacketM_SamplePayload `protobuf:"bytes,14,opt,name=screen_brightness,json=screenBrightness,proto3" json:"screen_brightness,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,15,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) Reset() {
	*x = RedvoxPacketM_StationInformation_StationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_StationInformation_StationMetrics) ProtoMessage() {}

func (x *RedvoxPacketM_StationInformation_StationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_StationMetrics.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_StationInformation_StationMetrics) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetTimestamps() *RedvoxPacketM_TimingPayload {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetNetworkType() []RedvoxPacketM_StationInformation_StationMetrics_NetworkType {
	if x != nil {
		return x.NetworkType
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetCellServiceState() []RedvoxPacketM_StationInformation_StationMetrics_CellServiceState {
	if x != nil {
		return x.CellServiceState
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetNetworkStrength() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.NetworkStrength
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetTemperature() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetBattery() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetBatteryCurrent() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.BatteryCurrent
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetAvailableRam() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.AvailableRam
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetAvailableDisk() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.AvailableDisk
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetCpuUtilization() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.CpuUtilization
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetPowerState() []RedvoxPacketM_StationInformation_StationMetrics_PowerState {
	if x != nil {
		return x.PowerState
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetWifiWakeLock() []RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock {
	if x != nil {
		return x.WifiWakeLock
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetScreenState() []RedvoxPacketM_StationInformation_StationMetrics_ScreenState {
	if x != nil {
		return x.ScreenState
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetScreenBrightness() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.ScreenBrightness
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_StationMetrics) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A message that encapsulates the state of the app settings
type RedvoxPacketM_StationInformation_AppSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The selected audio sampling rate
	AudioSamplingRate RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate `protobuf:"varint,1,opt,name=audio_sampling_rate,json=audioSamplingRate,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate" json:"audio_sampling_rate,omitempty"`
	SamplesPerWindow  float32                                                        `protobuf:"fixed32,2,opt,name=samples_per_window,json=samplesPerWindow,proto3" json:"samples_per_window,omitempty"`
	// The selected audio source tuning
	AudioSourceTuning RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning `protobuf:"varint,3,opt,name=audio_source_tuning,json=audioSourceTuning,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning" json:"audio_source_tuning,omitempty"`
	// Additional input sensors
	AdditionalInputSensors []RedvoxPacketM_StationInformation_AppSettings_InputSensor `protobuf:"varint,4,rep,packed,name=additional_input_sensors,json=additionalInputSensors,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_AppSettings_InputSensor" json:"additional_input_sensors,omitempty"`
	// Station automatically records on start
	AutomaticallyRecord bool `protobuf:"varint,5,opt,name=automatically_record,json=automaticallyRecord,proto3" json:"automatically_record,omitempty"`
	// App automatically starts on station
	LaunchAtPowerUp bool `protobuf:"varint,6,opt,name=launch_at_power_up,json=launchAtPowerUp,proto3" json:"launch_at_power_up,omitempty"`
	// User selectable station id
	StationId string `protobuf:"bytes,7,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
	// User selectable station description
	StationDescription string `protobuf:"bytes,8,opt,name=station_description,json=stationDescription,proto3" json:"station_description,omitempty"`
	// Is station data pushed to server?
	PushToServer bool `protobuf:"varint,9,opt,name=push_to_server,json=pushToServer,proto3" json:"push_to_server,omitempty"`
	// Is station data published as private?
	PublishDataAsPrivate bool `protobuf:"varint,10,opt,name=publish_data_as_private,json=publishDataAsPrivate,proto3" json:"publish_data_as_private,omitempty"`
	// Is station audio data scrambled?
	ScrambleAudioData bool `protobuf:"varint,11,opt,name=scramble_audio_data,json=scrambleAudioData,proto3" json:"scramble_audio_data,omitempty"`
	// Should station backfill unsent data?
	ProvideBackfill bool `protobuf:"varint,12,opt,name=provide_backfill,json=provideBackfill,proto3" json:"provide_backfill,omitempty"`
	// Does station remove DC offset?
	RemoveSensorDcOffset bool `protobuf:"varint,13,opt,name=remove_sensor_dc_offset,json=removeSensorDcOffset,proto3" json:"remove_sensor_dc_offset,omitempty"`
	// Station FFT overlap
	FftOverlap RedvoxPacketM_StationInformation_AppSettings_FftOverlap `protobuf:"varint,14,opt,name=fft_overlap,json=fftOverlap,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_AppSettings_FftOverlap" json:"fft_overlap,omitempty"`
	// Should station use custom time synch server?
	UseCustomTimeSyncServer bool `protobuf:"varint,15,opt,name=use_custom_time_sync_server,json=useCustomTimeSyncServer,proto3" json:"use_custom_time_sync_server,omitempty"`
	// URL of custom time synch server
	TimeSyncServerUrl string `protobuf:"bytes,16,opt,name=time_sync_server_url,json=timeSyncServerUrl,proto3" json:"time_sync_server_url,omitempty"`
	// Should station use custom data server?
	UseCustomDataServer bool `protobuf:"varint,17,opt,name=use_custom_data_server,json=useCustomDataServer,proto3" json:"use_custom_data_server,omitempty"`
	// URL of custom data server
	DataServerUrl string `protobuf:"bytes,18,opt,name=data_server_url,json=dataServerUrl,proto3" json:"data_server_url,omitempty"`
	// Should station use custom auth server
	UseCustomAuthServer bool `protobuf:"varint,19,opt,name=use_custom_auth_server,json=useCustomAuthServer,proto3" json:"use_custom_auth_server,omitempty"`
	// URL of custom auth server
	AuthServerUrl string `protobuf:"bytes,20,opt,name=auth_server_url,json=authServerUrl,proto3" json:"auth_server_url,omitempty"`
	// Should station auto delete data?
	AutoDeleteDataFiles bool `protobuf:"varint,21,opt,name=auto_delete_data_files,json=autoDeleteDataFiles,proto3" json:"auto_delete_data_files,omitempty"`
	// Station data allowance in bytes
	StorageSpaceAllowance float32 `protobuf:"fixed32,22,opt,name=storage_space_allowance,json=storageSpaceAllowance,proto3" json:"storage_space_allowance,omitempty"`
	// Should station use SD card for storage?
	UseSdCardForDataStorage bool `protobuf:"varint,23,opt,name=use_sd_card_for_data_storage,json=useSdCardForDataStorage,proto3" json:"use_sd_card_for_data_storage,omitempty"`
	// Should station use location services?
	UseLocationServices bool `protobuf:"varint,24,opt,name=use_location_services,json=useLocationServices,proto3" json:"use_location_services,omitempty"`
	// User set latitude decimal degrees
	UseLatitude float64 `protobuf:"fixed64,25,opt,name=use_latitude,json=useLatitude,proto3" json:"use_latitude,omitempty"`
	// User set longitude decimal degrees
	UseLongitude float64 `protobuf:"fixed64,26,opt,name=use_longitude,json=useLongitude,proto3" json:"use_longitude,omitempty"`
	// User set altitude meters
	UseAltitude float32 `protobuf:"fixed32,27,opt,name=use_altitude,json=useAltitude,proto3" json:"use_altitude,omitempty"`
	// User defined setting for how often metrics should be collected
	MetricsRate RedvoxPacketM_StationInformation_MetricsRate `protobuf:"varint,28,opt,name=metrics_rate,json=metricsRate,proto3,enum=redvox_api_m.RedvoxPacketM_StationInformation_MetricsRate" json:"metrics_rate,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,29,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_StationInformation_AppSettings) Reset() {
	*x = RedvoxPacketM_StationInformation_AppSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_StationInformation_AppSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_StationInformation_AppSettings) ProtoMessage() {}

func (x *RedvoxPacketM_StationInformation_AppSettings) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_StationInformation_AppSettings.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_StationInformation_AppSettings) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetAudioSamplingRate() RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate {
	if x != nil {
		return x.AudioSamplingRate
	}
	return RedvoxPacketM_StationInformation_AppSettings_UNKNOWN_SAMPLING_RATE
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetSamplesPerWindow() float32 {
	if x != nil {
		return x.SamplesPerWindow
	}
	return 0
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetAudioSourceTuning() RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning {
	if x != nil {
		return x.AudioSourceTuning
	}
	return RedvoxPacketM_StationInformation_AppSettings_UNKNOWN_TUNING
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetAdditionalInputSensors() []RedvoxPacketM_StationInformation_AppSettings_InputSensor {
	if x != nil {
		return x.AdditionalInputSensors
	}
	return nil
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetAutomaticallyRecord() bool {
	if x != nil {
		return x.AutomaticallyRecord
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetLaunchAtPowerUp() bool {
	if x != nil {
		return x.LaunchAtPowerUp
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetStationDescription() string {
	if x != nil {
		return x.StationDescription
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetPushToServer() bool {
	if x != nil {
		return x.PushToServer
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetPublishDataAsPrivate() bool {
	if x != nil {
		return x.PublishDataAsPrivate
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetScrambleAudioData() bool {
	if x != nil {
		return x.ScrambleAudioData
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetProvideBackfill() bool {
	if x != nil {
		return x.ProvideBackfill
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetRemoveSensorDcOffset() bool {
	if x != nil {
		return x.RemoveSensorDcOffset
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetFftOverlap() RedvoxPacketM_StationInformation_AppSettings_FftOverlap {
	if x != nil {
		return x.FftOverlap
	}
	return RedvoxPacketM_StationInformation_AppSettings_UNKNOWN
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseCustomTimeSyncServer() bool {
	if x != nil {
		return x.UseCustomTimeSyncServer
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetTimeSyncServerUrl() string {
	if x != nil {
		return x.TimeSyncServerUrl
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseCustomDataServer() bool {
	if x != nil {
		return x.UseCustomDataServer
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetDataServerUrl() string {
	if x != nil {
		return x.DataServerUrl
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseCustomAuthServer() bool {
	if x != nil {
		return x.UseCustomAuthServer
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetAuthServerUrl() string {
	if x != nil {
		return x.AuthServerUrl
	}
	return ""
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetAutoDeleteDataFiles() bool {
	if x != nil {
		return x.AutoDeleteDataFiles
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetStorageSpaceAllowance() float32 {
	if x != nil {
		return x.StorageSpaceAllowance
	}
	return 0
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseSdCardForDataStorage() bool {
	if x != nil {
		return x.UseSdCardForDataStorage
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseLocationServices() bool {
	if x != nil {
		return x.UseLocationServices
	}
	return false
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseLatitude() float64 {
	if x != nil {
		return x.UseLatitude
	}
	return 0
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseLongitude() float64 {
	if x != nil {
		return x.UseLongitude
	}
	return 0
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetUseAltitude() float32 {
	if x != nil {
		return x.UseAltitude
	}
	return 0
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetMetricsRate() RedvoxPacketM_StationInformation_MetricsRate {
	if x != nil {
		return x.MetricsRate
	}
	return RedvoxPacketM_StationInformation_UNKNOWN
}

func (x *RedvoxPacketM_StationInformation_AppSettings) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Type-safe synchronization exchange values
type RedvoxPacketM_TimingInformation_SynchExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A1 float64 `protobuf:"fixed64,1,opt,name=a1,proto3" json:"a1,omitempty"`
	A2 float64 `protobuf:"fixed64,2,opt,name=a2,proto3" json:"a2,omitempty"`
	A3 float64 `protobuf:"fixed64,3,opt,name=a3,proto3" json:"a3,omitempty"`
	B1 float64 `protobuf:"fixed64,4,opt,name=b1,proto3" json:"b1,omitempty"`
	B2 float64 `protobuf:"fixed64,5,opt,name=b2,proto3" json:"b2,omitempty"`
	B3 float64 `protobuf:"fixed64,6,opt,name=b3,proto3" json:"b3,omitempty"`
	// Unit of parameters a1-b3
	Unit RedvoxPacketM_Unit `protobuf:"varint,7,opt,name=unit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"unit,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) Reset() {
	*x = RedvoxPacketM_TimingInformation_SynchExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_TimingInformation_SynchExchange) ProtoMessage() {}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_TimingInformation_SynchExchange.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_TimingInformation_SynchExchange) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetA1() float64 {
	if x != nil {
		return x.A1
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetA2() float64 {
	if x != nil {
		return x.A2
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetA3() float64 {
	if x != nil {
		return x.A3
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetB1() float64 {
	if x != nil {
		return x.B1
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetB2() float64 {
	if x != nil {
		return x.B2
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetB3() float64 {
	if x != nil {
		return x.B3
	}
	return 0
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.Unit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_TimingInformation_SynchExchange) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// This message describes a stable audio channel
// See: https://github.com/RedVoxInc/redvox-api-1000/src/master/docs/standards/storing_audio_data.md
type RedvoxPacketM_Sensors_Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name or description of the audio sensor
	SensorDescription string `protobuf:"bytes,1,opt,name=sensor_description,json=sensorDescription,proto3" json:"sensor_description,omitempty"`
	// Timestamp of the first audio sample
	FirstSampleTimestamp float64 `protobuf:"fixed64,2,opt,name=first_sample_timestamp,json=firstSampleTimestamp,proto3" json:"first_sample_timestamp,omitempty"`
	// Microphone sample rate in Hz
	SampleRate float32 `protobuf:"fixed32,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// Bits of precision for normalized audio samples
	BitsOfPrecision float32 `protobuf:"fixed32,4,opt,name=bits_of_precision,json=bitsOfPrecision,proto3" json:"bits_of_precision,omitempty"`
	// If audio data has been scrambled to remove voice
	IsScrambled bool `protobuf:"varint,5,opt,name=is_scrambled,json=isScrambled,proto3" json:"is_scrambled,omitempty"`
	// The audio encoding used... TODO: Turn this into an enum!
	Encoding string `protobuf:"bytes,6,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// List of audio samples
	Samples *RedvoxPacketM_SamplePayload `protobuf:"bytes,7,opt,name=samples,proto3" json:"samples,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_Audio) Reset() {
	*x = RedvoxPacketM_Sensors_Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_Audio) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_Audio) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Audio.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_Audio) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *RedvoxPacketM_Sensors_Audio) GetSensorDescription() string {
	if x != nil {
		return x.SensorDescription
	}
	return ""
}

func (x *RedvoxPacketM_Sensors_Audio) GetFirstSampleTimestamp() float64 {
	if x != nil {
		return x.FirstSampleTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Audio) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Audio) GetBitsOfPrecision() float32 {
	if x != nil {
		return x.BitsOfPrecision
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Audio) GetIsScrambled() bool {
	if x != nil {
		return x.IsScrambled
	}
	return false
}

func (x *RedvoxPacketM_Sensors_Audio) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *RedvoxPacketM_Sensors_Audio) GetSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Audio) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RedvoxPacketM_Sensors_CompressedAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name or description of the audio sensor
	SensorDescription string `protobuf:"bytes,1,opt,name=sensor_description,json=sensorDescription,proto3" json:"sensor_description,omitempty"`
	// Mach timestamp of the first audio sample
	FirstSampleTimestamp float64 `protobuf:"fixed64,2,opt,name=first_sample_timestamp,json=firstSampleTimestamp,proto3" json:"first_sample_timestamp,omitempty"`
	// Microphone sample rate in Hz
	SampleRate float32 `protobuf:"fixed32,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// If audio data has been scrambled to remove voice
	IsScrambled bool `protobuf:"varint,4,opt,name=is_scrambled,json=isScrambled,proto3" json:"is_scrambled,omitempty"`
	// Bytes that make up audio payload
	AudioBytes []byte `protobuf:"bytes,5,opt,name=audio_bytes,json=audioBytes,proto3" json:"audio_bytes,omitempty"`
	// Codec used to compress audio
	AudioCodec RedvoxPacketM_Sensors_CompressedAudio_AudioCodec `protobuf:"varint,6,opt,name=audio_codec,json=audioCodec,proto3,enum=redvox_api_m.RedvoxPacketM_Sensors_CompressedAudio_AudioCodec" json:"audio_codec,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) Reset() {
	*x = RedvoxPacketM_Sensors_CompressedAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_CompressedAudio) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_CompressedAudio) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_CompressedAudio.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_CompressedAudio) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) GetSensorDescription() string {
	if x != nil {
		return x.SensorDescription
	}
	return ""
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) GetFirstSampleTimestamp() float64 {
	if x != nil {
		return x.FirstSampleTimestamp
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) GetIsScrambled() bool {
	if x != nil {
		return x.IsScrambled
	}
	return false
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) GetAudioBytes() []byte {
	if x != nil {
		return x.AudioBytes
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) GetAudioCodec() RedvoxPacketM_Sensors_CompressedAudio_AudioCodec {
	if x != nil {
		return x.AudioCodec
	}
	return RedvoxPacketM_Sensors_CompressedAudio_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_CompressedAudio) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A single channel of data
// See: https://github.com/RedVoxInc/redvox-api-1000/src/master/docs/standards/storing_single_channel_data.md
type RedvoxPacketM_Sensors_Single struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name or description of the sensor
	SensorDescription string `protobuf:"bytes,1,opt,name=sensor_description,json=sensorDescription,proto3" json:"sensor_description,omitempty"`
	// List of timestamps per sample and associated stats
	Timestamps *RedvoxPacketM_TimingPayload `protobuf:"bytes,2,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// List of samples and associated stats
	Samples *RedvoxPacketM_SamplePayload `protobuf:"bytes,3,opt,name=samples,proto3" json:"samples,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_Single) Reset() {
	*x = RedvoxPacketM_Sensors_Single{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_Single) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_Single) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_Single) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Single.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_Single) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *RedvoxPacketM_Sensors_Single) GetSensorDescription() string {
	if x != nil {
		return x.SensorDescription
	}
	return ""
}

func (x *RedvoxPacketM_Sensors_Single) GetTimestamps() *RedvoxPacketM_TimingPayload {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Single) GetSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Single) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Location channels
// See: https://github.com/RedVoxInc/redvox-api-1000/src/master/docs/standards/storing_location_data.md
type RedvoxPacketM_Sensors_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name or description of the sensor
	SensorDescription string `protobuf:"bytes,1,opt,name=sensor_description,json=sensorDescription,proto3" json:"sensor_description,omitempty"`
	// Timestamps and stats
	Timestamps    *RedvoxPacketM_TimingPayload `protobuf:"bytes,2,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	TimestampsGps *RedvoxPacketM_TimingPayload `protobuf:"bytes,3,opt,name=timestamps_gps,json=timestampsGps,proto3" json:"timestamps_gps,omitempty"`
	// A list of latitude samples
	LatitudeSamples *RedvoxPacketM_DoubleSamplePayload `protobuf:"bytes,4,opt,name=latitude_samples,json=latitudeSamples,proto3" json:"latitude_samples,omitempty"`
	// A list of longitude samples
	LongitudeSamples *RedvoxPacketM_DoubleSamplePayload `protobuf:"bytes,5,opt,name=longitude_samples,json=longitudeSamples,proto3" json:"longitude_samples,omitempty"`
	// A list of altitude samples
	AltitudeSamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,6,opt,name=altitude_samples,json=altitudeSamples,proto3" json:"altitude_samples,omitempty"`
	// A list of speed samples
	SpeedSamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,7,opt,name=speed_samples,json=speedSamples,proto3" json:"speed_samples,omitempty"`
	// A list of bearing samples
	BearingSamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,8,opt,name=bearing_samples,json=bearingSamples,proto3" json:"bearing_samples,omitempty"`
	// A list of horizontal accuracy samples
	HorizontalAccuracySamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,9,opt,name=horizontal_accuracy_samples,json=horizontalAccuracySamples,proto3" json:"horizontal_accuracy_samples,omitempty"`
	// A list of vertical accuracy samples
	VerticalAccuracySamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,10,opt,name=vertical_accuracy_samples,json=verticalAccuracySamples,proto3" json:"vertical_accuracy_samples,omitempty"`
	// A list of speed accuracy samples
	SpeedAccuracySamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,11,opt,name=speed_accuracy_samples,json=speedAccuracySamples,proto3" json:"speed_accuracy_samples,omitempty"`
	// A list of bearing accuracy samples
	BearingAccuracySamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,12,opt,name=bearing_accuracy_samples,json=bearingAccuracySamples,proto3" json:"bearing_accuracy_samples,omitempty"`
	// Most recent best location
	LastBestLocation *RedvoxPacketM_Sensors_Location_BestLocation `protobuf:"bytes,13,opt,name=last_best_location,json=lastBestLocation,proto3" json:"last_best_location,omitempty"`
	// Best last location
	OverallBestLocation *RedvoxPacketM_Sensors_Location_BestLocation `protobuf:"bytes,14,opt,name=overall_best_location,json=overallBestLocation,proto3" json:"overall_best_location,omitempty"`
	// Have location permissions been granted by the user?
	LocationPermissionsGranted bool `protobuf:"varint,15,opt,name=location_permissions_granted,json=locationPermissionsGranted,proto3" json:"location_permissions_granted,omitempty"`
	// Has location services been requested by the user?
	LocationServicesRequested bool `protobuf:"varint,16,opt,name=location_services_requested,json=locationServicesRequested,proto3" json:"location_services_requested,omitempty"`
	// Are location services enabled and working?
	LocationServicesEnabled bool `protobuf:"varint,17,opt,name=location_services_enabled,json=locationServicesEnabled,proto3" json:"location_services_enabled,omitempty"`
	// Location provider enumeration
	LocationProviders []RedvoxPacketM_Sensors_Location_LocationProvider `protobuf:"varint,18,rep,packed,name=location_providers,json=locationProviders,proto3,enum=redvox_api_m.RedvoxPacketM_Sensors_Location_LocationProvider" json:"location_providers,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,19,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_Location) Reset() {
	*x = RedvoxPacketM_Sensors_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_Location) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_Location) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Location.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_Location) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *RedvoxPacketM_Sensors_Location) GetSensorDescription() string {
	if x != nil {
		return x.SensorDescription
	}
	return ""
}

func (x *RedvoxPacketM_Sensors_Location) GetTimestamps() *RedvoxPacketM_TimingPayload {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetTimestampsGps() *RedvoxPacketM_TimingPayload {
	if x != nil {
		return x.TimestampsGps
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetLatitudeSamples() *RedvoxPacketM_DoubleSamplePayload {
	if x != nil {
		return x.LatitudeSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetLongitudeSamples() *RedvoxPacketM_DoubleSamplePayload {
	if x != nil {
		return x.LongitudeSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetAltitudeSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.AltitudeSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetSpeedSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.SpeedSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetBearingSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.BearingSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetHorizontalAccuracySamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.HorizontalAccuracySamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetVerticalAccuracySamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.VerticalAccuracySamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetSpeedAccuracySamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.SpeedAccuracySamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetBearingAccuracySamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.BearingAccuracySamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetLastBestLocation() *RedvoxPacketM_Sensors_Location_BestLocation {
	if x != nil {
		return x.LastBestLocation
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetOverallBestLocation() *RedvoxPacketM_Sensors_Location_BestLocation {
	if x != nil {
		return x.OverallBestLocation
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetLocationPermissionsGranted() bool {
	if x != nil {
		return x.LocationPermissionsGranted
	}
	return false
}

func (x *RedvoxPacketM_Sensors_Location) GetLocationServicesRequested() bool {
	if x != nil {
		return x.LocationServicesRequested
	}
	return false
}

func (x *RedvoxPacketM_Sensors_Location) GetLocationServicesEnabled() bool {
	if x != nil {
		return x.LocationServicesEnabled
	}
	return false
}

func (x *RedvoxPacketM_Sensors_Location) GetLocationProviders() []RedvoxPacketM_Sensors_Location_LocationProvider {
	if x != nil {
		return x.LocationProviders
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Message representing data channels with X, Y, and Z components
// See: https://github.com/RedVoxInc/redvox-api-1000/src/master/docs/standards/storing_xyz_channel_data.md
type RedvoxPacketM_Sensors_Xyz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name or description of the sensor
	SensorDescription string `protobuf:"bytes,1,opt,name=sensor_description,json=sensorDescription,proto3" json:"sensor_description,omitempty"`
	// List of timestamps per sample
	Timestamps *RedvoxPacketM_TimingPayload `protobuf:"bytes,2,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// A list of samples for the X-channel
	XSamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,3,opt,name=x_samples,json=xSamples,proto3" json:"x_samples,omitempty"`
	// A list of samples for the Y-channel
	YSamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,4,opt,name=y_samples,json=ySamples,proto3" json:"y_samples,omitempty"`
	// A list of samples for the Z-channel
	ZSamples *RedvoxPacketM_SamplePayload `protobuf:"bytes,5,opt,name=z_samples,json=zSamples,proto3" json:"z_samples,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_Xyz) Reset() {
	*x = RedvoxPacketM_Sensors_Xyz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_Xyz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_Xyz) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_Xyz) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Xyz.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_Xyz) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *RedvoxPacketM_Sensors_Xyz) GetSensorDescription() string {
	if x != nil {
		return x.SensorDescription
	}
	return ""
}

func (x *RedvoxPacketM_Sensors_Xyz) GetTimestamps() *RedvoxPacketM_TimingPayload {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Xyz) GetXSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.XSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Xyz) GetYSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.YSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Xyz) GetZSamples() *RedvoxPacketM_SamplePayload {
	if x != nil {
		return x.ZSamples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Xyz) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Image/video channel
// See: https://github.com/RedVoxInc/redvox-api-1000/src/master/docs/standards/storing_image_data.md
type RedvoxPacketM_Sensors_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name or description of the sensor
	SensorDescription string `protobuf:"bytes,1,opt,name=sensor_description,json=sensorDescription,proto3" json:"sensor_description,omitempty"`
	// Timestamps per sample
	Timestamps *RedvoxPacketM_TimingPayload `protobuf:"bytes,2,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// A list of bytes each representing a single image
	Samples [][]byte `protobuf:"bytes,3,rep,name=samples,proto3" json:"samples,omitempty"`
	// The image codec being used
	ImageCodec RedvoxPacketM_Sensors_Image_ImageCodec `protobuf:"varint,4,opt,name=image_codec,json=imageCodec,proto3,enum=redvox_api_m.RedvoxPacketM_Sensors_Image_ImageCodec" json:"image_codec,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_Image) Reset() {
	*x = RedvoxPacketM_Sensors_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_Image) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_Image) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Image.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_Image) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 6}
}

func (x *RedvoxPacketM_Sensors_Image) GetSensorDescription() string {
	if x != nil {
		return x.SensorDescription
	}
	return ""
}

func (x *RedvoxPacketM_Sensors_Image) GetTimestamps() *RedvoxPacketM_TimingPayload {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Image) GetSamples() [][]byte {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Image) GetImageCodec() RedvoxPacketM_Sensors_Image_ImageCodec {
	if x != nil {
		return x.ImageCodec
	}
	return RedvoxPacketM_Sensors_Image_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Image) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RedvoxPacketM_Sensors_Location_BestLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of best lat/lng measurement
	LatitudeLongitudeTimestamp *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp `protobuf:"bytes,1,opt,name=latitude_longitude_timestamp,json=latitudeLongitudeTimestamp,proto3" json:"latitude_longitude_timestamp,omitempty"`
	// Timestamp of best altitude measurement
	AltitudeTimestamp *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp `protobuf:"bytes,2,opt,name=altitude_timestamp,json=altitudeTimestamp,proto3" json:"altitude_timestamp,omitempty"`
	// Timestamp of best speed measurement
	SpeedTimestamp *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp `protobuf:"bytes,3,opt,name=speed_timestamp,json=speedTimestamp,proto3" json:"speed_timestamp,omitempty"`
	// Timestamp of best bearing estimate
	BearingTimestamp *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp `protobuf:"bytes,4,opt,name=bearing_timestamp,json=bearingTimestamp,proto3" json:"bearing_timestamp,omitempty"`
	// Unit used for latitude/longitude (should be decimal degrees)
	LatitudeLongitudeUnit RedvoxPacketM_Unit `protobuf:"varint,5,opt,name=latitude_longitude_unit,json=latitudeLongitudeUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"latitude_longitude_unit,omitempty"`
	// Unit used for altitude (should be meters)
	AltitudeUnit RedvoxPacketM_Unit `protobuf:"varint,6,opt,name=altitude_unit,json=altitudeUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"altitude_unit,omitempty"`
	// Unit used for speed (should be m/s)
	SpeedUnit RedvoxPacketM_Unit `protobuf:"varint,7,opt,name=speed_unit,json=speedUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"speed_unit,omitempty"`
	// Unit used for bearing (should be radians)
	BearingUnit RedvoxPacketM_Unit `protobuf:"varint,8,opt,name=bearing_unit,json=bearingUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"bearing_unit,omitempty"`
	// Unit used for vertical accuracy
	VerticalAccuracyUnit RedvoxPacketM_Unit `protobuf:"varint,9,opt,name=vertical_accuracy_unit,json=verticalAccuracyUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"vertical_accuracy_unit,omitempty"`
	// Unit used for horizontal accuracy
	HorizontalAccuracyUnit RedvoxPacketM_Unit `protobuf:"varint,10,opt,name=horizontal_accuracy_unit,json=horizontalAccuracyUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"horizontal_accuracy_unit,omitempty"`
	// Unit used for speed accuracy
	SpeedAccuracyUnit RedvoxPacketM_Unit `protobuf:"varint,11,opt,name=speed_accuracy_unit,json=speedAccuracyUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"speed_accuracy_unit,omitempty"`
	// Unit used for bearing accuracy
	BearingAccuracyUnit RedvoxPacketM_Unit `protobuf:"varint,12,opt,name=bearing_accuracy_unit,json=bearingAccuracyUnit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"bearing_accuracy_unit,omitempty"`
	// The best latitude
	Latitude float64 `protobuf:"fixed64,13,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// The best longitude
	Longitude float64 `protobuf:"fixed64,14,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// The best altitude
	Altitude float32 `protobuf:"fixed32,15,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// The best speed
	Speed float32 `protobuf:"fixed32,16,opt,name=speed,proto3" json:"speed,omitempty"`
	// The best bearing
	Bearing float32 `protobuf:"fixed32,17,opt,name=bearing,proto3" json:"bearing,omitempty"`
	// Vertical accuracy
	VerticalAccuracy float32 `protobuf:"fixed32,18,opt,name=vertical_accuracy,json=verticalAccuracy,proto3" json:"vertical_accuracy,omitempty"`
	// Horizontal accuracy
	HorizontalAccuracy float32 `protobuf:"fixed32,19,opt,name=horizontal_accuracy,json=horizontalAccuracy,proto3" json:"horizontal_accuracy,omitempty"`
	// Speed accuracy
	SpeedAccuracy float32 `protobuf:"fixed32,20,opt,name=speed_accuracy,json=speedAccuracy,proto3" json:"speed_accuracy,omitempty"`
	// Bearing accuracy
	BearingAccuracy float32 `protobuf:"fixed32,21,opt,name=bearing_accuracy,json=bearingAccuracy,proto3" json:"bearing_accuracy,omitempty"`
	// The best location score
	Score float32 `protobuf:"fixed32,22,opt,name=score,proto3" json:"score,omitempty"`
	// Method used to derive the location score
	Method           RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod `protobuf:"varint,23,opt,name=method,proto3,enum=redvox_api_m.RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod" json:"method,omitempty"`
	LocationProvider RedvoxPacketM_Sensors_Location_LocationProvider                 `protobuf:"varint,24,opt,name=location_provider,json=locationProvider,proto3,enum=redvox_api_m.RedvoxPacketM_Sensors_Location_LocationProvider" json:"location_provider,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,25,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) Reset() {
	*x = RedvoxPacketM_Sensors_Location_BestLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_Location_BestLocation) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Location_BestLocation.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_Location_BestLocation) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 4, 1}
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetLatitudeLongitudeTimestamp() *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp {
	if x != nil {
		return x.LatitudeLongitudeTimestamp
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetAltitudeTimestamp() *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp {
	if x != nil {
		return x.AltitudeTimestamp
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetSpeedTimestamp() *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp {
	if x != nil {
		return x.SpeedTimestamp
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetBearingTimestamp() *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp {
	if x != nil {
		return x.BearingTimestamp
	}
	return nil
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetLatitudeLongitudeUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.LatitudeLongitudeUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetAltitudeUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.AltitudeUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetSpeedUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.SpeedUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetBearingUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.BearingUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetVerticalAccuracyUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.VerticalAccuracyUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetHorizontalAccuracyUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.HorizontalAccuracyUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetSpeedAccuracyUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.SpeedAccuracyUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetBearingAccuracyUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.BearingAccuracyUnit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetBearing() float32 {
	if x != nil {
		return x.Bearing
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetVerticalAccuracy() float32 {
	if x != nil {
		return x.VerticalAccuracy
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetHorizontalAccuracy() float32 {
	if x != nil {
		return x.HorizontalAccuracy
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetSpeedAccuracy() float32 {
	if x != nil {
		return x.SpeedAccuracy
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetBearingAccuracy() float32 {
	if x != nil {
		return x.BearingAccuracy
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetMethod() RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod {
	if x != nil {
		return x.Method
	}
	return RedvoxPacketM_Sensors_Location_BestLocation_UNKNOWN_METHOD
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetLocationProvider() RedvoxPacketM_Sensors_Location_LocationProvider {
	if x != nil {
		return x.LocationProvider
	}
	return RedvoxPacketM_Sensors_Location_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A message that encapsulates both a mach and GPS timestamp
type RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unit of timestamps (should be microseconds since unix epoch UTC)
	Unit RedvoxPacketM_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=redvox_api_m.RedvoxPacketM_Unit" json:"unit,omitempty"`
	// Best mach timestamp
	Mach float64 `protobuf:"fixed64,2,opt,name=mach,proto3" json:"mach,omitempty"`
	// Best gps timestamp
	Gps float64 `protobuf:"fixed64,3,opt,name=gps,proto3" json:"gps,omitempty"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) Reset() {
	*x = RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) ProtoMessage() {}

func (x *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 3, 4, 1, 1}
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) GetUnit() RedvoxPacketM_Unit {
	if x != nil {
		return x.Unit
	}
	return RedvoxPacketM_UNKNOWN
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) GetMach() float64 {
	if x != nil {
		return x.Mach
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) GetGps() float64 {
	if x != nil {
		return x.Gps
	}
	return 0
}

func (x *RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RedvoxPacketM_EventStream_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Textual description of the event
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Key-pairs of type string to string
	StringPayload map[string]string `protobuf:"bytes,2,rep,name=string_payload,json=stringPayload,proto3" json:"string_payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Key-pairs of type string to double
	NumericPayload map[string]float64 `protobuf:"bytes,3,rep,name=numeric_payload,json=numericPayload,proto3" json:"numeric_payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Key-pairs of type string to boolean
	BooleanPayload map[string]bool `protobuf:"bytes,4,rep,name=boolean_payload,json=booleanPayload,proto3" json:"boolean_payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Key-pairs of type string to bytes.
	// This one is mainly for transmitting binary or data that doesn't fit well into one of the other payloads.
	BytePayload map[string][]byte `protobuf:"bytes,5,rep,name=byte_payload,json=bytePayload,proto3" json:"byte_payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map from string to string for including untyped metadata
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedvoxPacketM_EventStream_Event) Reset() {
	*x = RedvoxPacketM_EventStream_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedvoxPacketM_EventStream_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedvoxPacketM_EventStream_Event) ProtoMessage() {}

func (x *RedvoxPacketM_EventStream_Event) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedvoxPacketM_EventStream_Event.ProtoReflect.Descriptor instead.
func (*RedvoxPacketM_EventStream_Event) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *RedvoxPacketM_EventStream_Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RedvoxPacketM_EventStream_Event) GetStringPayload() map[string]string {
	if x != nil {
		return x.StringPayload
	}
	return nil
}

func (x *RedvoxPacketM_EventStream_Event) GetNumericPayload() map[string]float64 {
	if x != nil {
		return x.NumericPayload
	}
	return nil
}

func (x *RedvoxPacketM_EventStream_Event) GetBooleanPayload() map[string]bool {
	if x != nil {
		return x.BooleanPayload
	}
	return nil
}

func (x *RedvoxPacketM_EventStream_Event) GetBytePayload() map[string][]byte {
	if x != nil {
		return x.BytePayload
	}
	return nil
}

func (x *RedvoxPacketM_EventStream_Event) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EncryptedRedvoxPacketM_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The station id
	StationId string `protobuf:"bytes,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
	// The station uuid
	StationUuid string `protobuf:"bytes,2,opt,name=station_uuid,json=stationUuid,proto3" json:"station_uuid,omitempty"`
	// The station's authorization token
	AuthToken string `protobuf:"bytes,3,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// The station's firebase token
	FirebaseToken string `protobuf:"bytes,4,opt,name=firebase_token,json=firebaseToken,proto3" json:"firebase_token,omitempty"`
	// The station's auth email
	AuthEmail string `protobuf:"bytes,5,opt,name=auth_email,json=authEmail,proto3" json:"auth_email,omitempty"`
}

func (x *EncryptedRedvoxPacketM_Header) Reset() {
	*x = EncryptedRedvoxPacketM_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redvox_api_m_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedRedvoxPacketM_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedRedvoxPacketM_Header) ProtoMessage() {}

func (x *EncryptedRedvoxPacketM_Header) ProtoReflect() protoreflect.Message {
	mi := &file_redvox_api_m_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedRedvoxPacketM_Header.ProtoReflect.Descriptor instead.
func (*EncryptedRedvoxPacketM_Header) Descriptor() ([]byte, []int) {
	return file_redvox_api_m_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EncryptedRedvoxPacketM_Header) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

func (x *EncryptedRedvoxPacketM_Header) GetStationUuid() string {
	if x != nil {
		return x.StationUuid
	}
	return ""
}

func (x *EncryptedRedvoxPacketM_Header) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *EncryptedRedvoxPacketM_Header) GetFirebaseToken() string {
	if x != nil {
		return x.FirebaseToken
	}
	return ""
}

func (x *EncryptedRedvoxPacketM_Header) GetAuthEmail() string {
	if x != nil {
		return x.AuthEmail
	}
	return ""
}

var File_redvox_api_m_proto protoreflect.FileDescriptor

var file_redvox_api_m_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6d, 0x22, 0xfb, 0x8d, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x61,
	0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x75, 0x62, 0x41, 0x70, 0x69,
	0x12, 0x5f, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x4c,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x9c, 0x2c, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x45, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5d, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xa3, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd7, 0x0e, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x49, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x6c, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x49, 0x2e,
	0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x4e, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x4e, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6d, 0x12,
	0x50, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x70, 0x0a, 0x0e, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x57, 0x61, 0x6b, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x6c, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x56, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x67, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x49, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x04, 0x22, 0x43, 0x0a, 0x0c, 0x57, 0x69, 0x66, 0x69, 0x57, 0x61, 0x6b,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x22, 0x5e, 0x0a, 0x10, 0x43, 0x65,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f,
	0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x22, 0x4f, 0x0a, 0x0a, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x44, 0x10, 0x03, 0x22, 0x46, 0x0a, 0x0b, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x45, 0x41, 0x44, 0x4c, 0x45, 0x53,
	0x53, 0x10, 0x03, 0x1a, 0x82, 0x14, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x7c, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4c, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x52, 0x11,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x7c, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x80, 0x01,
	0x0a, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x46, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x63, 0x72, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x63, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x66, 0x0a, 0x0b, 0x66, 0x66, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x46, 0x66, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x52, 0x0a, 0x66, 0x66, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x33, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x1c, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x53, 0x64, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a,
	0x0a, 0x46, 0x66, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x32, 0x35, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x35, 0x30, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x37, 0x35, 0x10, 0x03, 0x22, 0x6e, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x5a, 0x5f, 0x38,
	0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x5a, 0x5f, 0x38, 0x30, 0x30, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x5a, 0x5f, 0x38, 0x30, 0x30, 0x30, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x48, 0x5a, 0x5f, 0x31, 0x36, 0x30, 0x30, 0x30, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5a,
	0x5f, 0x34, 0x38, 0x30, 0x30, 0x30, 0x10, 0x05, 0x22, 0x66, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x57, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x22, 0xa5, 0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x53,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x4f,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x4c,
	0x45, 0x52, 0x4f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x4d, 0x42, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x41,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x59, 0x52, 0x4f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x59, 0x52, 0x4f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0b,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x47, 0x4e, 0x45,
	0x54, 0x4f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x47,
	0x4e, 0x45, 0x54, 0x4f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x0f,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x10, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x11, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d, 0x49, 0x54, 0x59, 0x10, 0x12, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x55, 0x4d, 0x49, 0x44,
	0x49, 0x54, 0x59, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45,
	0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x15, 0x22, 0x4f, 0x0a, 0x06, 0x4f, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x53, 0x58, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x05, 0x22, 0x44, 0x0a, 0x0b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x1a,
	0xe7, 0x09, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x21, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x64, 0x0a, 0x0f, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x62, 0x0a, 0x0c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc9, 0x02, 0x0a, 0x0d,
	0x53, 0x79, 0x6e, 0x63, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x61, 0x31, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x61, 0x32, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x61, 0x33, 0x12, 0x0e, 0x0a,
	0x02, 0x62, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x62, 0x31, 0x12, 0x0e, 0x0a,
	0x02, 0x62, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x62, 0x32, 0x12, 0x0e, 0x0a,
	0x02, 0x62, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x62, 0x33, 0x12, 0x34, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x65, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x96, 0x3c, 0x0a, 0x07, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x58, 0x79, 0x7a, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x12, 0x61,
	0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x41, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x58, 0x79, 0x7a, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x58, 0x79,
	0x7a, 0x52, 0x09, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x05, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x58, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x58, 0x79, 0x7a, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x58,
	0x79, 0x7a, 0x52, 0x0c, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x58, 0x79, 0x7a, 0x52, 0x0b,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x75,
	0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x58, 0x79, 0x7a, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e,
	0x58, 0x79, 0x7a, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcf, 0x03, 0x0a, 0x05, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x74,
	0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x69, 0x74, 0x73, 0x4f, 0x66, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53,
	0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xfd, 0x03, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53,
	0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0a,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x01, 0x1a, 0xda, 0x02, 0x0a, 0x06,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x12, 0x43, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x90, 0x1f, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12,
	0x50, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x67, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x47, 0x70,
	0x73, 0x12, 0x5a, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x5c, 0x0a,
	0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x0f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x0f, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0e, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x1b, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x19, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x19, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x17,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x14, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x18, 0x62, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x16, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x67, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x15, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x11,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x56, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x87, 0x11, 0x0a, 0x0c, 0x42, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x76, 0x0a, 0x12, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65,
	0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x70, 0x0a, 0x0f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x74, 0x0a,
	0x11, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x58, 0x0a, 0x17, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x15, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x45, 0x0a,
	0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0b, 0x62,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x14, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x5a, 0x0a, 0x18, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x50,
	0x0a, 0x13, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x11, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x54, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x13, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x62, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x6a, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9b, 0x02, 0x0a, 0x0d, 0x42, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x61, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x71, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x00,
	0x22, 0x49, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x53, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04, 0x1a, 0xe7, 0x03, 0x0a, 0x03,
	0x58, 0x79, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x46, 0x0a,
	0x09, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x78, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x08, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x09, 0x7a, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x7a, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x58, 0x79, 0x7a,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xba, 0x03, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x0a,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x47, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4d, 0x50,
	0x10, 0x03, 0x1a, 0xb1, 0x09, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d,
	0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xeb, 0x06, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6a, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6a, 0x0a, 0x0f, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x42, 0x79, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc9, 0x02, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0xd5, 0x02, 0x0a, 0x13, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f,
	0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xaf, 0x03, 0x0a, 0x0d, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e,
	0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x6d, 0x65, 0x61, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x74, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x74, 0x64, 0x65, 0x76,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76,
	0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbc, 0x02, 0x0a,
	0x11, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x52, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x03, 0x0a, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4c, 0x4f, 0x50, 0x41, 0x53, 0x43, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x44, 0x49, 0x41, 0x4e, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x43, 0x49,
	0x4d, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x06,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x10, 0x07,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x53, 0x42, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x4e, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x42, 0x45, 0x4c, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x45, 0x47, 0x52, 0x45, 0x45, 0x53, 0x5f, 0x43, 0x45, 0x4c, 0x53, 0x49, 0x55, 0x53, 0x10, 0x0b,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x59, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41,
	0x44, 0x49, 0x41, 0x4e, 0x53, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x43, 0x52, 0x4f,
	0x41, 0x4d, 0x50, 0x45, 0x52, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x45, 0x4e,
	0x54, 0x49, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10,
	0x11, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x55, 0x58, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e,
	0x49, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x43, 0x4d, 0x10,
	0x14, 0x22, 0xfa, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x64, 0x76, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0xaf, 0x01, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xca,
	0x01, 0x0a, 0x12, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69,
	0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x13,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64,
	0x76, 0x6f, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6d, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x65, 0x71, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x0d,
	0x53, 0x79, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x74, 0x73, 0x5f,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x54, 0x73,
	0x55, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x5f, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x55, 0x73,
	0x42, 0x24, 0x0a, 0x0e, 0x69, 0x6f, 0x2e, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x5a, 0x12, 0x72, 0x65, 0x64, 0x76, 0x6f, 0x78, 0x2e, 0x69, 0x6f, 0x2f, 0x72, 0x65,
	0x64, 0x76, 0x6f, 0x78, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redvox_api_m_proto_rawDescOnce sync.Once
	file_redvox_api_m_proto_rawDescData = file_redvox_api_m_proto_rawDesc
)

func file_redvox_api_m_proto_rawDescGZIP() []byte {
	file_redvox_api_m_proto_rawDescOnce.Do(func() {
		file_redvox_api_m_proto_rawDescData = protoimpl.X.CompressGZIP(file_redvox_api_m_proto_rawDescData)
	})
	return file_redvox_api_m_proto_rawDescData
}

var file_redvox_api_m_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_redvox_api_m_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_redvox_api_m_proto_goTypes = []interface{}{
	(RedvoxPacketM_Unit)(0),                                               // 0: redvox_api_m.RedvoxPacketM.Unit
	(RedvoxPacketM_StationInformation_OsType)(0),                          // 1: redvox_api_m.RedvoxPacketM.StationInformation.OsType
	(RedvoxPacketM_StationInformation_MetricsRate)(0),                     // 2: redvox_api_m.RedvoxPacketM.StationInformation.MetricsRate
	(RedvoxPacketM_StationInformation_StationMetrics_NetworkType)(0),      // 3: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.NetworkType
	(RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock)(0),     // 4: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock
	(RedvoxPacketM_StationInformation_StationMetrics_CellServiceState)(0), // 5: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.CellServiceState
	(RedvoxPacketM_StationInformation_StationMetrics_PowerState)(0),       // 6: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.PowerState
	(RedvoxPacketM_StationInformation_StationMetrics_ScreenState)(0),      // 7: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.ScreenState
	(RedvoxPacketM_StationInformation_AppSettings_FftOverlap)(0),          // 8: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.FftOverlap
	(RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate)(0),   // 9: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate
	(RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning)(0),   // 10: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning
	(RedvoxPacketM_StationInformation_AppSettings_InputSensor)(0),         // 11: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.InputSensor
	(RedvoxPacketM_TimingInformation_TimingScoreMethod)(0),                // 12: redvox_api_m.RedvoxPacketM.TimingInformation.TimingScoreMethod
	(RedvoxPacketM_Sensors_CompressedAudio_AudioCodec)(0),                 // 13: redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio.AudioCodec
	(RedvoxPacketM_Sensors_Location_LocationProvider)(0),                  // 14: redvox_api_m.RedvoxPacketM.Sensors.Location.LocationProvider
	(RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod)(0),  // 15: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.LocationScoreMethod
	(RedvoxPacketM_Sensors_Image_ImageCodec)(0),                           // 16: redvox_api_m.RedvoxPacketM.Sensors.Image.ImageCodec
	(AcquisitionResponse_ResponseType)(0),                                 // 17: redvox_api_m.AcquisitionResponse.ResponseType
	(*RedvoxPacketM)(nil),                                                 // 18: redvox_api_m.RedvoxPacketM
	(*EncryptedRedvoxPacketM)(nil),                                        // 19: redvox_api_m.EncryptedRedvoxPacketM
	(*AcquisitionRequest)(nil),                                            // 20: redvox_api_m.AcquisitionRequest
	(*AcquisitionResponse)(nil),                                           // 21: redvox_api_m.AcquisitionResponse
	(*SynchRequest)(nil),                                                  // 22: redvox_api_m.SynchRequest
	(*SynchResponse)(nil),                                                 // 23: redvox_api_m.SynchResponse
	nil,                                                                   // 24: redvox_api_m.RedvoxPacketM.MetadataEntry
	(*RedvoxPacketM_StationInformation)(nil),                              // 25: redvox_api_m.RedvoxPacketM.StationInformation
	(*RedvoxPacketM_TimingInformation)(nil),                               // 26: redvox_api_m.RedvoxPacketM.TimingInformation
	(*RedvoxPacketM_Sensors)(nil),                                         // 27: redvox_api_m.RedvoxPacketM.Sensors
	(*RedvoxPacketM_EventStream)(nil),                                     // 28: redvox_api_m.RedvoxPacketM.EventStream
	(*RedvoxPacketM_SamplePayload)(nil),                                   // 29: redvox_api_m.RedvoxPacketM.SamplePayload
	(*RedvoxPacketM_DoubleSamplePayload)(nil),                             // 30: redvox_api_m.RedvoxPacketM.DoubleSamplePayload
	(*RedvoxPacketM_TimingPayload)(nil),                                   // 31: redvox_api_m.RedvoxPacketM.TimingPayload
	(*RedvoxPacketM_SummaryStatistics)(nil),                               // 32: redvox_api_m.RedvoxPacketM.SummaryStatistics
	nil,                                                                   // 33: redvox_api_m.RedvoxPacketM.StationInformation.MetadataEntry
	(*RedvoxPacketM_StationInformation_ServiceUrls)(nil),                  // 34: redvox_api_m.RedvoxPacketM.StationInformation.ServiceUrls
	(*RedvoxPacketM_StationInformation_StationMetrics)(nil),               // 35: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics
	(*RedvoxPacketM_StationInformation_AppSettings)(nil),                  // 36: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings
	nil, // 37: redvox_api_m.RedvoxPacketM.StationInformation.ServiceUrls.MetadataEntry
	nil, // 38: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.MetadataEntry
	nil, // 39: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.MetadataEntry
	nil, // 40: redvox_api_m.RedvoxPacketM.TimingInformation.MetadataEntry
	(*RedvoxPacketM_TimingInformation_SynchExchange)(nil), // 41: redvox_api_m.RedvoxPacketM.TimingInformation.SynchExchange
	nil,                                 // 42: redvox_api_m.RedvoxPacketM.TimingInformation.SynchExchange.MetadataEntry
	nil,                                 // 43: redvox_api_m.RedvoxPacketM.Sensors.MetadataEntry
	(*RedvoxPacketM_Sensors_Audio)(nil), // 44: redvox_api_m.RedvoxPacketM.Sensors.Audio
	(*RedvoxPacketM_Sensors_CompressedAudio)(nil), // 45: redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio
	(*RedvoxPacketM_Sensors_Single)(nil),          // 46: redvox_api_m.RedvoxPacketM.Sensors.Single
	(*RedvoxPacketM_Sensors_Location)(nil),        // 47: redvox_api_m.RedvoxPacketM.Sensors.Location
	(*RedvoxPacketM_Sensors_Xyz)(nil),             // 48: redvox_api_m.RedvoxPacketM.Sensors.Xyz
	(*RedvoxPacketM_Sensors_Image)(nil),           // 49: redvox_api_m.RedvoxPacketM.Sensors.Image
	nil,                                           // 50: redvox_api_m.RedvoxPacketM.Sensors.Audio.MetadataEntry
	nil,                                           // 51: redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio.MetadataEntry
	nil,                                           // 52: redvox_api_m.RedvoxPacketM.Sensors.Single.MetadataEntry
	nil,                                           // 53: redvox_api_m.RedvoxPacketM.Sensors.Location.MetadataEntry
	(*RedvoxPacketM_Sensors_Location_BestLocation)(nil), // 54: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation
	nil, // 55: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.MetadataEntry
	(*RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp)(nil), // 56: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp
	nil,                                     // 57: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp.MetadataEntry
	nil,                                     // 58: redvox_api_m.RedvoxPacketM.Sensors.Xyz.MetadataEntry
	nil,                                     // 59: redvox_api_m.RedvoxPacketM.Sensors.Image.MetadataEntry
	nil,                                     // 60: redvox_api_m.RedvoxPacketM.EventStream.MetadataEntry
	(*RedvoxPacketM_EventStream_Event)(nil), // 61: redvox_api_m.RedvoxPacketM.EventStream.Event
	nil,                                     // 62: redvox_api_m.RedvoxPacketM.EventStream.Event.StringPayloadEntry
	nil,                                     // 63: redvox_api_m.RedvoxPacketM.EventStream.Event.NumericPayloadEntry
	nil,                                     // 64: redvox_api_m.RedvoxPacketM.EventStream.Event.BooleanPayloadEntry
	nil,                                     // 65: redvox_api_m.RedvoxPacketM.EventStream.Event.BytePayloadEntry
	nil,                                     // 66: redvox_api_m.RedvoxPacketM.EventStream.Event.MetadataEntry
	nil,                                     // 67: redvox_api_m.RedvoxPacketM.SamplePayload.MetadataEntry
	nil,                                     // 68: redvox_api_m.RedvoxPacketM.DoubleSamplePayload.MetadataEntry
	nil,                                     // 69: redvox_api_m.RedvoxPacketM.TimingPayload.MetadataEntry
	nil,                                     // 70: redvox_api_m.RedvoxPacketM.SummaryStatistics.MetadataEntry
	(*EncryptedRedvoxPacketM_Header)(nil),   // 71: redvox_api_m.EncryptedRedvoxPacketM.Header
}
var file_redvox_api_m_proto_depIdxs = []int32{
	25,  // 0: redvox_api_m.RedvoxPacketM.station_information:type_name -> redvox_api_m.RedvoxPacketM.StationInformation
	26,  // 1: redvox_api_m.RedvoxPacketM.timing_information:type_name -> redvox_api_m.RedvoxPacketM.TimingInformation
	27,  // 2: redvox_api_m.RedvoxPacketM.sensors:type_name -> redvox_api_m.RedvoxPacketM.Sensors
	28,  // 3: redvox_api_m.RedvoxPacketM.event_streams:type_name -> redvox_api_m.RedvoxPacketM.EventStream
	24,  // 4: redvox_api_m.RedvoxPacketM.metadata:type_name -> redvox_api_m.RedvoxPacketM.MetadataEntry
	17,  // 5: redvox_api_m.AcquisitionResponse.response_type:type_name -> redvox_api_m.AcquisitionResponse.ResponseType
	1,   // 6: redvox_api_m.RedvoxPacketM.StationInformation.os:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.OsType
	36,  // 7: redvox_api_m.RedvoxPacketM.StationInformation.app_settings:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.AppSettings
	35,  // 8: redvox_api_m.RedvoxPacketM.StationInformation.station_metrics:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics
	34,  // 9: redvox_api_m.RedvoxPacketM.StationInformation.service_urls:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.ServiceUrls
	33,  // 10: redvox_api_m.RedvoxPacketM.StationInformation.metadata:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.MetadataEntry
	41,  // 11: redvox_api_m.RedvoxPacketM.TimingInformation.synch_exchanges:type_name -> redvox_api_m.RedvoxPacketM.TimingInformation.SynchExchange
	12,  // 12: redvox_api_m.RedvoxPacketM.TimingInformation.score_method:type_name -> redvox_api_m.RedvoxPacketM.TimingInformation.TimingScoreMethod
	0,   // 13: redvox_api_m.RedvoxPacketM.TimingInformation.unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	40,  // 14: redvox_api_m.RedvoxPacketM.TimingInformation.metadata:type_name -> redvox_api_m.RedvoxPacketM.TimingInformation.MetadataEntry
	48,  // 15: redvox_api_m.RedvoxPacketM.Sensors.accelerometer:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	46,  // 16: redvox_api_m.RedvoxPacketM.Sensors.ambient_temperature:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Single
	44,  // 17: redvox_api_m.RedvoxPacketM.Sensors.audio:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Audio
	45,  // 18: redvox_api_m.RedvoxPacketM.Sensors.compressed_audio:type_name -> redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio
	48,  // 19: redvox_api_m.RedvoxPacketM.Sensors.gravity:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	48,  // 20: redvox_api_m.RedvoxPacketM.Sensors.gyroscope:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	49,  // 21: redvox_api_m.RedvoxPacketM.Sensors.image:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Image
	46,  // 22: redvox_api_m.RedvoxPacketM.Sensors.light:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Single
	48,  // 23: redvox_api_m.RedvoxPacketM.Sensors.linear_acceleration:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	47,  // 24: redvox_api_m.RedvoxPacketM.Sensors.location:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location
	48,  // 25: redvox_api_m.RedvoxPacketM.Sensors.magnetometer:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	48,  // 26: redvox_api_m.RedvoxPacketM.Sensors.orientation:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	46,  // 27: redvox_api_m.RedvoxPacketM.Sensors.pressure:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Single
	46,  // 28: redvox_api_m.RedvoxPacketM.Sensors.proximity:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Single
	46,  // 29: redvox_api_m.RedvoxPacketM.Sensors.relative_humidity:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Single
	48,  // 30: redvox_api_m.RedvoxPacketM.Sensors.rotation_vector:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	48,  // 31: redvox_api_m.RedvoxPacketM.Sensors.velocity:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz
	43,  // 32: redvox_api_m.RedvoxPacketM.Sensors.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.MetadataEntry
	31,  // 33: redvox_api_m.RedvoxPacketM.EventStream.timestamps:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload
	61,  // 34: redvox_api_m.RedvoxPacketM.EventStream.events:type_name -> redvox_api_m.RedvoxPacketM.EventStream.Event
	60,  // 35: redvox_api_m.RedvoxPacketM.EventStream.metadata:type_name -> redvox_api_m.RedvoxPacketM.EventStream.MetadataEntry
	0,   // 36: redvox_api_m.RedvoxPacketM.SamplePayload.unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	32,  // 37: redvox_api_m.RedvoxPacketM.SamplePayload.value_statistics:type_name -> redvox_api_m.RedvoxPacketM.SummaryStatistics
	67,  // 38: redvox_api_m.RedvoxPacketM.SamplePayload.metadata:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload.MetadataEntry
	0,   // 39: redvox_api_m.RedvoxPacketM.DoubleSamplePayload.unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	32,  // 40: redvox_api_m.RedvoxPacketM.DoubleSamplePayload.value_statistics:type_name -> redvox_api_m.RedvoxPacketM.SummaryStatistics
	68,  // 41: redvox_api_m.RedvoxPacketM.DoubleSamplePayload.metadata:type_name -> redvox_api_m.RedvoxPacketM.DoubleSamplePayload.MetadataEntry
	0,   // 42: redvox_api_m.RedvoxPacketM.TimingPayload.unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	32,  // 43: redvox_api_m.RedvoxPacketM.TimingPayload.timestamp_statistics:type_name -> redvox_api_m.RedvoxPacketM.SummaryStatistics
	69,  // 44: redvox_api_m.RedvoxPacketM.TimingPayload.metadata:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload.MetadataEntry
	70,  // 45: redvox_api_m.RedvoxPacketM.SummaryStatistics.metadata:type_name -> redvox_api_m.RedvoxPacketM.SummaryStatistics.MetadataEntry
	37,  // 46: redvox_api_m.RedvoxPacketM.StationInformation.ServiceUrls.metadata:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.ServiceUrls.MetadataEntry
	31,  // 47: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.timestamps:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload
	3,   // 48: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.network_type:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.NetworkType
	5,   // 49: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.cell_service_state:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.CellServiceState
	29,  // 50: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.network_strength:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 51: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.temperature:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 52: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.battery:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 53: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.battery_current:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 54: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.available_ram:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 55: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.available_disk:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 56: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.cpu_utilization:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	6,   // 57: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.power_state:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.PowerState
	4,   // 58: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.wifi_wake_lock:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.WifiWakeLock
	7,   // 59: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.screen_state:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.ScreenState
	29,  // 60: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.screen_brightness:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	38,  // 61: redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.metadata:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.StationMetrics.MetadataEntry
	9,   // 62: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.audio_sampling_rate:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.AudioSamplingRate
	10,  // 63: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.audio_source_tuning:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.AudioSourceTuning
	11,  // 64: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.additional_input_sensors:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.InputSensor
	8,   // 65: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.fft_overlap:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.FftOverlap
	2,   // 66: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.metrics_rate:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.MetricsRate
	39,  // 67: redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.metadata:type_name -> redvox_api_m.RedvoxPacketM.StationInformation.AppSettings.MetadataEntry
	0,   // 68: redvox_api_m.RedvoxPacketM.TimingInformation.SynchExchange.unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	42,  // 69: redvox_api_m.RedvoxPacketM.TimingInformation.SynchExchange.metadata:type_name -> redvox_api_m.RedvoxPacketM.TimingInformation.SynchExchange.MetadataEntry
	29,  // 70: redvox_api_m.RedvoxPacketM.Sensors.Audio.samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	50,  // 71: redvox_api_m.RedvoxPacketM.Sensors.Audio.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Audio.MetadataEntry
	13,  // 72: redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio.audio_codec:type_name -> redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio.AudioCodec
	51,  // 73: redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.CompressedAudio.MetadataEntry
	31,  // 74: redvox_api_m.RedvoxPacketM.Sensors.Single.timestamps:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload
	29,  // 75: redvox_api_m.RedvoxPacketM.Sensors.Single.samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	52,  // 76: redvox_api_m.RedvoxPacketM.Sensors.Single.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Single.MetadataEntry
	31,  // 77: redvox_api_m.RedvoxPacketM.Sensors.Location.timestamps:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload
	31,  // 78: redvox_api_m.RedvoxPacketM.Sensors.Location.timestamps_gps:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload
	30,  // 79: redvox_api_m.RedvoxPacketM.Sensors.Location.latitude_samples:type_name -> redvox_api_m.RedvoxPacketM.DoubleSamplePayload
	30,  // 80: redvox_api_m.RedvoxPacketM.Sensors.Location.longitude_samples:type_name -> redvox_api_m.RedvoxPacketM.DoubleSamplePayload
	29,  // 81: redvox_api_m.RedvoxPacketM.Sensors.Location.altitude_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 82: redvox_api_m.RedvoxPacketM.Sensors.Location.speed_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 83: redvox_api_m.RedvoxPacketM.Sensors.Location.bearing_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 84: redvox_api_m.RedvoxPacketM.Sensors.Location.horizontal_accuracy_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 85: redvox_api_m.RedvoxPacketM.Sensors.Location.vertical_accuracy_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 86: redvox_api_m.RedvoxPacketM.Sensors.Location.speed_accuracy_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 87: redvox_api_m.RedvoxPacketM.Sensors.Location.bearing_accuracy_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	54,  // 88: redvox_api_m.RedvoxPacketM.Sensors.Location.last_best_location:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation
	54,  // 89: redvox_api_m.RedvoxPacketM.Sensors.Location.overall_best_location:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation
	14,  // 90: redvox_api_m.RedvoxPacketM.Sensors.Location.location_providers:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.LocationProvider
	53,  // 91: redvox_api_m.RedvoxPacketM.Sensors.Location.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.MetadataEntry
	31,  // 92: redvox_api_m.RedvoxPacketM.Sensors.Xyz.timestamps:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload
	29,  // 93: redvox_api_m.RedvoxPacketM.Sensors.Xyz.x_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 94: redvox_api_m.RedvoxPacketM.Sensors.Xyz.y_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	29,  // 95: redvox_api_m.RedvoxPacketM.Sensors.Xyz.z_samples:type_name -> redvox_api_m.RedvoxPacketM.SamplePayload
	58,  // 96: redvox_api_m.RedvoxPacketM.Sensors.Xyz.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Xyz.MetadataEntry
	31,  // 97: redvox_api_m.RedvoxPacketM.Sensors.Image.timestamps:type_name -> redvox_api_m.RedvoxPacketM.TimingPayload
	16,  // 98: redvox_api_m.RedvoxPacketM.Sensors.Image.image_codec:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Image.ImageCodec
	59,  // 99: redvox_api_m.RedvoxPacketM.Sensors.Image.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Image.MetadataEntry
	56,  // 100: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.latitude_longitude_timestamp:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp
	56,  // 101: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.altitude_timestamp:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp
	56,  // 102: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.speed_timestamp:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp
	56,  // 103: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.bearing_timestamp:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp
	0,   // 104: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.latitude_longitude_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	0,   // 105: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.altitude_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	0,   // 106: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.speed_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	0,   // 107: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.bearing_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	0,   // 108: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.vertical_accuracy_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	0,   // 109: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.horizontal_accuracy_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	0,   // 110: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.speed_accuracy_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	0,   // 111: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.bearing_accuracy_unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	15,  // 112: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.method:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.LocationScoreMethod
	14,  // 113: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.location_provider:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.LocationProvider
	55,  // 114: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.MetadataEntry
	0,   // 115: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp.unit:type_name -> redvox_api_m.RedvoxPacketM.Unit
	57,  // 116: redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp.metadata:type_name -> redvox_api_m.RedvoxPacketM.Sensors.Location.BestLocation.BestTimestamp.MetadataEntry
	62,  // 117: redvox_api_m.RedvoxPacketM.EventStream.Event.string_payload:type_name -> redvox_api_m.RedvoxPacketM.EventStream.Event.StringPayloadEntry
	63,  // 118: redvox_api_m.RedvoxPacketM.EventStream.Event.numeric_payload:type_name -> redvox_api_m.RedvoxPacketM.EventStream.Event.NumericPayloadEntry
	64,  // 119: redvox_api_m.RedvoxPacketM.EventStream.Event.boolean_payload:type_name -> redvox_api_m.RedvoxPacketM.EventStream.Event.BooleanPayloadEntry
	65,  // 120: redvox_api_m.RedvoxPacketM.EventStream.Event.byte_payload:type_name -> redvox_api_m.RedvoxPacketM.EventStream.Event.BytePayloadEntry
	66,  // 121: redvox_api_m.RedvoxPacketM.EventStream.Event.metadata:type_name -> redvox_api_m.RedvoxPacketM.EventStream.Event.MetadataEntry
	122, // [122:122] is the sub-list for method output_type
	122, // [122:122] is the sub-list for method input_type
	122, // [122:122] is the sub-list for extension type_name
	122, // [122:122] is the sub-list for extension extendee
	0,   // [0:122] is the sub-list for field type_name
}

func init() { file_redvox_api_m_proto_init() }
func file_redvox_api_m_proto_init() {
	if File_redvox_api_m_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redvox_api_m_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedRedvoxPacketM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_StationInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_TimingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_EventStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_SamplePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_DoubleSamplePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_TimingPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_SummaryStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_StationInformation_ServiceUrls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_StationInformation_StationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_StationInformation_AppSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_TimingInformation_SynchExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_CompressedAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_Single); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_Xyz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_Location_BestLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedvoxPacketM_EventStream_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redvox_api_m_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedRedvoxPacketM_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redvox_api_m_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redvox_api_m_proto_goTypes,
		DependencyIndexes: file_redvox_api_m_proto_depIdxs,
		EnumInfos:         file_redvox_api_m_proto_enumTypes,
		MessageInfos:      file_redvox_api_m_proto_msgTypes,
	}.Build()
	File_redvox_api_m_proto = out.File
	file_redvox_api_m_proto_rawDesc = nil
	file_redvox_api_m_proto_goTypes = nil
	file_redvox_api_m_proto_depIdxs = nil
}
