#define SUB_API 9.0  // redvox-api-1000 -> build_protos.sh -> insert_sub_api.py on 2020-09-14 20:48:24.787143

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/redvox_api_m/redvox_api_m.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class RedvoxPacketM_DoubleSamplePayload;
@class RedvoxPacketM_EventStream;
@class RedvoxPacketM_EventStream_Event;
@class RedvoxPacketM_SamplePayload;
@class RedvoxPacketM_Sensors;
@class RedvoxPacketM_Sensors_Audio;
@class RedvoxPacketM_Sensors_CompressedAudio;
@class RedvoxPacketM_Sensors_Image;
@class RedvoxPacketM_Sensors_Location;
@class RedvoxPacketM_Sensors_Location_BestLocation;
@class RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp;
@class RedvoxPacketM_Sensors_Single;
@class RedvoxPacketM_Sensors_Xyz;
@class RedvoxPacketM_StationInformation;
@class RedvoxPacketM_StationInformation_AppSettings;
@class RedvoxPacketM_StationInformation_ServiceUrls;
@class RedvoxPacketM_StationInformation_StationMetrics;
@class RedvoxPacketM_SummaryStatistics;
@class RedvoxPacketM_TimingInformation;
@class RedvoxPacketM_TimingInformation_SynchExchange;
@class RedvoxPacketM_TimingPayload;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum RedvoxPacketM_Unit

/** Enumeration of API M supported units */
typedef GPB_ENUM(RedvoxPacketM_Unit) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_Unit_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_Unit_Unknown = 0,
  RedvoxPacketM_Unit_MetersPerSecondSquared = 1,
  RedvoxPacketM_Unit_Kilopascal = 2,
  RedvoxPacketM_Unit_RadiansPerSecond = 3,
  RedvoxPacketM_Unit_DecimalDegrees = 4,
  RedvoxPacketM_Unit_Meters = 5,
  RedvoxPacketM_Unit_MetersPerSecond = 6,
  RedvoxPacketM_Unit_Microtesla = 7,
  RedvoxPacketM_Unit_LsbPlusMinusCounts = 8,
  RedvoxPacketM_Unit_MicrosecondsSinceUnixEpoch = 9,
  RedvoxPacketM_Unit_Decibel = 10,
  RedvoxPacketM_Unit_DegreesCelsius = 11,
  RedvoxPacketM_Unit_Byte = 12,
  RedvoxPacketM_Unit_Percentage = 13,
  RedvoxPacketM_Unit_Radians = 14,
  RedvoxPacketM_Unit_Microamperes = 15,
  RedvoxPacketM_Unit_Centimeters = 16,
  RedvoxPacketM_Unit_NormalizedCounts = 17,
  RedvoxPacketM_Unit_Lux = 18,
  RedvoxPacketM_Unit_Unitless = 19,
  RedvoxPacketM_Unit_Pcm = 20,
};

GPBEnumDescriptor *RedvoxPacketM_Unit_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_Unit_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_OsType

/** An enumeration specifying the available operating system types */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_OsType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_OsType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_OsType_UnknownOs = 0,
  RedvoxPacketM_StationInformation_OsType_Android = 1,
  RedvoxPacketM_StationInformation_OsType_Ios = 2,
  RedvoxPacketM_StationInformation_OsType_Osx = 3,
  RedvoxPacketM_StationInformation_OsType_Linux = 4,
  RedvoxPacketM_StationInformation_OsType_Windows = 5,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_OsType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_OsType_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_StationMetrics_NetworkType

/** An enumeration specifying the available network types */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_StationMetrics_NetworkType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_StationMetrics_NetworkType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_StationMetrics_NetworkType_UnknownNetwork = 0,
  RedvoxPacketM_StationInformation_StationMetrics_NetworkType_NoNetwork = 1,
  RedvoxPacketM_StationInformation_StationMetrics_NetworkType_Wifi = 2,
  RedvoxPacketM_StationInformation_StationMetrics_NetworkType_Cellular = 3,
  RedvoxPacketM_StationInformation_StationMetrics_NetworkType_Wired = 4,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_StationMetrics_NetworkType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_StationMetrics_NetworkType_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock

/** Type of WiFi wake lock un use */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_None = 0,
  RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_HighPerf = 1,
  RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_LowLatency = 2,
  RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_Other = 3,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_StationMetrics_CellServiceState

/** State of the cellular service */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_StationMetrics_CellServiceState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** State is unknown */
  RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_Unknown = 0,

  /** Only emergency calls */
  RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_Emergency = 1,

  /** Everything is working fine */
  RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_Nominal = 2,

  /** Cell is searching for service, no available networks */
  RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_OutOfService = 3,

  /** Cellular radio is powered off */
  RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_PowerOff = 4,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_StationMetrics_CellServiceState_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_StationMetrics_PowerState

/** The state of power supply to station */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_StationMetrics_PowerState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_StationMetrics_PowerState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_StationMetrics_PowerState_UnknownPowerState = 0,
  RedvoxPacketM_StationInformation_StationMetrics_PowerState_Unplugged = 1,
  RedvoxPacketM_StationInformation_StationMetrics_PowerState_Charging = 2,
  RedvoxPacketM_StationInformation_StationMetrics_PowerState_Charged = 3,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_StationMetrics_PowerState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_StationMetrics_PowerState_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_AppSettings_FftOverlap

/** Configured FFT overlap */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_AppSettings_FftOverlap) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_AppSettings_FftOverlap_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_AppSettings_FftOverlap_Unknown = 0,
  RedvoxPacketM_StationInformation_AppSettings_FftOverlap_Percent25 = 1,
  RedvoxPacketM_StationInformation_AppSettings_FftOverlap_Percent50 = 2,
  RedvoxPacketM_StationInformation_AppSettings_FftOverlap_Percent75 = 3,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_AppSettings_FftOverlap_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_AppSettings_FftOverlap_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate

/** Configured sampling rate */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_UnknownSamplingRate = 0,
  RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_Hz80 = 1,
  RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_Hz800 = 2,
  RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_Hz8000 = 3,
  RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_Hz16000 = 4,
  RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_Hz48000 = 5,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning

/** Configured audio source tuning */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_UnknownTuning = 0,
  RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_InfrasoundTuning = 1,
  RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_LowAudioTuning = 2,
  RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_AudioTuning = 3,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_StationInformation_AppSettings_InputSensor

/** Configured input sensors */
typedef GPB_ENUM(RedvoxPacketM_StationInformation_AppSettings_InputSensor) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_UnknownSensor = 0,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Accelerometer = 1,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_AmbientTemperature = 2,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Audio = 3,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_CompressedAudio = 4,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Gravity = 5,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Gyroscope = 6,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Image = 7,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Light = 8,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_LinearAcceleration = 9,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Location = 10,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Magnetometer = 11,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Orientation = 12,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Pressure = 13,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_Proximity = 14,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_RelativeHumidity = 15,
  RedvoxPacketM_StationInformation_AppSettings_InputSensor_RotationVector = 16,
};

GPBEnumDescriptor *RedvoxPacketM_StationInformation_AppSettings_InputSensor_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_StationInformation_AppSettings_InputSensor_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_TimingInformation_TimingScoreMethod

/** Method used to score timing metrics */
typedef GPB_ENUM(RedvoxPacketM_TimingInformation_TimingScoreMethod) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_TimingInformation_TimingScoreMethod_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_TimingInformation_TimingScoreMethod_Unknown = 0,
};

GPBEnumDescriptor *RedvoxPacketM_TimingInformation_TimingScoreMethod_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_TimingInformation_TimingScoreMethod_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_Sensors_CompressedAudio_AudioCodec

/** Available audio codecs */
typedef GPB_ENUM(RedvoxPacketM_Sensors_CompressedAudio_AudioCodec) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_Unknown = 0,
  RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_Flac = 1,
};

GPBEnumDescriptor *RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_Sensors_Location_LocationProvider

/** An enumeration of location providers */
typedef GPB_ENUM(RedvoxPacketM_Sensors_Location_LocationProvider) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_Sensors_Location_LocationProvider_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_Sensors_Location_LocationProvider_Unknown = 0,
  RedvoxPacketM_Sensors_Location_LocationProvider_None = 1,
  RedvoxPacketM_Sensors_Location_LocationProvider_User = 2,
  RedvoxPacketM_Sensors_Location_LocationProvider_Gps = 3,
  RedvoxPacketM_Sensors_Location_LocationProvider_Network = 4,
};

GPBEnumDescriptor *RedvoxPacketM_Sensors_Location_LocationProvider_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_Sensors_Location_LocationProvider_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod

/** An enumeration for the various scoring methods for the "best of" metrics */
typedef GPB_ENUM(RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod_UnknownMethod = 0,
};

GPBEnumDescriptor *RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod_IsValidValue(int32_t value);

#pragma mark - Enum RedvoxPacketM_Sensors_Image_ImageCodec

/** Codec used to encode the image */
typedef GPB_ENUM(RedvoxPacketM_Sensors_Image_ImageCodec) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RedvoxPacketM_Sensors_Image_ImageCodec_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RedvoxPacketM_Sensors_Image_ImageCodec_Unknown = 0,
  RedvoxPacketM_Sensors_Image_ImageCodec_Png = 1,
  RedvoxPacketM_Sensors_Image_ImageCodec_Jpg = 2,
  RedvoxPacketM_Sensors_Image_ImageCodec_Bmp = 3,
};

GPBEnumDescriptor *RedvoxPacketM_Sensors_Image_ImageCodec_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RedvoxPacketM_Sensors_Image_ImageCodec_IsValidValue(int32_t value);

#pragma mark - Enum AcquisitionResponse_ResponseType

typedef GPB_ENUM(AcquisitionResponse_ResponseType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  AcquisitionResponse_ResponseType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Unknown (default) response type */
  AcquisitionResponse_ResponseType_Unknown = 0,

  /** No issues with packet */
  AcquisitionResponse_ResponseType_Ok = 1,

  /** An authentication error has occurred */
  AcquisitionResponse_ResponseType_AuthError = 2,

  /** An error with the data decoding or data quality */
  AcquisitionResponse_ResponseType_DataError = 3,

  /** Any other errors */
  AcquisitionResponse_ResponseType_OtherError = 4,
};

GPBEnumDescriptor *AcquisitionResponse_ResponseType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL AcquisitionResponse_ResponseType_IsValidValue(int32_t value);

#pragma mark - RedvoxApiMRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface RedvoxApiMRoot : GPBRootObject
@end

#pragma mark - RedvoxPacketM

typedef GPB_ENUM(RedvoxPacketM_FieldNumber) {
  RedvoxPacketM_FieldNumber_Api = 1,
  RedvoxPacketM_FieldNumber_SubApi = 2,
  RedvoxPacketM_FieldNumber_StationInformation = 3,
  RedvoxPacketM_FieldNumber_TimingInformation = 4,
  RedvoxPacketM_FieldNumber_Sensors = 5,
  RedvoxPacketM_FieldNumber_EventStreamsArray = 6,
  RedvoxPacketM_FieldNumber_Metadata = 7,
};

/**
 * Top level packet fields
 **/
@interface RedvoxPacketM : GPBMessage

/** The API version, should always be 1000 */
@property(nonatomic, readwrite) float api;

/** The sub-api version. */
@property(nonatomic, readwrite) float subApi;

/** Station metadata/metrics */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_StationInformation *stationInformation;
/** Test to see if @c stationInformation has been set. */
@property(nonatomic, readwrite) BOOL hasStationInformation;

/** Timing information, synch exchanges */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingInformation *timingInformation;
/** Test to see if @c timingInformation has been set. */
@property(nonatomic, readwrite) BOOL hasTimingInformation;

/** Sensors, payloads, etc */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors *sensors;
/** Test to see if @c sensors has been set. */
@property(nonatomic, readwrite) BOOL hasSensors;

/** Derived event streams */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RedvoxPacketM_EventStream*> *eventStreamsArray;
/** The number of items in @c eventStreamsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventStreamsArray_Count;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_StationInformation

typedef GPB_ENUM(RedvoxPacketM_StationInformation_FieldNumber) {
  RedvoxPacketM_StationInformation_FieldNumber_Id_p = 1,
  RedvoxPacketM_StationInformation_FieldNumber_Uuid = 2,
  RedvoxPacketM_StationInformation_FieldNumber_Description_p = 3,
  RedvoxPacketM_StationInformation_FieldNumber_AuthId = 4,
  RedvoxPacketM_StationInformation_FieldNumber_Make = 5,
  RedvoxPacketM_StationInformation_FieldNumber_Model = 6,
  RedvoxPacketM_StationInformation_FieldNumber_Os = 7,
  RedvoxPacketM_StationInformation_FieldNumber_OsVersion = 8,
  RedvoxPacketM_StationInformation_FieldNumber_AppVersion = 9,
  RedvoxPacketM_StationInformation_FieldNumber_IsPrivate = 10,
  RedvoxPacketM_StationInformation_FieldNumber_AppSettings = 11,
  RedvoxPacketM_StationInformation_FieldNumber_StationMetrics = 12,
  RedvoxPacketM_StationInformation_FieldNumber_ServiceUrls = 13,
  RedvoxPacketM_StationInformation_FieldNumber_Metadata = 14,
};

/**
 * This message contains station metadata and related station state metrics
 **/
@interface RedvoxPacketM_StationInformation : GPBMessage

/** The user selectable station id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** The software provided UUID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uuid;

/** Human friendly description of station (i.e. ISLA_0) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** Authentication ID (user's email) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *authId;

/** Make of the station */
@property(nonatomic, readwrite, copy, null_resettable) NSString *make;

/** Model of the station */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/** OS of the station */
@property(nonatomic, readwrite) RedvoxPacketM_StationInformation_OsType os;

/** OS version of the station */
@property(nonatomic, readwrite, copy, null_resettable) NSString *osVersion;

/** App version on the station */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appVersion;

/** If the station was set to record privately when this packet was recorded */
@property(nonatomic, readwrite) BOOL isPrivate;

/** A copy of the App's settings */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_StationInformation_AppSettings *appSettings;
/** Test to see if @c appSettings has been set. */
@property(nonatomic, readwrite) BOOL hasAppSettings;

/** Detail station performance metrics */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_StationInformation_StationMetrics *stationMetrics;
/** Test to see if @c stationMetrics has been set. */
@property(nonatomic, readwrite) BOOL hasStationMetrics;

/** URLs of remote services utilized by this station */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_StationInformation_ServiceUrls *serviceUrls;
/** Test to see if @c serviceUrls has been set. */
@property(nonatomic, readwrite) BOOL hasServiceUrls;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_StationInformation's @c os property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_StationInformation_Os_RawValue(RedvoxPacketM_StationInformation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_StationInformation's @c os property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_StationInformation_Os_RawValue(RedvoxPacketM_StationInformation *message, int32_t value);

#pragma mark - RedvoxPacketM_StationInformation_ServiceUrls

typedef GPB_ENUM(RedvoxPacketM_StationInformation_ServiceUrls_FieldNumber) {
  RedvoxPacketM_StationInformation_ServiceUrls_FieldNumber_AuthServer = 1,
  RedvoxPacketM_StationInformation_ServiceUrls_FieldNumber_SynchServer = 2,
  RedvoxPacketM_StationInformation_ServiceUrls_FieldNumber_AcquisitionServer = 3,
  RedvoxPacketM_StationInformation_ServiceUrls_FieldNumber_Metadata = 4,
};

/**
 * Backend service URLs used in the creation of this packet
 **/
@interface RedvoxPacketM_StationInformation_ServiceUrls : GPBMessage

/** The URL of the authentication server */
@property(nonatomic, readwrite, copy, null_resettable) NSString *authServer;

/** The URL of the synch server */
@property(nonatomic, readwrite, copy, null_resettable) NSString *synchServer;

/** The URL of the acquisition server */
@property(nonatomic, readwrite, copy, null_resettable) NSString *acquisitionServer;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_StationInformation_StationMetrics

typedef GPB_ENUM(RedvoxPacketM_StationInformation_StationMetrics_FieldNumber) {
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_Timestamps = 1,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_NetworkTypeArray = 2,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_CellServiceStateArray = 3,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_NetworkStrength = 4,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_Temperature = 5,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_Battery = 6,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_BatteryCurrent = 7,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_AvailableRam = 8,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_AvailableDisk = 9,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_CpuUtilization = 10,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_PowerStateArray = 11,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_WifiWakeLockArray = 12,
  RedvoxPacketM_StationInformation_StationMetrics_FieldNumber_Metadata = 13,
};

/**
 * Collection of station state and performance metrics
 **/
@interface RedvoxPacketM_StationInformation_StationMetrics : GPBMessage

/** Timestamps associated with following sensor state metrics */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingPayload *timestamps;
/** Test to see if @c timestamps has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamps;

/** Type of network connection */
// |networkTypeArray| contains |RedvoxPacketM_StationInformation_StationMetrics_NetworkType|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *networkTypeArray;
/** The number of items in @c networkTypeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger networkTypeArray_Count;

/** State of the cellular service */
// |cellServiceStateArray| contains |RedvoxPacketM_StationInformation_StationMetrics_CellServiceState|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *cellServiceStateArray;
/** The number of items in @c cellServiceStateArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cellServiceStateArray_Count;

/** A value representing the strength of the network connection in decibels */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *networkStrength;
/** Test to see if @c networkStrength has been set. */
@property(nonatomic, readwrite) BOOL hasNetworkStrength;

/** Internal temperature of station in degrees Celsius */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *temperature;
/** Test to see if @c temperature has been set. */
@property(nonatomic, readwrite) BOOL hasTemperature;

/** Remaining percentage of station's battery */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *battery;
/** Test to see if @c battery has been set. */
@property(nonatomic, readwrite) BOOL hasBattery;

/** Current in microamperes */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *batteryCurrent;
/** Test to see if @c batteryCurrent has been set. */
@property(nonatomic, readwrite) BOOL hasBatteryCurrent;

/** Available ram in bytes */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *availableRam;
/** Test to see if @c availableRam has been set. */
@property(nonatomic, readwrite) BOOL hasAvailableRam;

/** Available disk space in bytes */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *availableDisk;
/** Test to see if @c availableDisk has been set. */
@property(nonatomic, readwrite) BOOL hasAvailableDisk;

/** CPU utilization as a percentage */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *cpuUtilization;
/** Test to see if @c cpuUtilization has been set. */
@property(nonatomic, readwrite) BOOL hasCpuUtilization;

/** Power state enumeration */
// |powerStateArray| contains |RedvoxPacketM_StationInformation_StationMetrics_PowerState|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *powerStateArray;
/** The number of items in @c powerStateArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger powerStateArray_Count;

/** If a wifi wake lock is being utilized */
// |wifiWakeLockArray| contains |RedvoxPacketM_StationInformation_StationMetrics_WifiWakeLock|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *wifiWakeLockArray;
/** The number of items in @c wifiWakeLockArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger wifiWakeLockArray_Count;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_StationInformation_AppSettings

typedef GPB_ENUM(RedvoxPacketM_StationInformation_AppSettings_FieldNumber) {
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_AudioSamplingRate = 1,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_SamplesPerWindow = 2,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_AudioSourceTuning = 3,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_AdditionalInputSensorsArray = 4,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_AutomaticallyRecord = 5,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_LaunchAtPowerUp = 6,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_StationId = 7,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_StationDescription = 8,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_PushToServer = 9,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_PublishDataAsPrivate = 10,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_ScrambleAudioData = 11,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_ProvideBackfill = 12,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_RemoveSensorDcOffset = 13,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_FftOverlap = 14,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseCustomTimeSyncServer = 15,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_TimeSyncServerURL = 16,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseCustomDataServer = 17,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_DataServerURL = 18,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseCustomAuthServer = 19,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_AuthServerURL = 20,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_AutoDeleteDataFiles = 21,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_StorageSpaceAllowance = 22,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseSdCardForDataStorage = 23,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseLocationServices = 24,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseLatitude = 25,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseLongitude = 26,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_UseAltitude = 27,
  RedvoxPacketM_StationInformation_AppSettings_FieldNumber_Metadata = 28,
};

/**
 * A message that encapsulates the state of the app settings
 **/
@interface RedvoxPacketM_StationInformation_AppSettings : GPBMessage

/** The selected audio sampling rate */
@property(nonatomic, readwrite) RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate audioSamplingRate;

@property(nonatomic, readwrite) float samplesPerWindow;

/** The selected audio source tuning */
@property(nonatomic, readwrite) RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning audioSourceTuning;

/** Additional input sensors */
// |additionalInputSensorsArray| contains |RedvoxPacketM_StationInformation_AppSettings_InputSensor|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *additionalInputSensorsArray;
/** The number of items in @c additionalInputSensorsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger additionalInputSensorsArray_Count;

/** Station automatically records on start */
@property(nonatomic, readwrite) BOOL automaticallyRecord;

/** App automatically starts on station */
@property(nonatomic, readwrite) BOOL launchAtPowerUp;

/** User selectable station id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationId;

/** User selectable station description */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationDescription;

/** Is station data pushed to server? */
@property(nonatomic, readwrite) BOOL pushToServer;

/** Is station data published as private? */
@property(nonatomic, readwrite) BOOL publishDataAsPrivate;

/** Is station audio data scrambled? */
@property(nonatomic, readwrite) BOOL scrambleAudioData;

/** Should station backfill unsent data? */
@property(nonatomic, readwrite) BOOL provideBackfill;

/** Does station remove DC offset? */
@property(nonatomic, readwrite) BOOL removeSensorDcOffset;

/** Station FFT overlap */
@property(nonatomic, readwrite) RedvoxPacketM_StationInformation_AppSettings_FftOverlap fftOverlap;

/** Should station use custom time synch server? */
@property(nonatomic, readwrite) BOOL useCustomTimeSyncServer;

/** URL of custom time synch server */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeSyncServerURL;

/** Should station use custom data server? */
@property(nonatomic, readwrite) BOOL useCustomDataServer;

/** URL of custom data server */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dataServerURL;

/** Should station use custom auth server */
@property(nonatomic, readwrite) BOOL useCustomAuthServer;

/** URL of custom auth server */
@property(nonatomic, readwrite, copy, null_resettable) NSString *authServerURL;

/** Should station auto delete data? */
@property(nonatomic, readwrite) BOOL autoDeleteDataFiles;

/** Station data allowance in bytes */
@property(nonatomic, readwrite) float storageSpaceAllowance;

/** Should station use SD card for storage? */
@property(nonatomic, readwrite) BOOL useSdCardForDataStorage;

/** Should station use location services? */
@property(nonatomic, readwrite) BOOL useLocationServices;

/** User set latitude decimal degrees */
@property(nonatomic, readwrite) double useLatitude;

/** User set longitude decimal degrees */
@property(nonatomic, readwrite) double useLongitude;

/** User set altitude meters */
@property(nonatomic, readwrite) float useAltitude;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_StationInformation_AppSettings's @c audioSamplingRate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_RawValue(RedvoxPacketM_StationInformation_AppSettings *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_StationInformation_AppSettings's @c audioSamplingRate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_StationInformation_AppSettings_AudioSamplingRate_RawValue(RedvoxPacketM_StationInformation_AppSettings *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_StationInformation_AppSettings's @c audioSourceTuning property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_RawValue(RedvoxPacketM_StationInformation_AppSettings *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_StationInformation_AppSettings's @c audioSourceTuning property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_StationInformation_AppSettings_AudioSourceTuning_RawValue(RedvoxPacketM_StationInformation_AppSettings *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_StationInformation_AppSettings's @c fftOverlap property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_StationInformation_AppSettings_FftOverlap_RawValue(RedvoxPacketM_StationInformation_AppSettings *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_StationInformation_AppSettings's @c fftOverlap property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_StationInformation_AppSettings_FftOverlap_RawValue(RedvoxPacketM_StationInformation_AppSettings *message, int32_t value);

#pragma mark - RedvoxPacketM_TimingInformation

typedef GPB_ENUM(RedvoxPacketM_TimingInformation_FieldNumber) {
  RedvoxPacketM_TimingInformation_FieldNumber_PacketStartOsTimestamp = 1,
  RedvoxPacketM_TimingInformation_FieldNumber_PacketStartMachTimestamp = 2,
  RedvoxPacketM_TimingInformation_FieldNumber_PacketEndOsTimestamp = 3,
  RedvoxPacketM_TimingInformation_FieldNumber_PacketEndMachTimestamp = 4,
  RedvoxPacketM_TimingInformation_FieldNumber_ServerAcquisitionArrivalTimestamp = 5,
  RedvoxPacketM_TimingInformation_FieldNumber_AppStartMachTimestamp = 6,
  RedvoxPacketM_TimingInformation_FieldNumber_SynchExchangesArray = 7,
  RedvoxPacketM_TimingInformation_FieldNumber_BestLatency = 8,
  RedvoxPacketM_TimingInformation_FieldNumber_BestOffset = 9,
  RedvoxPacketM_TimingInformation_FieldNumber_Score = 10,
  RedvoxPacketM_TimingInformation_FieldNumber_ScoreMethod = 11,
  RedvoxPacketM_TimingInformation_FieldNumber_Unit = 12,
  RedvoxPacketM_TimingInformation_FieldNumber_Metadata = 13,
};

/**
 * Stores timing information and related metrics
 * See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/keeping_time.md
 **/
@interface RedvoxPacketM_TimingInformation : GPBMessage

/** Start timestamp of the packet using the os clock (corresponding to first audio sample) */
@property(nonatomic, readwrite) double packetStartOsTimestamp;

/** Start timestamp of the packet using machine time (corresponding to the first audio sample) */
@property(nonatomic, readwrite) double packetStartMachTimestamp;

/** End timestamp of the packet using the os clock (corresponding to the last audio sample) */
@property(nonatomic, readwrite) double packetEndOsTimestamp;

/** End timestamp of the packet using machine time (corresponding to the last audio sample) */
@property(nonatomic, readwrite) double packetEndMachTimestamp;

/** Timestamp that the packet arrived at the acquisition server */
@property(nonatomic, readwrite) double serverAcquisitionArrivalTimestamp;

/** The start of the app as machine time */
@property(nonatomic, readwrite) double appStartMachTimestamp;

/** An array of synchronization params from the synch server */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RedvoxPacketM_TimingInformation_SynchExchange*> *synchExchangesArray;
/** The number of items in @c synchExchangesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger synchExchangesArray_Count;

/** The best latency as determined from the synch params in microseconds */
@property(nonatomic, readwrite) float bestLatency;

/** The best offset as determined from the synch params in microseconds */
@property(nonatomic, readwrite) float bestOffset;

/** The overall timing score */
@property(nonatomic, readwrite) float score;

/** Method used to provide score */
@property(nonatomic, readwrite) RedvoxPacketM_TimingInformation_TimingScoreMethod scoreMethod;

/** A unit describing the time (should always be MICROSECONDS_SINCE_UNIX_EPOCH) */
@property(nonatomic, readwrite) RedvoxPacketM_Unit unit;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_TimingInformation's @c scoreMethod property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_TimingInformation_ScoreMethod_RawValue(RedvoxPacketM_TimingInformation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_TimingInformation's @c scoreMethod property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_TimingInformation_ScoreMethod_RawValue(RedvoxPacketM_TimingInformation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_TimingInformation's @c unit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_TimingInformation_Unit_RawValue(RedvoxPacketM_TimingInformation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_TimingInformation's @c unit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_TimingInformation_Unit_RawValue(RedvoxPacketM_TimingInformation *message, int32_t value);

#pragma mark - RedvoxPacketM_TimingInformation_SynchExchange

typedef GPB_ENUM(RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber) {
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_A1 = 1,
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_A2 = 2,
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_A3 = 3,
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_B1 = 4,
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_B2 = 5,
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_B3 = 6,
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_Unit = 7,
  RedvoxPacketM_TimingInformation_SynchExchange_FieldNumber_Metadata = 8,
};

/**
 * Type-safe synchronization exchange values
 **/
@interface RedvoxPacketM_TimingInformation_SynchExchange : GPBMessage

@property(nonatomic, readwrite) double a1;

@property(nonatomic, readwrite) double a2;

@property(nonatomic, readwrite) double a3;

@property(nonatomic, readwrite) double b1;

@property(nonatomic, readwrite) double b2;

@property(nonatomic, readwrite) double b3;

/** Unit of parameters a1-b3 */
@property(nonatomic, readwrite) RedvoxPacketM_Unit unit;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_TimingInformation_SynchExchange's @c unit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_TimingInformation_SynchExchange_Unit_RawValue(RedvoxPacketM_TimingInformation_SynchExchange *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_TimingInformation_SynchExchange's @c unit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_TimingInformation_SynchExchange_Unit_RawValue(RedvoxPacketM_TimingInformation_SynchExchange *message, int32_t value);

#pragma mark - RedvoxPacketM_Sensors

typedef GPB_ENUM(RedvoxPacketM_Sensors_FieldNumber) {
  RedvoxPacketM_Sensors_FieldNumber_Accelerometer = 1,
  RedvoxPacketM_Sensors_FieldNumber_AmbientTemperature = 2,
  RedvoxPacketM_Sensors_FieldNumber_Audio = 3,
  RedvoxPacketM_Sensors_FieldNumber_CompressedAudio = 4,
  RedvoxPacketM_Sensors_FieldNumber_Gravity = 5,
  RedvoxPacketM_Sensors_FieldNumber_Gyroscope = 6,
  RedvoxPacketM_Sensors_FieldNumber_Image = 7,
  RedvoxPacketM_Sensors_FieldNumber_Light = 8,
  RedvoxPacketM_Sensors_FieldNumber_LinearAcceleration = 9,
  RedvoxPacketM_Sensors_FieldNumber_Location = 10,
  RedvoxPacketM_Sensors_FieldNumber_Magnetometer = 11,
  RedvoxPacketM_Sensors_FieldNumber_Orientation = 12,
  RedvoxPacketM_Sensors_FieldNumber_Pressure = 13,
  RedvoxPacketM_Sensors_FieldNumber_Proximity = 14,
  RedvoxPacketM_Sensors_FieldNumber_RelativeHumidity = 15,
  RedvoxPacketM_Sensors_FieldNumber_RotationVector = 16,
  RedvoxPacketM_Sensors_FieldNumber_Metadata = 17,
};

/**
 * Collection of available sensor types
 * See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/standard_sensor_units.md
 **/
@interface RedvoxPacketM_Sensors : GPBMessage

/** meters/second^2 */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Xyz *accelerometer;
/** Test to see if @c accelerometer has been set. */
@property(nonatomic, readwrite) BOOL hasAccelerometer;

/** degrees Celsius */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Single *ambientTemperature;
/** Test to see if @c ambientTemperature has been set. */
@property(nonatomic, readwrite) BOOL hasAmbientTemperature;

/** normalized counts */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Audio *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** bytes (codec specific) */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_CompressedAudio *compressedAudio;
/** Test to see if @c compressedAudio has been set. */
@property(nonatomic, readwrite) BOOL hasCompressedAudio;

/** meters/second^2 */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Xyz *gravity;
/** Test to see if @c gravity has been set. */
@property(nonatomic, readwrite) BOOL hasGravity;

/** radians/second */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Xyz *gyroscope;
/** Test to see if @c gyroscope has been set. */
@property(nonatomic, readwrite) BOOL hasGyroscope;

/** bytes (codec specific) */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Image *image;
/** Test to see if @c image has been set. */
@property(nonatomic, readwrite) BOOL hasImage;

/** lux */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Single *light;
/** Test to see if @c light has been set. */
@property(nonatomic, readwrite) BOOL hasLight;

/** meters/second^2 */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Xyz *linearAcceleration;
/** Test to see if @c linearAcceleration has been set. */
@property(nonatomic, readwrite) BOOL hasLinearAcceleration;

/** See standard */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Location *location;
/** Test to see if @c location has been set. */
@property(nonatomic, readwrite) BOOL hasLocation;

/** microtesla */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Xyz *magnetometer;
/** Test to see if @c magnetometer has been set. */
@property(nonatomic, readwrite) BOOL hasMagnetometer;

/** radians */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Xyz *orientation;
/** Test to see if @c orientation has been set. */
@property(nonatomic, readwrite) BOOL hasOrientation;

/** kilopascal */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Single *pressure;
/** Test to see if @c pressure has been set. */
@property(nonatomic, readwrite) BOOL hasPressure;

/** on, off, cm */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Single *proximity;
/** Test to see if @c proximity has been set. */
@property(nonatomic, readwrite) BOOL hasProximity;

/** percentage */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Single *relativeHumidity;
/** Test to see if @c relativeHumidity has been set. */
@property(nonatomic, readwrite) BOOL hasRelativeHumidity;

/** Unitless */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Xyz *rotationVector;
/** Test to see if @c rotationVector has been set. */
@property(nonatomic, readwrite) BOOL hasRotationVector;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_Sensors_Audio

typedef GPB_ENUM(RedvoxPacketM_Sensors_Audio_FieldNumber) {
  RedvoxPacketM_Sensors_Audio_FieldNumber_SensorDescription = 1,
  RedvoxPacketM_Sensors_Audio_FieldNumber_FirstSampleTimestamp = 2,
  RedvoxPacketM_Sensors_Audio_FieldNumber_SampleRate = 3,
  RedvoxPacketM_Sensors_Audio_FieldNumber_BitsOfPrecision = 4,
  RedvoxPacketM_Sensors_Audio_FieldNumber_IsScrambled = 5,
  RedvoxPacketM_Sensors_Audio_FieldNumber_Encoding = 6,
  RedvoxPacketM_Sensors_Audio_FieldNumber_Samples = 7,
  RedvoxPacketM_Sensors_Audio_FieldNumber_Metadata = 8,
};

/**
 * This message describes a stable audio channel
 * See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_audio_data.md
 **/
@interface RedvoxPacketM_Sensors_Audio : GPBMessage

/** The name or description of the audio sensor */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sensorDescription;

/** Timestamp of the first audio sample */
@property(nonatomic, readwrite) double firstSampleTimestamp;

/** Microphone sample rate in Hz */
@property(nonatomic, readwrite) float sampleRate;

/** Bits of precision for normalized audio samples */
@property(nonatomic, readwrite) float bitsOfPrecision;

/** If audio data has been scrambled to remove voice */
@property(nonatomic, readwrite) BOOL isScrambled;

/** The audio encoding used... TODO: Turn this into an enum! */
@property(nonatomic, readwrite, copy, null_resettable) NSString *encoding;

/** List of audio samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *samples;
/** Test to see if @c samples has been set. */
@property(nonatomic, readwrite) BOOL hasSamples;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_Sensors_CompressedAudio

typedef GPB_ENUM(RedvoxPacketM_Sensors_CompressedAudio_FieldNumber) {
  RedvoxPacketM_Sensors_CompressedAudio_FieldNumber_SensorDescription = 1,
  RedvoxPacketM_Sensors_CompressedAudio_FieldNumber_FirstSampleTimestamp = 2,
  RedvoxPacketM_Sensors_CompressedAudio_FieldNumber_SampleRate = 3,
  RedvoxPacketM_Sensors_CompressedAudio_FieldNumber_IsScrambled = 4,
  RedvoxPacketM_Sensors_CompressedAudio_FieldNumber_AudioBytes = 5,
  RedvoxPacketM_Sensors_CompressedAudio_FieldNumber_AudioCodec = 6,
  RedvoxPacketM_Sensors_CompressedAudio_FieldNumber_Metadata = 7,
};

@interface RedvoxPacketM_Sensors_CompressedAudio : GPBMessage

/** The name or description of the audio sensor */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sensorDescription;

/** Mach timestamp of the first audio sample */
@property(nonatomic, readwrite) double firstSampleTimestamp;

/** Microphone sample rate in Hz */
@property(nonatomic, readwrite) float sampleRate;

/** If audio data has been scrambled to remove voice */
@property(nonatomic, readwrite) BOOL isScrambled;

/** Bytes that make up audio payload */
@property(nonatomic, readwrite, copy, null_resettable) NSData *audioBytes;

/** Codec used to compress audio */
@property(nonatomic, readwrite) RedvoxPacketM_Sensors_CompressedAudio_AudioCodec audioCodec;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_CompressedAudio's @c audioCodec property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_CompressedAudio_AudioCodec_RawValue(RedvoxPacketM_Sensors_CompressedAudio *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_CompressedAudio's @c audioCodec property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_CompressedAudio_AudioCodec_RawValue(RedvoxPacketM_Sensors_CompressedAudio *message, int32_t value);

#pragma mark - RedvoxPacketM_Sensors_Single

typedef GPB_ENUM(RedvoxPacketM_Sensors_Single_FieldNumber) {
  RedvoxPacketM_Sensors_Single_FieldNumber_SensorDescription = 1,
  RedvoxPacketM_Sensors_Single_FieldNumber_Timestamps = 2,
  RedvoxPacketM_Sensors_Single_FieldNumber_Samples = 3,
  RedvoxPacketM_Sensors_Single_FieldNumber_Metadata = 4,
};

/**
 * A single channel of data
 * See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_single_channel_data.md
 **/
@interface RedvoxPacketM_Sensors_Single : GPBMessage

/** The name or description of the sensor */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sensorDescription;

/** List of timestamps per sample and associated stats */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingPayload *timestamps;
/** Test to see if @c timestamps has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamps;

/** List of samples and associated stats */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *samples;
/** Test to see if @c samples has been set. */
@property(nonatomic, readwrite) BOOL hasSamples;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_Sensors_Location

typedef GPB_ENUM(RedvoxPacketM_Sensors_Location_FieldNumber) {
  RedvoxPacketM_Sensors_Location_FieldNumber_SensorDescription = 1,
  RedvoxPacketM_Sensors_Location_FieldNumber_Timestamps = 2,
  RedvoxPacketM_Sensors_Location_FieldNumber_TimestampsGps = 3,
  RedvoxPacketM_Sensors_Location_FieldNumber_LatitudeSamples = 4,
  RedvoxPacketM_Sensors_Location_FieldNumber_LongitudeSamples = 5,
  RedvoxPacketM_Sensors_Location_FieldNumber_AltitudeSamples = 6,
  RedvoxPacketM_Sensors_Location_FieldNumber_SpeedSamples = 7,
  RedvoxPacketM_Sensors_Location_FieldNumber_BearingSamples = 8,
  RedvoxPacketM_Sensors_Location_FieldNumber_HorizontalAccuracySamples = 9,
  RedvoxPacketM_Sensors_Location_FieldNumber_VerticalAccuracySamples = 10,
  RedvoxPacketM_Sensors_Location_FieldNumber_SpeedAccuracySamples = 11,
  RedvoxPacketM_Sensors_Location_FieldNumber_BearingAccuracySamples = 12,
  RedvoxPacketM_Sensors_Location_FieldNumber_LastBestLocation = 13,
  RedvoxPacketM_Sensors_Location_FieldNumber_OverallBestLocation = 14,
  RedvoxPacketM_Sensors_Location_FieldNumber_LocationPermissionsGranted = 15,
  RedvoxPacketM_Sensors_Location_FieldNumber_LocationServicesRequested = 16,
  RedvoxPacketM_Sensors_Location_FieldNumber_LocationServicesEnabled = 17,
  RedvoxPacketM_Sensors_Location_FieldNumber_LocationProvidersArray = 18,
  RedvoxPacketM_Sensors_Location_FieldNumber_Metadata = 19,
};

/**
 * Location channels
 * See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_location_data.md
 **/
@interface RedvoxPacketM_Sensors_Location : GPBMessage

/** The name or description of the sensor */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sensorDescription;

/** Timestamps and stats */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingPayload *timestamps;
/** Test to see if @c timestamps has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamps;

@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingPayload *timestampsGps;
/** Test to see if @c timestampsGps has been set. */
@property(nonatomic, readwrite) BOOL hasTimestampsGps;

/** A list of latitude samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_DoubleSamplePayload *latitudeSamples;
/** Test to see if @c latitudeSamples has been set. */
@property(nonatomic, readwrite) BOOL hasLatitudeSamples;

/** A list of longitude samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_DoubleSamplePayload *longitudeSamples;
/** Test to see if @c longitudeSamples has been set. */
@property(nonatomic, readwrite) BOOL hasLongitudeSamples;

/** A list of altitude samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *altitudeSamples;
/** Test to see if @c altitudeSamples has been set. */
@property(nonatomic, readwrite) BOOL hasAltitudeSamples;

/** A list of speed samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *speedSamples;
/** Test to see if @c speedSamples has been set. */
@property(nonatomic, readwrite) BOOL hasSpeedSamples;

/** A list of bearing samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *bearingSamples;
/** Test to see if @c bearingSamples has been set. */
@property(nonatomic, readwrite) BOOL hasBearingSamples;

/** A list of horizontal accuracy samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *horizontalAccuracySamples;
/** Test to see if @c horizontalAccuracySamples has been set. */
@property(nonatomic, readwrite) BOOL hasHorizontalAccuracySamples;

/** A list of vertical accuracy samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *verticalAccuracySamples;
/** Test to see if @c verticalAccuracySamples has been set. */
@property(nonatomic, readwrite) BOOL hasVerticalAccuracySamples;

/** A list of speed accuracy samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *speedAccuracySamples;
/** Test to see if @c speedAccuracySamples has been set. */
@property(nonatomic, readwrite) BOOL hasSpeedAccuracySamples;

/** A list of bearing accuracy samples */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *bearingAccuracySamples;
/** Test to see if @c bearingAccuracySamples has been set. */
@property(nonatomic, readwrite) BOOL hasBearingAccuracySamples;

/** Most recent best location */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Location_BestLocation *lastBestLocation;
/** Test to see if @c lastBestLocation has been set. */
@property(nonatomic, readwrite) BOOL hasLastBestLocation;

/** Best last location */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Location_BestLocation *overallBestLocation;
/** Test to see if @c overallBestLocation has been set. */
@property(nonatomic, readwrite) BOOL hasOverallBestLocation;

/** Have location permissions been granted by the user? */
@property(nonatomic, readwrite) BOOL locationPermissionsGranted;

/** Has location services been requested by the user? */
@property(nonatomic, readwrite) BOOL locationServicesRequested;

/** Are location services enabled and working? */
@property(nonatomic, readwrite) BOOL locationServicesEnabled;

/** Location provider enumeration */
// |locationProvidersArray| contains |RedvoxPacketM_Sensors_Location_LocationProvider|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *locationProvidersArray;
/** The number of items in @c locationProvidersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger locationProvidersArray_Count;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_Sensors_Location_BestLocation

typedef GPB_ENUM(RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber) {
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_LatitudeLongitudeTimestamp = 1,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_AltitudeTimestamp = 2,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_SpeedTimestamp = 3,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_BearingTimestamp = 4,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_LatitudeLongitudeUnit = 5,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_AltitudeUnit = 6,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_SpeedUnit = 7,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_BearingUnit = 8,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_VerticalAccuracyUnit = 9,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_HorizontalAccuracyUnit = 10,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_SpeedAccuracyUnit = 11,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_BearingAccuracyUnit = 12,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Latitude = 13,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Longitude = 14,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Altitude = 15,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Speed = 16,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Bearing = 17,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_VerticalAccuracy = 18,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_HorizontalAccuracy = 19,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_SpeedAccuracy = 20,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_BearingAccuracy = 21,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Score = 22,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Method = 23,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_LocationProvider = 24,
  RedvoxPacketM_Sensors_Location_BestLocation_FieldNumber_Metadata = 25,
};

@interface RedvoxPacketM_Sensors_Location_BestLocation : GPBMessage

/** Timestamp of best lat/lng measurement */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp *latitudeLongitudeTimestamp;
/** Test to see if @c latitudeLongitudeTimestamp has been set. */
@property(nonatomic, readwrite) BOOL hasLatitudeLongitudeTimestamp;

/** Timestamp of best altitude measurement */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp *altitudeTimestamp;
/** Test to see if @c altitudeTimestamp has been set. */
@property(nonatomic, readwrite) BOOL hasAltitudeTimestamp;

/** Timestamp of best speed measurement */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp *speedTimestamp;
/** Test to see if @c speedTimestamp has been set. */
@property(nonatomic, readwrite) BOOL hasSpeedTimestamp;

/** Timestamp of best bearing estimate */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp *bearingTimestamp;
/** Test to see if @c bearingTimestamp has been set. */
@property(nonatomic, readwrite) BOOL hasBearingTimestamp;

/** Unit used for latitude/longitude (should be decimal degrees) */
@property(nonatomic, readwrite) RedvoxPacketM_Unit latitudeLongitudeUnit;

/** Unit used for altitude (should be meters) */
@property(nonatomic, readwrite) RedvoxPacketM_Unit altitudeUnit;

/** Unit used for speed (should be m/s) */
@property(nonatomic, readwrite) RedvoxPacketM_Unit speedUnit;

/** Unit used for bearing (should be radians) */
@property(nonatomic, readwrite) RedvoxPacketM_Unit bearingUnit;

/** Unit used for vertical accuracy */
@property(nonatomic, readwrite) RedvoxPacketM_Unit verticalAccuracyUnit;

/** Unit used for horizontal accuracy */
@property(nonatomic, readwrite) RedvoxPacketM_Unit horizontalAccuracyUnit;

/** Unit used for speed accuracy */
@property(nonatomic, readwrite) RedvoxPacketM_Unit speedAccuracyUnit;

/** Unit used for bearing accuracy */
@property(nonatomic, readwrite) RedvoxPacketM_Unit bearingAccuracyUnit;

/** The best latitude */
@property(nonatomic, readwrite) double latitude;

/** The best longitude */
@property(nonatomic, readwrite) double longitude;

/** The best altitude */
@property(nonatomic, readwrite) float altitude;

/** The best speed */
@property(nonatomic, readwrite) float speed;

/** The best bearing */
@property(nonatomic, readwrite) float bearing;

/** Vertical accuracy */
@property(nonatomic, readwrite) float verticalAccuracy;

/** Horizontal accuracy */
@property(nonatomic, readwrite) float horizontalAccuracy;

/** Speed accuracy */
@property(nonatomic, readwrite) float speedAccuracy;

/** Bearing accuracy */
@property(nonatomic, readwrite) float bearingAccuracy;

/** The best location score */
@property(nonatomic, readwrite) float score;

/** Method used to derive the location score */
@property(nonatomic, readwrite) RedvoxPacketM_Sensors_Location_BestLocation_LocationScoreMethod method;

@property(nonatomic, readwrite) RedvoxPacketM_Sensors_Location_LocationProvider locationProvider;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c latitudeLongitudeUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_LatitudeLongitudeUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c latitudeLongitudeUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_LatitudeLongitudeUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c altitudeUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_AltitudeUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c altitudeUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_AltitudeUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c speedUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_SpeedUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c speedUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_SpeedUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c bearingUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_BearingUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c bearingUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_BearingUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c verticalAccuracyUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_VerticalAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c verticalAccuracyUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_VerticalAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c horizontalAccuracyUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_HorizontalAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c horizontalAccuracyUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_HorizontalAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c speedAccuracyUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_SpeedAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c speedAccuracyUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_SpeedAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c bearingAccuracyUnit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_BearingAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c bearingAccuracyUnit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_BearingAccuracyUnit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c method property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_Method_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c method property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_Method_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation's @c locationProvider property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_LocationProvider_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation's @c locationProvider property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_LocationProvider_RawValue(RedvoxPacketM_Sensors_Location_BestLocation *message, int32_t value);

#pragma mark - RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp

typedef GPB_ENUM(RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp_FieldNumber) {
  RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp_FieldNumber_Unit = 1,
  RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp_FieldNumber_Mach = 2,
  RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp_FieldNumber_Gps = 3,
  RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp_FieldNumber_Metadata = 4,
};

/**
 * A message that encapsulates both a mach and GPS timestamp
 **/
@interface RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp : GPBMessage

/** Unit of timestamps (should be microseconds since unix epoch UTC) */
@property(nonatomic, readwrite) RedvoxPacketM_Unit unit;

/** Best mach timestamp */
@property(nonatomic, readwrite) double mach;

/** Best gps timestamp */
@property(nonatomic, readwrite) double gps;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp's @c unit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp_Unit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp's @c unit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp_Unit_RawValue(RedvoxPacketM_Sensors_Location_BestLocation_BestTimestamp *message, int32_t value);

#pragma mark - RedvoxPacketM_Sensors_Xyz

typedef GPB_ENUM(RedvoxPacketM_Sensors_Xyz_FieldNumber) {
  RedvoxPacketM_Sensors_Xyz_FieldNumber_SensorDescription = 1,
  RedvoxPacketM_Sensors_Xyz_FieldNumber_Timestamps = 2,
  RedvoxPacketM_Sensors_Xyz_FieldNumber_XSamples = 3,
  RedvoxPacketM_Sensors_Xyz_FieldNumber_YSamples = 4,
  RedvoxPacketM_Sensors_Xyz_FieldNumber_ZSamples = 5,
  RedvoxPacketM_Sensors_Xyz_FieldNumber_Metadata = 6,
};

/**
 * Message representing data channels with X, Y, and Z components
 * See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_xyz_channel_data.md
 **/
@interface RedvoxPacketM_Sensors_Xyz : GPBMessage

/** The name or description of the sensor */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sensorDescription;

/** List of timestamps per sample */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingPayload *timestamps;
/** Test to see if @c timestamps has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamps;

/** A list of samples for the X-channel */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *xSamples;
/** Test to see if @c xSamples has been set. */
@property(nonatomic, readwrite) BOOL hasXSamples;

/** A list of samples for the Y-channel */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *ySamples;
/** Test to see if @c ySamples has been set. */
@property(nonatomic, readwrite) BOOL hasYSamples;

/** A list of samples for the Z-channel */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SamplePayload *zSamples;
/** Test to see if @c zSamples has been set. */
@property(nonatomic, readwrite) BOOL hasZSamples;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_Sensors_Image

typedef GPB_ENUM(RedvoxPacketM_Sensors_Image_FieldNumber) {
  RedvoxPacketM_Sensors_Image_FieldNumber_SensorDescription = 1,
  RedvoxPacketM_Sensors_Image_FieldNumber_Timestamps = 2,
  RedvoxPacketM_Sensors_Image_FieldNumber_SamplesArray = 3,
  RedvoxPacketM_Sensors_Image_FieldNumber_ImageCodec = 4,
  RedvoxPacketM_Sensors_Image_FieldNumber_Metadata = 5,
};

/**
 * Image/video channel
 * See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_image_data.md
 **/
@interface RedvoxPacketM_Sensors_Image : GPBMessage

/** The name or description of the sensor */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sensorDescription;

/** Timestamps per sample */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingPayload *timestamps;
/** Test to see if @c timestamps has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamps;

/** A list of bytes each representing a single image */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSData*> *samplesArray;
/** The number of items in @c samplesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger samplesArray_Count;

/** The image codec being used */
@property(nonatomic, readwrite) RedvoxPacketM_Sensors_Image_ImageCodec imageCodec;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_Sensors_Image's @c imageCodec property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_Sensors_Image_ImageCodec_RawValue(RedvoxPacketM_Sensors_Image *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_Sensors_Image's @c imageCodec property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_Sensors_Image_ImageCodec_RawValue(RedvoxPacketM_Sensors_Image *message, int32_t value);

#pragma mark - RedvoxPacketM_EventStream

typedef GPB_ENUM(RedvoxPacketM_EventStream_FieldNumber) {
  RedvoxPacketM_EventStream_FieldNumber_Name = 1,
  RedvoxPacketM_EventStream_FieldNumber_Timestamps = 2,
  RedvoxPacketM_EventStream_FieldNumber_EventsArray = 3,
  RedvoxPacketM_EventStream_FieldNumber_Metadata = 4,
};

/**
 * Provides a mechanism for storing various generic derived events
 **/
@interface RedvoxPacketM_EventStream : GPBMessage

/** The name of this stream */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** List of timestamps, each associated with one Event */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_TimingPayload *timestamps;
/** Test to see if @c timestamps has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamps;

/** List of events that belong to this stream */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RedvoxPacketM_EventStream_Event*> *eventsArray;
/** The number of items in @c eventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventsArray_Count;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_EventStream_Event

typedef GPB_ENUM(RedvoxPacketM_EventStream_Event_FieldNumber) {
  RedvoxPacketM_EventStream_Event_FieldNumber_Description_p = 1,
  RedvoxPacketM_EventStream_Event_FieldNumber_StringPayload = 2,
  RedvoxPacketM_EventStream_Event_FieldNumber_NumericPayload = 3,
  RedvoxPacketM_EventStream_Event_FieldNumber_BooleanPayload = 4,
  RedvoxPacketM_EventStream_Event_FieldNumber_BytePayload = 5,
  RedvoxPacketM_EventStream_Event_FieldNumber_Metadata = 6,
};

@interface RedvoxPacketM_EventStream_Event : GPBMessage

/** Textual description of the event */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** Key-pairs of type string to string */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *stringPayload;
/** The number of items in @c stringPayload without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stringPayload_Count;

/** Key-pairs of type string to double */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringDoubleDictionary *numericPayload;
/** The number of items in @c numericPayload without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger numericPayload_Count;

/** Key-pairs of type string to boolean */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringBoolDictionary *booleanPayload;
/** The number of items in @c booleanPayload without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger booleanPayload_Count;

/**
 * Key-pairs of type string to bytes.
 * This one is mainly for transmitting binary or data that doesn't fit well into one of the other payloads.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSData*> *bytePayload;
/** The number of items in @c bytePayload without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger bytePayload_Count;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - RedvoxPacketM_SamplePayload

typedef GPB_ENUM(RedvoxPacketM_SamplePayload_FieldNumber) {
  RedvoxPacketM_SamplePayload_FieldNumber_Unit = 1,
  RedvoxPacketM_SamplePayload_FieldNumber_ValuesArray = 2,
  RedvoxPacketM_SamplePayload_FieldNumber_ValueStatistics = 3,
  RedvoxPacketM_SamplePayload_FieldNumber_Metadata = 4,
};

/**
 * Combines a unit, sample values, and value statistics
 * Used to store collections of samples, their unit, and the statistics for those samples.
 **/
@interface RedvoxPacketM_SamplePayload : GPBMessage

/** Unit of payload values */
@property(nonatomic, readwrite) RedvoxPacketM_Unit unit;

/** Values in payload */
@property(nonatomic, readwrite, strong, null_resettable) GPBFloatArray *valuesArray;
/** The number of items in @c valuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger valuesArray_Count;

/** Statistics of stored values */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SummaryStatistics *valueStatistics;
/** Test to see if @c valueStatistics has been set. */
@property(nonatomic, readwrite) BOOL hasValueStatistics;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_SamplePayload's @c unit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_SamplePayload_Unit_RawValue(RedvoxPacketM_SamplePayload *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_SamplePayload's @c unit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_SamplePayload_Unit_RawValue(RedvoxPacketM_SamplePayload *message, int32_t value);

#pragma mark - RedvoxPacketM_DoubleSamplePayload

typedef GPB_ENUM(RedvoxPacketM_DoubleSamplePayload_FieldNumber) {
  RedvoxPacketM_DoubleSamplePayload_FieldNumber_Unit = 1,
  RedvoxPacketM_DoubleSamplePayload_FieldNumber_ValuesArray = 2,
  RedvoxPacketM_DoubleSamplePayload_FieldNumber_ValueStatistics = 3,
  RedvoxPacketM_DoubleSamplePayload_FieldNumber_Metadata = 4,
};

/**
 * Exactly like a SamplePayload, but payload values are 64-bit floats rather than 32-bit floats.
 **/
@interface RedvoxPacketM_DoubleSamplePayload : GPBMessage

/** Unit of payload values */
@property(nonatomic, readwrite) RedvoxPacketM_Unit unit;

/** Values in payload */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *valuesArray;
/** The number of items in @c valuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger valuesArray_Count;

/** Statistics of stored values */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SummaryStatistics *valueStatistics;
/** Test to see if @c valueStatistics has been set. */
@property(nonatomic, readwrite) BOOL hasValueStatistics;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_DoubleSamplePayload's @c unit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_DoubleSamplePayload_Unit_RawValue(RedvoxPacketM_DoubleSamplePayload *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_DoubleSamplePayload's @c unit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_DoubleSamplePayload_Unit_RawValue(RedvoxPacketM_DoubleSamplePayload *message, int32_t value);

#pragma mark - RedvoxPacketM_TimingPayload

typedef GPB_ENUM(RedvoxPacketM_TimingPayload_FieldNumber) {
  RedvoxPacketM_TimingPayload_FieldNumber_Unit = 1,
  RedvoxPacketM_TimingPayload_FieldNumber_TimestampsArray = 2,
  RedvoxPacketM_TimingPayload_FieldNumber_TimestampStatistics = 3,
  RedvoxPacketM_TimingPayload_FieldNumber_MeanSampleRate = 4,
  RedvoxPacketM_TimingPayload_FieldNumber_StdevSampleRate = 5,
  RedvoxPacketM_TimingPayload_FieldNumber_Metadata = 6,
};

/**
 * Combines a unit, sample values, and value statistics
 * Used to store collections of samples, their unit, and the statistics for those samples.
 **/
@interface RedvoxPacketM_TimingPayload : GPBMessage

/** Unit of payload values */
@property(nonatomic, readwrite) RedvoxPacketM_Unit unit;

/** Values in payload */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *timestampsArray;
/** The number of items in @c timestampsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger timestampsArray_Count;

/** Statistics of stored values */
@property(nonatomic, readwrite, strong, null_resettable) RedvoxPacketM_SummaryStatistics *timestampStatistics;
/** Test to see if @c timestampStatistics has been set. */
@property(nonatomic, readwrite) BOOL hasTimestampStatistics;

/** Mean sample rate in Hz */
@property(nonatomic, readwrite) float meanSampleRate;

/** Standard deviation of sample rate in Hz */
@property(nonatomic, readwrite) float stdevSampleRate;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

/**
 * Fetches the raw value of a @c RedvoxPacketM_TimingPayload's @c unit property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RedvoxPacketM_TimingPayload_Unit_RawValue(RedvoxPacketM_TimingPayload *message);
/**
 * Sets the raw value of an @c RedvoxPacketM_TimingPayload's @c unit property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRedvoxPacketM_TimingPayload_Unit_RawValue(RedvoxPacketM_TimingPayload *message, int32_t value);

#pragma mark - RedvoxPacketM_SummaryStatistics

typedef GPB_ENUM(RedvoxPacketM_SummaryStatistics_FieldNumber) {
  RedvoxPacketM_SummaryStatistics_FieldNumber_Count = 1,
  RedvoxPacketM_SummaryStatistics_FieldNumber_Mean = 2,
  RedvoxPacketM_SummaryStatistics_FieldNumber_StandardDeviation = 3,
  RedvoxPacketM_SummaryStatistics_FieldNumber_Min = 4,
  RedvoxPacketM_SummaryStatistics_FieldNumber_Max = 5,
  RedvoxPacketM_SummaryStatistics_FieldNumber_Range = 6,
  RedvoxPacketM_SummaryStatistics_FieldNumber_Metadata = 7,
};

/**
 * Common statistics stored with payloads
 **/
@interface RedvoxPacketM_SummaryStatistics : GPBMessage

/** The total count of values included in the statistics */
@property(nonatomic, readwrite) double count;

/** The mean of the values */
@property(nonatomic, readwrite) double mean;

/** The standard deviation of the values */
@property(nonatomic, readwrite) double standardDeviation;

/** The minimum value */
@property(nonatomic, readwrite) double min;

/** The maximum value */
@property(nonatomic, readwrite) double max;

/** The range of the values */
@property(nonatomic, readwrite) double range;

/** A map from string to string for including untyped metadata */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - EncryptedRedvoxPacketM

typedef GPB_ENUM(EncryptedRedvoxPacketM_FieldNumber) {
  EncryptedRedvoxPacketM_FieldNumber_Header = 1,
  EncryptedRedvoxPacketM_FieldNumber_Packet = 2,
};

/**
 * Message type for providing E2E encryption.
 * The header is encrypted via RedVox keys.
 * The body is encrypted via user keys.
 * Each payload consists of bytes from the following transformations
 *   Serialization: Object -> serialize to bytes -> LZ4 frame compress -> encrypt -> payload bytes
 *   Deserialization: Payload bytes -> decrypt -> LZ4 frame decompress -> deserialize from bytes -> object
 **/
@interface EncryptedRedvoxPacketM : GPBMessage

/** redvox encrypt(compress(EncryptedRedvoxPacket1000.Header)) */
@property(nonatomic, readwrite, copy, null_resettable) NSData *header;

/** user encrypt(compress(RedvoxPacketApi1000)) */
@property(nonatomic, readwrite, copy, null_resettable) NSData *packet;

@end

#pragma mark - EncryptedRedvoxPacketM_Header

typedef GPB_ENUM(EncryptedRedvoxPacketM_Header_FieldNumber) {
  EncryptedRedvoxPacketM_Header_FieldNumber_StationId = 1,
  EncryptedRedvoxPacketM_Header_FieldNumber_StationUuid = 2,
  EncryptedRedvoxPacketM_Header_FieldNumber_AuthToken = 3,
  EncryptedRedvoxPacketM_Header_FieldNumber_FirebaseToken = 4,
  EncryptedRedvoxPacketM_Header_FieldNumber_AuthEmail = 5,
};

@interface EncryptedRedvoxPacketM_Header : GPBMessage

/** The station id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationId;

/** The station uuid */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationUuid;

/** The station's authorization token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *authToken;

/** The station's firebase token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *firebaseToken;

/** The station's auth email */
@property(nonatomic, readwrite, copy, null_resettable) NSString *authEmail;

@end

#pragma mark - AcquisitionRequest

typedef GPB_ENUM(AcquisitionRequest_FieldNumber) {
  AcquisitionRequest_FieldNumber_AuthToken = 1,
  AcquisitionRequest_FieldNumber_FirebaseToken = 2,
  AcquisitionRequest_FieldNumber_Checksum = 3,
  AcquisitionRequest_FieldNumber_IsEncrypted = 4,
  AcquisitionRequest_FieldNumber_Payload = 5,
  AcquisitionRequest_FieldNumber_SeqId = 6,
};

/**
 * --------- Message types for communicating with RedVox data acquisition servers
 * Message for sending RedVox data to a redvox.io data acquisition service.
 **/
@interface AcquisitionRequest : GPBMessage

/** The server provided authentication token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *authToken;

/** The API provided firebase token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *firebaseToken;

/** A checksum of the payload bytes */
@property(nonatomic, readwrite) int64_t checksum;

/** If set, then the payload contains */
@property(nonatomic, readwrite) BOOL isEncrypted;

/** The compressed packet to send */
@property(nonatomic, readwrite, copy, null_resettable) NSData *payload;

/** A variable that starts at 0 when the data stream starts and increments by one for each transmission */
@property(nonatomic, readwrite) int64_t seqId;

@end

#pragma mark - AcquisitionResponse

typedef GPB_ENUM(AcquisitionResponse_FieldNumber) {
  AcquisitionResponse_FieldNumber_ResponseType = 1,
  AcquisitionResponse_FieldNumber_Checksum = 2,
  AcquisitionResponse_FieldNumber_Details = 3,
  AcquisitionResponse_FieldNumber_Resend = 4,
  AcquisitionResponse_FieldNumber_SeqId = 5,
};

/**
 * Response from data acquisition services.
 **/
@interface AcquisitionResponse : GPBMessage

/** Response type (as above) */
@property(nonatomic, readwrite) AcquisitionResponse_ResponseType responseType;

/** Checksum computed by server */
@property(nonatomic, readwrite) int64_t checksum;

/** Any other error details */
@property(nonatomic, readwrite, copy, null_resettable) NSString *details;

/**
 * If set, client to should attempt to resend the file
 * otherwise, don't resend the file.
 **/
@property(nonatomic, readwrite) BOOL resend;

/** A copy of the seq_id provided in the AcquisitionRequest */
@property(nonatomic, readwrite) int64_t seqId;

@end

/**
 * Fetches the raw value of a @c AcquisitionResponse's @c responseType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t AcquisitionResponse_ResponseType_RawValue(AcquisitionResponse *message);
/**
 * Sets the raw value of an @c AcquisitionResponse's @c responseType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetAcquisitionResponse_ResponseType_RawValue(AcquisitionResponse *message, int32_t value);

#pragma mark - SynchRequest

typedef GPB_ENUM(SynchRequest_FieldNumber) {
  SynchRequest_FieldNumber_StationId = 1,
  SynchRequest_FieldNumber_StationUuid = 2,
  SynchRequest_FieldNumber_SeqId = 3,
  SynchRequest_FieldNumber_SubSeqId = 4,
};

/**
 * --------- Message types for communicating with RedVox v3 time synchronization service
 **/
@interface SynchRequest : GPBMessage

/** Id of the station */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationId;

/** Uuid of the station */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationUuid;

/** The overall number of synch requests made. Starts at 0 on recording start. */
@property(nonatomic, readwrite) uint32_t seqId;

/** The seq id within a single exchange */
@property(nonatomic, readwrite) uint32_t subSeqId;

@end

#pragma mark - SynchResponse

typedef GPB_ENUM(SynchResponse_FieldNumber) {
  SynchResponse_FieldNumber_StationId = 1,
  SynchResponse_FieldNumber_StationUuid = 2,
  SynchResponse_FieldNumber_SeqId = 3,
  SynchResponse_FieldNumber_SubSeqId = 4,
  SynchResponse_FieldNumber_RecvTsUs = 5,
  SynchResponse_FieldNumber_SendTsUs = 6,
};

@interface SynchResponse : GPBMessage

/** Should match same field from request */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationId;

/** Should match same field from request */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stationUuid;

/** Should match same field from request */
@property(nonatomic, readwrite) uint32_t seqId;

/** Should be req field + 1 */
@property(nonatomic, readwrite) uint32_t subSeqId;

/** Time synch server received request */
@property(nonatomic, readwrite) uint64_t recvTsUs;

/** Time synch server sent response */
@property(nonatomic, readwrite) uint64_t sendTsUs;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
