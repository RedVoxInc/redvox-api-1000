// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/redvox_api1000/redvox_api_1000.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "src/redvox_api1000/RedvoxApi1000.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RedvoxApi1000Root

@implementation RedvoxApi1000Root

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - RedvoxApi1000Root_FileDescriptor

static GPBFileDescriptor *RedvoxApi1000Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"redvox_api1000"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RedvoxPacket1000

@implementation RedvoxPacket1000

@dynamic api;
@dynamic hasUserInformation, userInformation;
@dynamic hasDeviceInformation, deviceInformation;
@dynamic hasPacketInformation, packetInformation;
@dynamic hasTimingInformation, timingInformation;
@dynamic hasSensorChannels, sensorChannels;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_UserInformation *userInformation;
  RedvoxPacket1000_DeviceInformation *deviceInformation;
  RedvoxPacket1000_PacketInformation *packetInformation;
  RedvoxPacket1000_TimingInformation *timingInformation;
  RedvoxPacket1000_SensorChannels *sensorChannels;
  NSMutableDictionary *metadata;
  double api;
} RedvoxPacket1000__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "api",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_FieldNumber_Api,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, api),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "userInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_UserInformation),
        .number = RedvoxPacket1000_FieldNumber_UserInformation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, userInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_DeviceInformation),
        .number = RedvoxPacket1000_FieldNumber_DeviceInformation,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, deviceInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "packetInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_PacketInformation),
        .number = RedvoxPacket1000_FieldNumber_PacketInformation,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, packetInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timingInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_TimingInformation),
        .number = RedvoxPacket1000_FieldNumber_TimingInformation,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, timingInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sensorChannels",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels),
        .number = RedvoxPacket1000_FieldNumber_SensorChannels,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, sensorChannels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000 class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_UserInformation

@implementation RedvoxPacket1000_UserInformation

@dynamic authEmail;
@dynamic authToken;
@dynamic firebaseToken;

typedef struct RedvoxPacket1000_UserInformation__storage_ {
  uint32_t _has_storage_[1];
  NSString *authEmail;
  NSString *authToken;
  NSString *firebaseToken;
} RedvoxPacket1000_UserInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authEmail",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_UserInformation_FieldNumber_AuthEmail,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_UserInformation__storage_, authEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authToken",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_UserInformation_FieldNumber_AuthToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_UserInformation__storage_, authToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firebaseToken",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_UserInformation_FieldNumber_FirebaseToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_UserInformation__storage_, firebaseToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_UserInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_UserInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_DeviceInformation

@implementation RedvoxPacket1000_DeviceInformation

@dynamic deviceId;
@dynamic deviceUuid;
@dynamic deviceMake;
@dynamic deviceModel;
@dynamic deviceOs;
@dynamic deviceOsVersion;
@dynamic deviceAppVersion;
@dynamic deviceTempC;
@dynamic deviceBatteryPercent;
@dynamic networkType;
@dynamic networkStrengthDb;

typedef struct RedvoxPacket1000_DeviceInformation__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_DeviceInformation_OsType deviceOs;
  RedvoxPacket1000_DeviceInformation_NetworkType networkType;
  NSString *deviceId;
  NSString *deviceUuid;
  NSString *deviceMake;
  NSString *deviceModel;
  NSString *deviceOsVersion;
  NSString *deviceAppVersion;
  double deviceTempC;
  double deviceBatteryPercent;
  double networkStrengthDb;
} RedvoxPacket1000_DeviceInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceUuid",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceMake",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceMake,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceMake),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceModel",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceModel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceModel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceOs",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_DeviceInformation_OsType_EnumDescriptor,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceOs,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceOs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceOsVersion",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceOsVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceOsVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceAppVersion",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceAppVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceAppVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceTempC",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceTempC,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceTempC),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "deviceBatteryPercent",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceBatteryPercent,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, deviceBatteryPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "networkType",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_DeviceInformation_NetworkType_EnumDescriptor,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_NetworkType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, networkType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "networkStrengthDb",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_DeviceInformation_FieldNumber_NetworkStrengthDb,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_DeviceInformation__storage_, networkStrengthDb),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_DeviceInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_DeviceInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_DeviceInformation_DeviceOs_RawValue(RedvoxPacket1000_DeviceInformation *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_DeviceInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceOs];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_DeviceInformation_DeviceOs_RawValue(RedvoxPacket1000_DeviceInformation *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_DeviceInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_DeviceInformation_FieldNumber_DeviceOs];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t RedvoxPacket1000_DeviceInformation_NetworkType_RawValue(RedvoxPacket1000_DeviceInformation *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_DeviceInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_DeviceInformation_FieldNumber_NetworkType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_DeviceInformation_NetworkType_RawValue(RedvoxPacket1000_DeviceInformation *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_DeviceInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_DeviceInformation_FieldNumber_NetworkType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RedvoxPacket1000_DeviceInformation_NetworkType

GPBEnumDescriptor *RedvoxPacket1000_DeviceInformation_NetworkType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Wifi\000Cellular\000None\000";
    static const int32_t values[] = {
        RedvoxPacket1000_DeviceInformation_NetworkType_Wifi,
        RedvoxPacket1000_DeviceInformation_NetworkType_Cellular,
        RedvoxPacket1000_DeviceInformation_NetworkType_None,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_DeviceInformation_NetworkType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_DeviceInformation_NetworkType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_DeviceInformation_NetworkType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_DeviceInformation_NetworkType_Wifi:
    case RedvoxPacket1000_DeviceInformation_NetworkType_Cellular:
    case RedvoxPacket1000_DeviceInformation_NetworkType_None:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RedvoxPacket1000_DeviceInformation_OsType

GPBEnumDescriptor *RedvoxPacket1000_DeviceInformation_OsType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Android\000Ios\000Linux\000Windows\000";
    static const int32_t values[] = {
        RedvoxPacket1000_DeviceInformation_OsType_Android,
        RedvoxPacket1000_DeviceInformation_OsType_Ios,
        RedvoxPacket1000_DeviceInformation_OsType_Linux,
        RedvoxPacket1000_DeviceInformation_OsType_Windows,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_DeviceInformation_OsType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_DeviceInformation_OsType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_DeviceInformation_OsType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_DeviceInformation_OsType_Android:
    case RedvoxPacket1000_DeviceInformation_OsType_Ios:
    case RedvoxPacket1000_DeviceInformation_OsType_Linux:
    case RedvoxPacket1000_DeviceInformation_OsType_Windows:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RedvoxPacket1000_PacketInformation

@implementation RedvoxPacket1000_PacketInformation

@dynamic isBackfilled;
@dynamic isPrivate;
@dynamic isMicScrambled;

typedef struct RedvoxPacket1000_PacketInformation__storage_ {
  uint32_t _has_storage_[1];
} RedvoxPacket1000_PacketInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isBackfilled",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_PacketInformation_FieldNumber_IsBackfilled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPrivate",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_PacketInformation_FieldNumber_IsPrivate,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isMicScrambled",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_PacketInformation_FieldNumber_IsMicScrambled,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_PacketInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_PacketInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_TimingInformation

@implementation RedvoxPacket1000_TimingInformation

@dynamic packetStartTsUsWall;
@dynamic packetStartTsUsMach;
@dynamic packetEndTsUsWall;
@dynamic packetEndTsUsMach;
@dynamic serverAcquisitionArrivalTsUs;
@dynamic appStartTsUsMach;
@dynamic synchParamsArray, synchParamsArray_Count;
@dynamic bestLatencyUs;
@dynamic bestOffsetUs;

typedef struct RedvoxPacket1000_TimingInformation__storage_ {
  uint32_t _has_storage_[1];
  GPBDoubleArray *synchParamsArray;
  double packetStartTsUsWall;
  double packetStartTsUsMach;
  double packetEndTsUsWall;
  double packetEndTsUsMach;
  double serverAcquisitionArrivalTsUs;
  double appStartTsUsMach;
  double bestLatencyUs;
  double bestOffsetUs;
} RedvoxPacket1000_TimingInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packetStartTsUsWall",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketStartTsUsWall,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetStartTsUsWall),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "packetStartTsUsMach",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketStartTsUsMach,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetStartTsUsMach),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "packetEndTsUsWall",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketEndTsUsWall,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetEndTsUsWall),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "packetEndTsUsMach",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketEndTsUsMach,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetEndTsUsMach),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "serverAcquisitionArrivalTsUs",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_ServerAcquisitionArrivalTsUs,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, serverAcquisitionArrivalTsUs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "appStartTsUsMach",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_AppStartTsUsMach,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, appStartTsUsMach),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "synchParamsArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_SynchParamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, synchParamsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bestLatencyUs",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_BestLatencyUs,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, bestLatencyUs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bestOffsetUs",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_BestOffsetUs,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, bestOffsetUs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_TimingInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_TimingInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels

@implementation RedvoxPacket1000_SensorChannels

@dynamic hasMicrophoneChannel, microphoneChannel;
@dynamic hasBarometerChannel, barometerChannel;
@dynamic hasLocationChannel, locationChannel;
@dynamic hasAccelerometerChannel, accelerometerChannel;
@dynamic hasGyroscopeChannel, gyroscopeChannel;
@dynamic hasMagnetometerChannel, magnetometerChannel;
@dynamic hasLightChannel, lightChannel;
@dynamic hasInfraredChannel, infraredChannel;
@dynamic hasImageChannel, imageChannel;

typedef struct RedvoxPacket1000_SensorChannels__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_SensorChannels_MicrophoneChannel *microphoneChannel;
  RedvoxPacket1000_SensorChannels_SingleChannel *barometerChannel;
  RedvoxPacket1000_SensorChannels_LocationChannel *locationChannel;
  RedvoxPacket1000_SensorChannels_XyzChannel *accelerometerChannel;
  RedvoxPacket1000_SensorChannels_XyzChannel *gyroscopeChannel;
  RedvoxPacket1000_SensorChannels_XyzChannel *magnetometerChannel;
  RedvoxPacket1000_SensorChannels_SingleChannel *lightChannel;
  RedvoxPacket1000_SensorChannels_SingleChannel *infraredChannel;
  RedvoxPacket1000_SensorChannels_ImageChannel *imageChannel;
} RedvoxPacket1000_SensorChannels__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "microphoneChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_MicrophoneChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_MicrophoneChannel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, microphoneChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "barometerChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SingleChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_BarometerChannel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, barometerChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_LocationChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_LocationChannel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, locationChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accelerometerChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_XyzChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_AccelerometerChannel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, accelerometerChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gyroscopeChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_XyzChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_GyroscopeChannel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, gyroscopeChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "magnetometerChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_XyzChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_MagnetometerChannel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, magnetometerChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lightChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SingleChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_LightChannel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, lightChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "infraredChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SingleChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_InfraredChannel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, infraredChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_ImageChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_ImageChannel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, imageChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_MicrophoneChannel

@implementation RedvoxPacket1000_SensorChannels_MicrophoneChannel

@dynamic sensorDescription;
@dynamic firstSampleTsUs;
@dynamic sampleRateHz;
@dynamic samplesArray, samplesArray_Count;
@dynamic hasSampleStatistics, sampleStatistics;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  GPBDoubleArray *samplesArray;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *sampleStatistics;
  NSMutableDictionary *metadata;
  double firstSampleTsUs;
  double sampleRateHz;
} RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_MicrophoneChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstSampleTsUs",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_MicrophoneChannel_FieldNumber_FirstSampleTsUs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_, firstSampleTsUs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleRateHz",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_MicrophoneChannel_FieldNumber_SampleRateHz,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_, sampleRateHz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "samplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_MicrophoneChannel_FieldNumber_SamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_, samplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_MicrophoneChannel_FieldNumber_SampleStatistics,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_, sampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_MicrophoneChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_MicrophoneChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_MicrophoneChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_SingleChannel

@implementation RedvoxPacket1000_SensorChannels_SingleChannel

@dynamic sensorDescription;
@dynamic meanSampleRateHz;
@dynamic sampleTsUsArray, sampleTsUsArray_Count;
@dynamic samplesArray, samplesArray_Count;
@dynamic hasSampleRateStatistics, sampleRateStatistics;
@dynamic hasSampleStatistics, sampleStatistics;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_SingleChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  GPBDoubleArray *sampleTsUsArray;
  GPBDoubleArray *samplesArray;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *sampleRateStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *sampleStatistics;
  NSMutableDictionary *metadata;
  double meanSampleRateHz;
} RedvoxPacket1000_SensorChannels_SingleChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "meanSampleRateHz",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_MeanSampleRateHz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, meanSampleRateHz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleTsUsArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_SampleTsUsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, sampleTsUsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "samplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_SamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, samplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleRateStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_SampleRateStatistics,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, sampleRateStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_SampleStatistics,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, sampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_SingleChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_LocationChannel

@implementation RedvoxPacket1000_SensorChannels_LocationChannel

@dynamic sensorDescription;
@dynamic meanSampleRateHz;
@dynamic sampleTsUsArray, sampleTsUsArray_Count;
@dynamic latitudeSamplesArray, latitudeSamplesArray_Count;
@dynamic longitudeSamplesArray, longitudeSamplesArray_Count;
@dynamic altitudeSamplesArray, altitudeSamplesArray_Count;
@dynamic speedSamplesArray, speedSamplesArray_Count;
@dynamic accuracySamplesArray, accuracySamplesArray_Count;
@dynamic locationPermissionsGranted;
@dynamic locationServicesRequested;
@dynamic locationServicesEnabled;
@dynamic locationProvider;
@dynamic hasSampleRateStatistics, sampleRateStatistics;
@dynamic hasLatitudeSampleStatistics, latitudeSampleStatistics;
@dynamic hasLongitudeSampleStatistics, longitudeSampleStatistics;
@dynamic hasAltitudeSampleStatistics, altitudeSampleStatistics;
@dynamic hasSpeedSampleStatistics, speedSampleStatistics;
@dynamic hasAccuracySampleStatistics, accuracySampleStatistics;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_LocationChannel__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider locationProvider;
  NSString *sensorDescription;
  GPBDoubleArray *sampleTsUsArray;
  GPBDoubleArray *latitudeSamplesArray;
  GPBDoubleArray *longitudeSamplesArray;
  GPBDoubleArray *altitudeSamplesArray;
  GPBDoubleArray *speedSamplesArray;
  GPBDoubleArray *accuracySamplesArray;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *sampleRateStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *latitudeSampleStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *longitudeSampleStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *altitudeSampleStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *speedSampleStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *accuracySampleStatistics;
  NSMutableDictionary *metadata;
  double meanSampleRateHz;
} RedvoxPacket1000_SensorChannels_LocationChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "meanSampleRateHz",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_MeanSampleRateHz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, meanSampleRateHz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleTsUsArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SampleTsUsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, sampleTsUsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitudeSamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LatitudeSamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, latitudeSamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitudeSamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LongitudeSamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, longitudeSamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "altitudeSamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_AltitudeSamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, altitudeSamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "speedSamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SpeedSamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, speedSamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "accuracySamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_AccuracySamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, accuracySamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "locationPermissionsGranted",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationPermissionsGranted,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locationServicesRequested",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationServicesRequested,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locationServicesEnabled",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationServicesEnabled,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locationProvider",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_EnumDescriptor,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationProvider,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, locationProvider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sampleRateStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SampleRateStatistics,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, sampleRateStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latitudeSampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LatitudeSampleStatistics,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, latitudeSampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitudeSampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LongitudeSampleStatistics,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, longitudeSampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "altitudeSampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_AltitudeSampleStatistics,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, altitudeSampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "speedSampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SpeedSampleStatistics,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, speedSampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accuracySampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_AccuracySampleStatistics,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, accuracySampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_LocationChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_RawValue(RedvoxPacket1000_SensorChannels_LocationChannel *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_SensorChannels_LocationChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationProvider];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_RawValue(RedvoxPacket1000_SensorChannels_LocationChannel *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_SensorChannels_LocationChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationProvider];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider

GPBEnumDescriptor *RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000User\000Gps\000Network\000";
    static const int32_t values[] = {
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_None,
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_User,
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Gps,
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Network,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_None:
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_User:
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Gps:
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Network:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RedvoxPacket1000_SensorChannels_XyzChannel

@implementation RedvoxPacket1000_SensorChannels_XyzChannel

@dynamic sensorDescription;
@dynamic meanSampleRateHz;
@dynamic sampleTsUsArray, sampleTsUsArray_Count;
@dynamic xSamplesArray, xSamplesArray_Count;
@dynamic ySamplesArray, ySamplesArray_Count;
@dynamic zSamplesArray, zSamplesArray_Count;
@dynamic hasSampleRateStatistics, sampleRateStatistics;
@dynamic hasXSampleStatistics, xSampleStatistics;
@dynamic hasYSampleStatistics, ySampleStatistics;
@dynamic hasZSampleStatistics, zSampleStatistics;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_XyzChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  GPBDoubleArray *sampleTsUsArray;
  GPBDoubleArray *xSamplesArray;
  GPBDoubleArray *ySamplesArray;
  GPBDoubleArray *zSamplesArray;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *sampleRateStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *xSampleStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *ySampleStatistics;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *zSampleStatistics;
  NSMutableDictionary *metadata;
  double meanSampleRateHz;
} RedvoxPacket1000_SensorChannels_XyzChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "meanSampleRateHz",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_MeanSampleRateHz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, meanSampleRateHz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleTsUsArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_SampleTsUsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, sampleTsUsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "xSamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_XSamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, xSamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "ySamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_YSamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, ySamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "zSamplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_ZSamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, zSamplesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleRateStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_SampleRateStatistics,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, sampleRateStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "xSampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_XSampleStatistics,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, xSampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ySampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_YSampleStatistics,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, ySampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "zSampleStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_ZSampleStatistics,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, zSampleStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_XyzChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_ImageChannel

@implementation RedvoxPacket1000_SensorChannels_ImageChannel

@dynamic sensorDescription;
@dynamic meanSampleRateHz;
@dynamic sampleTsUsArray, sampleTsUsArray_Count;
@dynamic samplesArray, samplesArray_Count;
@dynamic hasSampleRateStatistics, sampleRateStatistics;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_ImageChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  GPBDoubleArray *sampleTsUsArray;
  NSMutableArray *samplesArray;
  RedvoxPacket1000_SensorChannels_SummaryStatistics *sampleRateStatistics;
  NSMutableDictionary *metadata;
  double meanSampleRateHz;
} RedvoxPacket1000_SensorChannels_ImageChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "meanSampleRateHz",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_MeanSampleRateHz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, meanSampleRateHz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleTsUsArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SampleTsUsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, sampleTsUsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "samplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, samplesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sampleRateStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SampleRateStatistics,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, sampleRateStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_ImageChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_SummaryStatistics

@implementation RedvoxPacket1000_SensorChannels_SummaryStatistics

@dynamic count;
@dynamic mean;
@dynamic median;
@dynamic mode;
@dynamic variance;
@dynamic min;
@dynamic max;
@dynamic range;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *metadata;
  double count;
  double mean;
  double median;
  double mode;
  double variance;
  double min;
  double max;
  double range;
} RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "mean",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Mean,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, mean),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "median",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Median,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, median),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "mode",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Mode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, mode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "variance",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Variance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, variance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "min",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Min,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Max,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "range",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Range,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, range),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SummaryStatistics_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_SummaryStatistics class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_SummaryStatistics__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcquisitionRequest

@implementation AcquisitionRequest

@dynamic compressedRedvoxPacket1000;
@dynamic checksum;

typedef struct AcquisitionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *compressedRedvoxPacket1000;
  int64_t checksum;
} AcquisitionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "compressedRedvoxPacket1000",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionRequest_FieldNumber_CompressedRedvoxPacket1000,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcquisitionRequest__storage_, compressedRedvoxPacket1000),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionRequest_FieldNumber_Checksum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcquisitionRequest__storage_, checksum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcquisitionRequest class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcquisitionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\246\246\204\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcquisitionResponse

@implementation AcquisitionResponse

@dynamic responseType;
@dynamic checksum;
@dynamic details;
@dynamic resend;

typedef struct AcquisitionResponse__storage_ {
  uint32_t _has_storage_[1];
  AcquisitionResponse_ResponseType responseType;
  NSString *details;
  int64_t checksum;
} AcquisitionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "responseType",
        .dataTypeSpecific.enumDescFunc = AcquisitionResponse_ResponseType_EnumDescriptor,
        .number = AcquisitionResponse_FieldNumber_ResponseType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcquisitionResponse__storage_, responseType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionResponse_FieldNumber_Checksum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcquisitionResponse__storage_, checksum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "details",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionResponse_FieldNumber_Details,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AcquisitionResponse__storage_, details),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resend",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionResponse_FieldNumber_Resend,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcquisitionResponse class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcquisitionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AcquisitionResponse_ResponseType_RawValue(AcquisitionResponse *message) {
  GPBDescriptor *descriptor = [AcquisitionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AcquisitionResponse_FieldNumber_ResponseType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAcquisitionResponse_ResponseType_RawValue(AcquisitionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AcquisitionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AcquisitionResponse_FieldNumber_ResponseType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum AcquisitionResponse_ResponseType

GPBEnumDescriptor *AcquisitionResponse_ResponseType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000AuthError\000DataError\000OtherError\000";
    static const int32_t values[] = {
        AcquisitionResponse_ResponseType_Ok,
        AcquisitionResponse_ResponseType_AuthError,
        AcquisitionResponse_ResponseType_DataError,
        AcquisitionResponse_ResponseType_OtherError,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AcquisitionResponse_ResponseType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AcquisitionResponse_ResponseType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AcquisitionResponse_ResponseType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AcquisitionResponse_ResponseType_Ok:
    case AcquisitionResponse_ResponseType_AuthError:
    case AcquisitionResponse_ResponseType_DataError:
    case AcquisitionResponse_ResponseType_OtherError:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
