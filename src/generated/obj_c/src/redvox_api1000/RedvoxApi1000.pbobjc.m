// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/redvox_api1000/redvox_api_1000.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "src/redvox_api1000/RedvoxApi1000.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RedvoxApi1000Root

@implementation RedvoxApi1000Root

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - RedvoxApi1000Root_FileDescriptor

static GPBFileDescriptor *RedvoxApi1000Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"redvox_api1000"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RedvoxPacket1000

@implementation RedvoxPacket1000

@dynamic api;
@dynamic hasUserInformation, userInformation;
@dynamic hasStationInformation, stationInformation;
@dynamic hasPacketInformation, packetInformation;
@dynamic hasTimingInformation, timingInformation;
@dynamic hasServerInformation, serverInformation;
@dynamic hasSensorChannels, sensorChannels;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_UserInformation *userInformation;
  RedvoxPacket1000_StationInformation *stationInformation;
  RedvoxPacket1000_PacketInformation *packetInformation;
  RedvoxPacket1000_TimingInformation *timingInformation;
  RedvoxPacket1000_ServerInformation *serverInformation;
  RedvoxPacket1000_SensorChannels *sensorChannels;
  NSMutableDictionary *metadata;
  double api;
} RedvoxPacket1000__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "api",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_FieldNumber_Api,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, api),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "userInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_UserInformation),
        .number = RedvoxPacket1000_FieldNumber_UserInformation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, userInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stationInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_StationInformation),
        .number = RedvoxPacket1000_FieldNumber_StationInformation,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, stationInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "packetInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_PacketInformation),
        .number = RedvoxPacket1000_FieldNumber_PacketInformation,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, packetInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timingInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_TimingInformation),
        .number = RedvoxPacket1000_FieldNumber_TimingInformation,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, timingInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "serverInformation",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_ServerInformation),
        .number = RedvoxPacket1000_FieldNumber_ServerInformation,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, serverInformation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sensorChannels",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels),
        .number = RedvoxPacket1000_FieldNumber_SensorChannels,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, sensorChannels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000 class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum RedvoxPacket1000_Unit

GPBEnumDescriptor *RedvoxPacket1000_Unit_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MetersPerSecondSquared\000Kilopascal\000Radian"
        "sPerSecond\000DecimalDegrees\000Meters\000MetersP"
        "erSecond\000Microtesla\000LsbPlusMinusCounts\000M"
        "icrosecondsSinceUnixEpoch\000Decibel\000Degree"
        "sCelsius\000Byte\000Percentage\000";
    static const int32_t values[] = {
        RedvoxPacket1000_Unit_MetersPerSecondSquared,
        RedvoxPacket1000_Unit_Kilopascal,
        RedvoxPacket1000_Unit_RadiansPerSecond,
        RedvoxPacket1000_Unit_DecimalDegrees,
        RedvoxPacket1000_Unit_Meters,
        RedvoxPacket1000_Unit_MetersPerSecond,
        RedvoxPacket1000_Unit_Microtesla,
        RedvoxPacket1000_Unit_LsbPlusMinusCounts,
        RedvoxPacket1000_Unit_MicrosecondsSinceUnixEpoch,
        RedvoxPacket1000_Unit_Decibel,
        RedvoxPacket1000_Unit_DegreesCelsius,
        RedvoxPacket1000_Unit_Byte,
        RedvoxPacket1000_Unit_Percentage,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_Unit)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_Unit_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_Unit_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_Unit_MetersPerSecondSquared:
    case RedvoxPacket1000_Unit_Kilopascal:
    case RedvoxPacket1000_Unit_RadiansPerSecond:
    case RedvoxPacket1000_Unit_DecimalDegrees:
    case RedvoxPacket1000_Unit_Meters:
    case RedvoxPacket1000_Unit_MetersPerSecond:
    case RedvoxPacket1000_Unit_Microtesla:
    case RedvoxPacket1000_Unit_LsbPlusMinusCounts:
    case RedvoxPacket1000_Unit_MicrosecondsSinceUnixEpoch:
    case RedvoxPacket1000_Unit_Decibel:
    case RedvoxPacket1000_Unit_DegreesCelsius:
    case RedvoxPacket1000_Unit_Byte:
    case RedvoxPacket1000_Unit_Percentage:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RedvoxPacket1000_UserInformation

@implementation RedvoxPacket1000_UserInformation

@dynamic authEmail;
@dynamic authToken;
@dynamic firebaseToken;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_UserInformation__storage_ {
  uint32_t _has_storage_[1];
  NSString *authEmail;
  NSString *authToken;
  NSString *firebaseToken;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_UserInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authEmail",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_UserInformation_FieldNumber_AuthEmail,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_UserInformation__storage_, authEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authToken",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_UserInformation_FieldNumber_AuthToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_UserInformation__storage_, authToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firebaseToken",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_UserInformation_FieldNumber_FirebaseToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_UserInformation__storage_, firebaseToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_UserInformation_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_UserInformation__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_UserInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_UserInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_StationInformation

@implementation RedvoxPacket1000_StationInformation

@dynamic id_p;
@dynamic uuid;
@dynamic make;
@dynamic model;
@dynamic os;
@dynamic osVersion;
@dynamic appVersion;
@dynamic hasAppSettings, appSettings;
@dynamic networkType;
@dynamic hasStationInformationTimestamps, stationInformationTimestamps;
@dynamic hasNetworkStrength, networkStrength;
@dynamic hasTemperature, temperature;
@dynamic hasBattery, battery;
@dynamic hasAvailableRam, availableRam;
@dynamic hasAvailableDisk, availableDisk;
@dynamic hasCpuUtilization, cpuUtilization;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_StationInformation__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_StationInformation_OsType os;
  RedvoxPacket1000_StationInformation_NetworkType networkType;
  NSString *id_p;
  NSString *uuid;
  NSString *make;
  NSString *model;
  NSString *osVersion;
  NSString *appVersion;
  RedvoxPacket1000_StationInformation_AppSettings *appSettings;
  RedvoxPacket1000_Payload *stationInformationTimestamps;
  RedvoxPacket1000_Payload *networkStrength;
  RedvoxPacket1000_Payload *temperature;
  RedvoxPacket1000_Payload *battery;
  RedvoxPacket1000_Payload *availableRam;
  RedvoxPacket1000_Payload *availableDisk;
  RedvoxPacket1000_Payload *cpuUtilization;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_StationInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "make",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Make,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, make),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Model,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "os",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_StationInformation_OsType_EnumDescriptor,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Os,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, os),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_OsVersion,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, osVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appVersion",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_AppVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, appVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appSettings",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_StationInformation_AppSettings),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_AppSettings,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, appSettings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "networkType",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_StationInformation_NetworkType_EnumDescriptor,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_NetworkType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, networkType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "stationInformationTimestamps",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_StationInformationTimestamps,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, stationInformationTimestamps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "networkStrength",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_NetworkStrength,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, networkStrength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "temperature",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Temperature,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, temperature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "battery",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Battery,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, battery),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "availableRam",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_AvailableRam,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, availableRam),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "availableDisk",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_AvailableDisk,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, availableDisk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cpuUtilization",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_StationInformation_FieldNumber_CpuUtilization,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, cpuUtilization),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_StationInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_StationInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_StationInformation_Os_RawValue(RedvoxPacket1000_StationInformation *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_FieldNumber_Os];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_StationInformation_Os_RawValue(RedvoxPacket1000_StationInformation *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_FieldNumber_Os];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t RedvoxPacket1000_StationInformation_NetworkType_RawValue(RedvoxPacket1000_StationInformation *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_FieldNumber_NetworkType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_StationInformation_NetworkType_RawValue(RedvoxPacket1000_StationInformation *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_FieldNumber_NetworkType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RedvoxPacket1000_StationInformation_NetworkType

GPBEnumDescriptor *RedvoxPacket1000_StationInformation_NetworkType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Wifi\000Cellular\000None\000";
    static const int32_t values[] = {
        RedvoxPacket1000_StationInformation_NetworkType_Wifi,
        RedvoxPacket1000_StationInformation_NetworkType_Cellular,
        RedvoxPacket1000_StationInformation_NetworkType_None,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_StationInformation_NetworkType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_StationInformation_NetworkType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_StationInformation_NetworkType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_StationInformation_NetworkType_Wifi:
    case RedvoxPacket1000_StationInformation_NetworkType_Cellular:
    case RedvoxPacket1000_StationInformation_NetworkType_None:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RedvoxPacket1000_StationInformation_OsType

GPBEnumDescriptor *RedvoxPacket1000_StationInformation_OsType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Android\000Ios\000Linux\000Windows\000";
    static const int32_t values[] = {
        RedvoxPacket1000_StationInformation_OsType_Android,
        RedvoxPacket1000_StationInformation_OsType_Ios,
        RedvoxPacket1000_StationInformation_OsType_Linux,
        RedvoxPacket1000_StationInformation_OsType_Windows,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_StationInformation_OsType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_StationInformation_OsType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_StationInformation_OsType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_StationInformation_OsType_Android:
    case RedvoxPacket1000_StationInformation_OsType_Ios:
    case RedvoxPacket1000_StationInformation_OsType_Linux:
    case RedvoxPacket1000_StationInformation_OsType_Windows:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RedvoxPacket1000_StationInformation_AppSettings

@implementation RedvoxPacket1000_StationInformation_AppSettings

@dynamic audioSamplingRateHz;
@dynamic audioSourceTuning;
@dynamic additionalInputSensorsArray, additionalInputSensorsArray_Count;
@dynamic automaticallyRecord;
@dynamic launchAtPowerUp;
@dynamic redvoxId;
@dynamic pushToServer;
@dynamic publishDataAsPrivate;
@dynamic scrambleVoiceData;
@dynamic provideBackfill;
@dynamic useCustomTimeSyncServer;
@dynamic timeSyncServerURL;
@dynamic useCustomDataServer;
@dynamic dataServerURL;
@dynamic autoDeleteDataFiles;
@dynamic storageSpaceAllowance;
@dynamic useSdCardForDataStorage;
@dynamic useLocationServices;
@dynamic useLatitude;
@dynamic useLongitude;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_StationInformation_AppSettings__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate audioSamplingRateHz;
  RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning audioSourceTuning;
  GPBEnumArray *additionalInputSensorsArray;
  NSString *redvoxId;
  NSString *timeSyncServerURL;
  NSString *dataServerURL;
  NSMutableDictionary *metadata;
  double storageSpaceAllowance;
  double useLatitude;
  double useLongitude;
} RedvoxPacket1000_StationInformation_AppSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioSamplingRateHz",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_EnumDescriptor,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AudioSamplingRateHz,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, audioSamplingRateHz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "audioSourceTuning",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_EnumDescriptor,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AudioSourceTuning,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, audioSourceTuning),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "additionalInputSensorsArray",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_StationInformation_AppSettings_InputSensor_EnumDescriptor,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AdditionalInputSensorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, additionalInputSensorsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "automaticallyRecord",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AutomaticallyRecord,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "launchAtPowerUp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_LaunchAtPowerUp,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "redvoxId",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_RedvoxId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, redvoxId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pushToServer",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_PushToServer,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "publishDataAsPrivate",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_PublishDataAsPrivate,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "scrambleVoiceData",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_ScrambleVoiceData,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "provideBackfill",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_ProvideBackfill,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "useCustomTimeSyncServer",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_UseCustomTimeSyncServer,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timeSyncServerURL",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_TimeSyncServerURL,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, timeSyncServerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "useCustomDataServer",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_UseCustomDataServer,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dataServerURL",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_DataServerURL,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, dataServerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "autoDeleteDataFiles",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AutoDeleteDataFiles,
        .hasIndex = 21,
        .offset = 22,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "storageSpaceAllowance",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_StorageSpaceAllowance,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, storageSpaceAllowance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "useSdCardForDataStorage",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_UseSdCardForDataStorage,
        .hasIndex = 24,
        .offset = 25,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "useLocationServices",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_UseLocationServices,
        .hasIndex = 26,
        .offset = 27,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "useLatitude",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_UseLatitude,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, useLatitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "useLongitude",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_UseLongitude,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, useLongitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_StationInformation_AppSettings__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_StationInformation_AppSettings class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_StationInformation_AppSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\014\004\244\246\241!!\000\016\004\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_StationInformation)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRateHz_RawValue(RedvoxPacket1000_StationInformation_AppSettings *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation_AppSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AudioSamplingRateHz];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRateHz_RawValue(RedvoxPacket1000_StationInformation_AppSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation_AppSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AudioSamplingRateHz];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_RawValue(RedvoxPacket1000_StationInformation_AppSettings *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation_AppSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AudioSourceTuning];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_RawValue(RedvoxPacket1000_StationInformation_AppSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_StationInformation_AppSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_StationInformation_AppSettings_FieldNumber_AudioSourceTuning];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate

GPBEnumDescriptor *RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Hz80\000Hz800\000Hz8000\000Hz16000\000Hz48000\000";
    static const int32_t values[] = {
        RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz80,
        RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz800,
        RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz8000,
        RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz16000,
        RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz48000,
    };
    static const char *extraTextFormatInfo = "\005\000b\202\000\001b\203\000\002b\204\000\003b\205\000\004b\205\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz80:
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz800:
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz8000:
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz16000:
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSamplingRate_Hz48000:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning

GPBEnumDescriptor *RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Infrasound\000LowAudio\000Audio\000";
    static const int32_t values[] = {
        RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_Infrasound,
        RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_LowAudio,
        RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_Audio,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_Infrasound:
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_LowAudio:
    case RedvoxPacket1000_StationInformation_AppSettings_AudioSourceTuning_Audio:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RedvoxPacket1000_StationInformation_AppSettings_InputSensor

GPBEnumDescriptor *RedvoxPacket1000_StationInformation_AppSettings_InputSensor_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Barometer\000Accelerometer\000AccelerometerFas"
        "t\000Magnetometer\000MagnetometerFast\000Gyroscop"
        "e\000GyroscopeFast\000Luminosity\000";
    static const int32_t values[] = {
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Barometer,
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Accelerometer,
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_AccelerometerFast,
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Magnetometer,
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_MagnetometerFast,
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Gyroscope,
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_GyroscopeFast,
        RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Luminosity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_StationInformation_AppSettings_InputSensor)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_StationInformation_AppSettings_InputSensor_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_StationInformation_AppSettings_InputSensor_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Barometer:
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Accelerometer:
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_AccelerometerFast:
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Magnetometer:
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_MagnetometerFast:
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Gyroscope:
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_GyroscopeFast:
    case RedvoxPacket1000_StationInformation_AppSettings_InputSensor_Luminosity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RedvoxPacket1000_PacketInformation

@implementation RedvoxPacket1000_PacketInformation

@dynamic isBackfilled;
@dynamic isPrivate;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_PacketInformation__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *metadata;
} RedvoxPacket1000_PacketInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isBackfilled",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_PacketInformation_FieldNumber_IsBackfilled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isPrivate",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_PacketInformation_FieldNumber_IsPrivate,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_PacketInformation_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_PacketInformation__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_PacketInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_PacketInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_TimingInformation

@implementation RedvoxPacket1000_TimingInformation

@dynamic packetStartOsTimestamp;
@dynamic packetStartMachTimestamp;
@dynamic packetEndOsTimestamp;
@dynamic packetEndMachTimestamp;
@dynamic serverAcquisitionArrivalTimestamp;
@dynamic appStartMachTimestamp;
@dynamic synchExchangesArray, synchExchangesArray_Count;
@dynamic bestLatency;
@dynamic bestOffset;
@dynamic unit;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_TimingInformation__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_Unit unit;
  NSMutableArray *synchExchangesArray;
  NSMutableDictionary *metadata;
  double packetStartOsTimestamp;
  double packetStartMachTimestamp;
  double packetEndOsTimestamp;
  double packetEndMachTimestamp;
  double serverAcquisitionArrivalTimestamp;
  double appStartMachTimestamp;
  double bestLatency;
  double bestOffset;
} RedvoxPacket1000_TimingInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "packetStartOsTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketStartOsTimestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetStartOsTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "packetStartMachTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketStartMachTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetStartMachTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "packetEndOsTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketEndOsTimestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetEndOsTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "packetEndMachTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_PacketEndMachTimestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, packetEndMachTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "serverAcquisitionArrivalTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_ServerAcquisitionArrivalTimestamp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, serverAcquisitionArrivalTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "appStartMachTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_AppStartMachTimestamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, appStartMachTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "synchExchangesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_TimingInformation_SynchExchange),
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_SynchExchangesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, synchExchangesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bestLatency",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_BestLatency,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, bestLatency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bestOffset",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_BestOffset,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, bestOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "unit",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_Unit_EnumDescriptor,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_Unit,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, unit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_TimingInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_TimingInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_TimingInformation_Unit_RawValue(RedvoxPacket1000_TimingInformation *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_TimingInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_TimingInformation_FieldNumber_Unit];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_TimingInformation_Unit_RawValue(RedvoxPacket1000_TimingInformation *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_TimingInformation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_TimingInformation_FieldNumber_Unit];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RedvoxPacket1000_TimingInformation_SynchExchange

@implementation RedvoxPacket1000_TimingInformation_SynchExchange

@dynamic a1;
@dynamic a2;
@dynamic a3;
@dynamic b1;
@dynamic b2;
@dynamic b3;
@dynamic unit;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_TimingInformation_SynchExchange__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_Unit unit;
  NSMutableDictionary *metadata;
  double a1;
  double a2;
  double a3;
  double b1;
  double b2;
  double b3;
} RedvoxPacket1000_TimingInformation_SynchExchange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "a1",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_A1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, a1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "a2",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_A2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, a2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "a3",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_A3,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, a3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "b1",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_B1,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, b1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "b2",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_B2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, b2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "b3",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_B3,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, b3),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "unit",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_Unit_EnumDescriptor,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_Unit,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, unit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_TimingInformation_SynchExchange class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_TimingInformation_SynchExchange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_TimingInformation)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_TimingInformation_SynchExchange_Unit_RawValue(RedvoxPacket1000_TimingInformation_SynchExchange *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_TimingInformation_SynchExchange descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_Unit];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_TimingInformation_SynchExchange_Unit_RawValue(RedvoxPacket1000_TimingInformation_SynchExchange *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_TimingInformation_SynchExchange descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_TimingInformation_SynchExchange_FieldNumber_Unit];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RedvoxPacket1000_ServerInformation

@implementation RedvoxPacket1000_ServerInformation

@dynamic authServerURL;
@dynamic synchServerURL;
@dynamic acquisitionServerURL;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_ServerInformation__storage_ {
  uint32_t _has_storage_[1];
  NSString *authServerURL;
  NSString *synchServerURL;
  NSString *acquisitionServerURL;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_ServerInformation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "authServerURL",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_ServerInformation_FieldNumber_AuthServerURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_ServerInformation__storage_, authServerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "synchServerURL",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_ServerInformation_FieldNumber_SynchServerURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_ServerInformation__storage_, synchServerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "acquisitionServerURL",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_ServerInformation_FieldNumber_AcquisitionServerURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_ServerInformation__storage_, acquisitionServerURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_ServerInformation_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_ServerInformation__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_ServerInformation class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_ServerInformation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\004\246\241!!\000\002\005\246\241!!\000\003\013\246\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels

@implementation RedvoxPacket1000_SensorChannels

@dynamic hasAudioChannel, audioChannel;
@dynamic hasBarometerChannel, barometerChannel;
@dynamic hasLocationChannel, locationChannel;
@dynamic hasAccelerometerChannel, accelerometerChannel;
@dynamic hasGyroscopeChannel, gyroscopeChannel;
@dynamic hasMagnetometerChannel, magnetometerChannel;
@dynamic hasLightChannel, lightChannel;
@dynamic hasInfraredChannel, infraredChannel;
@dynamic hasImageChannel, imageChannel;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_SensorChannels_AudioChannel *audioChannel;
  RedvoxPacket1000_SensorChannels_SingleChannel *barometerChannel;
  RedvoxPacket1000_SensorChannels_LocationChannel *locationChannel;
  RedvoxPacket1000_SensorChannels_XyzChannel *accelerometerChannel;
  RedvoxPacket1000_SensorChannels_XyzChannel *gyroscopeChannel;
  RedvoxPacket1000_SensorChannels_XyzChannel *magnetometerChannel;
  RedvoxPacket1000_SensorChannels_SingleChannel *lightChannel;
  RedvoxPacket1000_SensorChannels_SingleChannel *infraredChannel;
  RedvoxPacket1000_SensorChannels_ImageChannel *imageChannel;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_SensorChannels__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "audioChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_AudioChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_AudioChannel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, audioChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "barometerChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SingleChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_BarometerChannel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, barometerChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_LocationChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_LocationChannel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, locationChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accelerometerChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_XyzChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_AccelerometerChannel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, accelerometerChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gyroscopeChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_XyzChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_GyroscopeChannel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, gyroscopeChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "magnetometerChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_XyzChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_MagnetometerChannel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, magnetometerChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lightChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SingleChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_LightChannel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, lightChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "infraredChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_SingleChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_InfraredChannel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, infraredChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "imageChannel",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SensorChannels_ImageChannel),
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_ImageChannel,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, imageChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_AudioChannel

@implementation RedvoxPacket1000_SensorChannels_AudioChannel

@dynamic sensorDescription;
@dynamic firstSampleTimestamp;
@dynamic sampleRateHz;
@dynamic isScrambled;
@dynamic hasSamples, samples;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_AudioChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  RedvoxPacket1000_Payload *samples;
  NSMutableDictionary *metadata;
  double firstSampleTimestamp;
  double sampleRateHz;
} RedvoxPacket1000_SensorChannels_AudioChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_AudioChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_AudioChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstSampleTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_AudioChannel_FieldNumber_FirstSampleTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_AudioChannel__storage_, firstSampleTimestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleRateHz",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_AudioChannel_FieldNumber_SampleRateHz,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_AudioChannel__storage_, sampleRateHz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "isScrambled",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_AudioChannel_FieldNumber_IsScrambled,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "samples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_AudioChannel_FieldNumber_Samples,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_AudioChannel__storage_, samples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_AudioChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_AudioChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_AudioChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_AudioChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_SingleChannel

@implementation RedvoxPacket1000_SensorChannels_SingleChannel

@dynamic sensorDescription;
@dynamic hasTimestamps, timestamps;
@dynamic hasSamples, samples;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_SingleChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  RedvoxPacket1000_Payload *timestamps;
  RedvoxPacket1000_Payload *samples;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_SensorChannels_SingleChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamps",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_Timestamps,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, timestamps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "samples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_Samples,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, samples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_SingleChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_SingleChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_SingleChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_LocationChannel

@implementation RedvoxPacket1000_SensorChannels_LocationChannel

@dynamic sensorDescription;
@dynamic hasTimestamps, timestamps;
@dynamic hasLatitudeSamples, latitudeSamples;
@dynamic hasLongitudeSamples, longitudeSamples;
@dynamic hasAltitudeSamples, altitudeSamples;
@dynamic hasSpeedSamples, speedSamples;
@dynamic hasBearingSamples, bearingSamples;
@dynamic hasHorizontalAccuracySamples, horizontalAccuracySamples;
@dynamic hasVerticalAccuracySamples, verticalAccuracySamples;
@dynamic hasSpeedAccuracySamples, speedAccuracySamples;
@dynamic hasBearingAccuracySamples, bearingAccuracySamples;
@dynamic locationPermissionsGranted;
@dynamic locationServicesRequested;
@dynamic locationServicesEnabled;
@dynamic locationProvider;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_LocationChannel__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider locationProvider;
  NSString *sensorDescription;
  RedvoxPacket1000_Payload *timestamps;
  RedvoxPacket1000_Payload *latitudeSamples;
  RedvoxPacket1000_Payload *longitudeSamples;
  RedvoxPacket1000_Payload *altitudeSamples;
  RedvoxPacket1000_Payload *speedSamples;
  RedvoxPacket1000_Payload *bearingSamples;
  RedvoxPacket1000_Payload *horizontalAccuracySamples;
  RedvoxPacket1000_Payload *verticalAccuracySamples;
  RedvoxPacket1000_Payload *speedAccuracySamples;
  RedvoxPacket1000_Payload *bearingAccuracySamples;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_SensorChannels_LocationChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamps",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_Timestamps,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, timestamps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latitudeSamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LatitudeSamples,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, latitudeSamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "longitudeSamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LongitudeSamples,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, longitudeSamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "altitudeSamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_AltitudeSamples,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, altitudeSamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "speedSamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SpeedSamples,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, speedSamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bearingSamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_BearingSamples,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, bearingSamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "horizontalAccuracySamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_HorizontalAccuracySamples,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, horizontalAccuracySamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "verticalAccuracySamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_VerticalAccuracySamples,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, verticalAccuracySamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "speedAccuracySamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_SpeedAccuracySamples,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, speedAccuracySamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bearingAccuracySamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_BearingAccuracySamples,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, bearingAccuracySamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationPermissionsGranted",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationPermissionsGranted,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locationServicesRequested",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationServicesRequested,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locationServicesEnabled",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationServicesEnabled,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "locationProvider",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_EnumDescriptor,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationProvider,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, locationProvider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_LocationChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_LocationChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_RawValue(RedvoxPacket1000_SensorChannels_LocationChannel *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_SensorChannels_LocationChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationProvider];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_RawValue(RedvoxPacket1000_SensorChannels_LocationChannel *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_SensorChannels_LocationChannel descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_SensorChannels_LocationChannel_FieldNumber_LocationProvider];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider

GPBEnumDescriptor *RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000User\000Gps\000Network\000";
    static const int32_t values[] = {
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_None,
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_User,
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Gps,
        RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Network,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_None:
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_User:
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Gps:
    case RedvoxPacket1000_SensorChannels_LocationChannel_LocationProvider_Network:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RedvoxPacket1000_SensorChannels_XyzChannel

@implementation RedvoxPacket1000_SensorChannels_XyzChannel

@dynamic sensorDescription;
@dynamic hasTimestamps, timestamps;
@dynamic hasXSamples, xSamples;
@dynamic hasYSamples, ySamples;
@dynamic hasZSamples, zSamples;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_XyzChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  RedvoxPacket1000_Payload *timestamps;
  RedvoxPacket1000_Payload *xSamples;
  RedvoxPacket1000_Payload *ySamples;
  RedvoxPacket1000_Payload *zSamples;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_SensorChannels_XyzChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamps",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_Timestamps,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, timestamps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "xSamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_XSamples,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, xSamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ySamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_YSamples,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, ySamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "zSamples",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_Payload),
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_ZSamples,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, zSamples),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_XyzChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_XyzChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_XyzChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_SensorChannels_ImageChannel

@implementation RedvoxPacket1000_SensorChannels_ImageChannel

@dynamic sensorDescription;
@dynamic meanSampleRateHz;
@dynamic sampleTsUsArray, sampleTsUsArray_Count;
@dynamic samplesArray, samplesArray_Count;
@dynamic hasSampleRateStatistics, sampleRateStatistics;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SensorChannels_ImageChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *sensorDescription;
  GPBDoubleArray *sampleTsUsArray;
  NSMutableArray *samplesArray;
  RedvoxPacket1000_SummaryStatistics *sampleRateStatistics;
  NSMutableDictionary *metadata;
  double meanSampleRateHz;
} RedvoxPacket1000_SensorChannels_ImageChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sensorDescription",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SensorDescription,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, sensorDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "meanSampleRateHz",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_MeanSampleRateHz,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, meanSampleRateHz),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sampleTsUsArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SampleTsUsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, sampleTsUsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "samplesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, samplesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "sampleRateStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SummaryStatistics),
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_SampleRateStatistics,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, sampleRateStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SensorChannels_ImageChannel_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SensorChannels_ImageChannel class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SensorChannels_ImageChannel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000_SensorChannels)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedvoxPacket1000_Payload

@implementation RedvoxPacket1000_Payload

@dynamic unit;
@dynamic valuesArray, valuesArray_Count;
@dynamic hasValueStatistics, valueStatistics;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_Payload__storage_ {
  uint32_t _has_storage_[1];
  RedvoxPacket1000_Unit unit;
  GPBDoubleArray *valuesArray;
  RedvoxPacket1000_SummaryStatistics *valueStatistics;
  NSMutableDictionary *metadata;
} RedvoxPacket1000_Payload__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "unit",
        .dataTypeSpecific.enumDescFunc = RedvoxPacket1000_Unit_EnumDescriptor,
        .number = RedvoxPacket1000_Payload_FieldNumber_Unit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_Payload__storage_, unit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "valuesArray",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_Payload_FieldNumber_ValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_Payload__storage_, valuesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "valueStatistics",
        .dataTypeSpecific.className = GPBStringifySymbol(RedvoxPacket1000_SummaryStatistics),
        .number = RedvoxPacket1000_Payload_FieldNumber_ValueStatistics,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_Payload__storage_, valueStatistics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_Payload_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_Payload__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_Payload class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_Payload__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedvoxPacket1000_Payload_Unit_RawValue(RedvoxPacket1000_Payload *message) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_Payload descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_Payload_FieldNumber_Unit];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedvoxPacket1000_Payload_Unit_RawValue(RedvoxPacket1000_Payload *message, int32_t value) {
  GPBDescriptor *descriptor = [RedvoxPacket1000_Payload descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedvoxPacket1000_Payload_FieldNumber_Unit];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RedvoxPacket1000_SummaryStatistics

@implementation RedvoxPacket1000_SummaryStatistics

@dynamic count;
@dynamic mean;
@dynamic median;
@dynamic mode;
@dynamic variance;
@dynamic min;
@dynamic max;
@dynamic range;
@dynamic metadata, metadata_Count;

typedef struct RedvoxPacket1000_SummaryStatistics__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *metadata;
  double count;
  double mean;
  double median;
  double mode;
  double variance;
  double min;
  double max;
  double range;
} RedvoxPacket1000_SummaryStatistics__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "mean",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Mean,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, mean),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "median",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Median,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, median),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "mode",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Mode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, mode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "variance",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Variance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, variance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "min",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Min,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Max,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "range",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Range,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, range),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = RedvoxPacket1000_SummaryStatistics_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedvoxPacket1000_SummaryStatistics__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedvoxPacket1000_SummaryStatistics class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedvoxPacket1000_SummaryStatistics__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EncryptedRedvoxPacket1000

@implementation EncryptedRedvoxPacket1000

@dynamic header;
@dynamic packet;

typedef struct EncryptedRedvoxPacket1000__storage_ {
  uint32_t _has_storage_[1];
  NSData *header;
  NSData *packet;
} EncryptedRedvoxPacket1000__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = NULL,
        .number = EncryptedRedvoxPacket1000_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EncryptedRedvoxPacket1000__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "packet",
        .dataTypeSpecific.className = NULL,
        .number = EncryptedRedvoxPacket1000_FieldNumber_Packet,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EncryptedRedvoxPacket1000__storage_, packet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EncryptedRedvoxPacket1000 class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EncryptedRedvoxPacket1000__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EncryptedRedvoxPacket1000_Header

@implementation EncryptedRedvoxPacket1000_Header

@dynamic stationId;
@dynamic stationUuid;
@dynamic authToken;
@dynamic authEmail;

typedef struct EncryptedRedvoxPacket1000_Header__storage_ {
  uint32_t _has_storage_[1];
  NSString *stationId;
  NSString *stationUuid;
  NSString *authToken;
  NSString *authEmail;
} EncryptedRedvoxPacket1000_Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stationId",
        .dataTypeSpecific.className = NULL,
        .number = EncryptedRedvoxPacket1000_Header_FieldNumber_StationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EncryptedRedvoxPacket1000_Header__storage_, stationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stationUuid",
        .dataTypeSpecific.className = NULL,
        .number = EncryptedRedvoxPacket1000_Header_FieldNumber_StationUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EncryptedRedvoxPacket1000_Header__storage_, stationUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authToken",
        .dataTypeSpecific.className = NULL,
        .number = EncryptedRedvoxPacket1000_Header_FieldNumber_AuthToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EncryptedRedvoxPacket1000_Header__storage_, authToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authEmail",
        .dataTypeSpecific.className = NULL,
        .number = EncryptedRedvoxPacket1000_Header_FieldNumber_AuthEmail,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EncryptedRedvoxPacket1000_Header__storage_, authEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EncryptedRedvoxPacket1000_Header class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EncryptedRedvoxPacket1000_Header__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(EncryptedRedvoxPacket1000)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcquisitionRequest

@implementation AcquisitionRequest

@dynamic compressedRedvoxPacket1000;
@dynamic checksum;

typedef struct AcquisitionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *compressedRedvoxPacket1000;
  int64_t checksum;
} AcquisitionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "compressedRedvoxPacket1000",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionRequest_FieldNumber_CompressedRedvoxPacket1000,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcquisitionRequest__storage_, compressedRedvoxPacket1000),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionRequest_FieldNumber_Checksum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcquisitionRequest__storage_, checksum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcquisitionRequest class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcquisitionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\246\246\204\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AcquisitionResponse

@implementation AcquisitionResponse

@dynamic responseType;
@dynamic checksum;
@dynamic details;
@dynamic resend;

typedef struct AcquisitionResponse__storage_ {
  uint32_t _has_storage_[1];
  AcquisitionResponse_ResponseType responseType;
  NSString *details;
  int64_t checksum;
} AcquisitionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "responseType",
        .dataTypeSpecific.enumDescFunc = AcquisitionResponse_ResponseType_EnumDescriptor,
        .number = AcquisitionResponse_FieldNumber_ResponseType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AcquisitionResponse__storage_, responseType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionResponse_FieldNumber_Checksum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AcquisitionResponse__storage_, checksum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "details",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionResponse_FieldNumber_Details,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AcquisitionResponse__storage_, details),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resend",
        .dataTypeSpecific.className = NULL,
        .number = AcquisitionResponse_FieldNumber_Resend,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AcquisitionResponse class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AcquisitionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AcquisitionResponse_ResponseType_RawValue(AcquisitionResponse *message) {
  GPBDescriptor *descriptor = [AcquisitionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AcquisitionResponse_FieldNumber_ResponseType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAcquisitionResponse_ResponseType_RawValue(AcquisitionResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AcquisitionResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AcquisitionResponse_FieldNumber_ResponseType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum AcquisitionResponse_ResponseType

GPBEnumDescriptor *AcquisitionResponse_ResponseType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000AuthError\000DataError\000OtherError\000";
    static const int32_t values[] = {
        AcquisitionResponse_ResponseType_Ok,
        AcquisitionResponse_ResponseType_AuthError,
        AcquisitionResponse_ResponseType_DataError,
        AcquisitionResponse_ResponseType_OtherError,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AcquisitionResponse_ResponseType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AcquisitionResponse_ResponseType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AcquisitionResponse_ResponseType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AcquisitionResponse_ResponseType_Ok:
    case AcquisitionResponse_ResponseType_AuthError:
    case AcquisitionResponse_ResponseType_DataError:
    case AcquisitionResponse_ResponseType_OtherError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SynchRequest

@implementation SynchRequest

@dynamic seqId;
@dynamic subSeqId;

typedef struct SynchRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t subSeqId;
  uint64_t seqId;
} SynchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seqId",
        .dataTypeSpecific.className = NULL,
        .number = SynchRequest_FieldNumber_SeqId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SynchRequest__storage_, seqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "subSeqId",
        .dataTypeSpecific.className = NULL,
        .number = SynchRequest_FieldNumber_SubSeqId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SynchRequest__storage_, subSeqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SynchRequest class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SynchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SynchResponse

@implementation SynchResponse

@dynamic seqId;
@dynamic subSeqId;
@dynamic recvTsUs;
@dynamic sendTsUs;

typedef struct SynchResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t subSeqId;
  uint64_t seqId;
  uint64_t recvTsUs;
  uint64_t sendTsUs;
} SynchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seqId",
        .dataTypeSpecific.className = NULL,
        .number = SynchResponse_FieldNumber_SeqId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SynchResponse__storage_, seqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "subSeqId",
        .dataTypeSpecific.className = NULL,
        .number = SynchResponse_FieldNumber_SubSeqId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SynchResponse__storage_, subSeqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "recvTsUs",
        .dataTypeSpecific.className = NULL,
        .number = SynchResponse_FieldNumber_RecvTsUs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SynchResponse__storage_, recvTsUs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sendTsUs",
        .dataTypeSpecific.className = NULL,
        .number = SynchResponse_FieldNumber_SendTsUs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SynchResponse__storage_, sendTsUs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SynchResponse class]
                                     rootClass:[RedvoxApi1000Root class]
                                          file:RedvoxApi1000Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SynchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
