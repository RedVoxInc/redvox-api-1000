/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.redvox_api1000.RedvoxPacket1000');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.DeviceInformation');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSamplingRate');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSourceTuning');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.InputSensor');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.NetworkType');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.OsType');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.PacketInformation');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SensorChannels');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.ServerInformation');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.TimingInformation');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange');
goog.provide('proto.redvox_api1000.RedvoxPacket1000.UserInformation');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.displayName = 'proto.redvox_api1000.RedvoxPacket1000';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.toObject = function(includeInstance, msg) {
  var f, obj = {
    api: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    userInformation: (f = msg.getUserInformation()) && proto.redvox_api1000.RedvoxPacket1000.UserInformation.toObject(includeInstance, f),
    deviceInformation: (f = msg.getDeviceInformation()) && proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.toObject(includeInstance, f),
    packetInformation: (f = msg.getPacketInformation()) && proto.redvox_api1000.RedvoxPacket1000.PacketInformation.toObject(includeInstance, f),
    timingInformation: (f = msg.getTimingInformation()) && proto.redvox_api1000.RedvoxPacket1000.TimingInformation.toObject(includeInstance, f),
    serverInformation: (f = msg.getServerInformation()) && proto.redvox_api1000.RedvoxPacket1000.ServerInformation.toObject(includeInstance, f),
    sensorChannels: (f = msg.getSensorChannels()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000}
 */
proto.redvox_api1000.RedvoxPacket1000.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000;
  return proto.redvox_api1000.RedvoxPacket1000.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000}
 */
proto.redvox_api1000.RedvoxPacket1000.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setApi(value);
      break;
    case 2:
      var value = new proto.redvox_api1000.RedvoxPacket1000.UserInformation;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.UserInformation.deserializeBinaryFromReader);
      msg.setUserInformation(value);
      break;
    case 3:
      var value = new proto.redvox_api1000.RedvoxPacket1000.DeviceInformation;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.deserializeBinaryFromReader);
      msg.setDeviceInformation(value);
      break;
    case 4:
      var value = new proto.redvox_api1000.RedvoxPacket1000.PacketInformation;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.PacketInformation.deserializeBinaryFromReader);
      msg.setPacketInformation(value);
      break;
    case 5:
      var value = new proto.redvox_api1000.RedvoxPacket1000.TimingInformation;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.TimingInformation.deserializeBinaryFromReader);
      msg.setTimingInformation(value);
      break;
    case 6:
      var value = new proto.redvox_api1000.RedvoxPacket1000.ServerInformation;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.ServerInformation.deserializeBinaryFromReader);
      msg.setServerInformation(value);
      break;
    case 7:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.deserializeBinaryFromReader);
      msg.setSensorChannels(value);
      break;
    case 8:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApi();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getUserInformation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.redvox_api1000.RedvoxPacket1000.UserInformation.serializeBinaryToWriter
    );
  }
  f = message.getDeviceInformation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.serializeBinaryToWriter
    );
  }
  f = message.getPacketInformation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.redvox_api1000.RedvoxPacket1000.PacketInformation.serializeBinaryToWriter
    );
  }
  f = message.getTimingInformation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.redvox_api1000.RedvoxPacket1000.TimingInformation.serializeBinaryToWriter
    );
  }
  f = message.getServerInformation();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.redvox_api1000.RedvoxPacket1000.ServerInformation.serializeBinaryToWriter
    );
  }
  f = message.getSensorChannels();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.UserInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.UserInformation.displayName = 'proto.redvox_api1000.RedvoxPacket1000.UserInformation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.UserInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.UserInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    authEmail: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firebaseToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.UserInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.UserInformation;
  return proto.redvox_api1000.RedvoxPacket1000.UserInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.UserInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.UserInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirebaseToken(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.UserInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.UserInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFirebaseToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string auth_email = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.getAuthEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.setAuthEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string auth_token = 2;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.setAuthToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string firebase_token = 3;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.getFirebaseToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.setFirebaseToken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.UserInformation.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.DeviceInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.displayName = 'proto.redvox_api1000.RedvoxPacket1000.DeviceInformation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceMake: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceModel: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deviceOs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    deviceOsVersion: jspb.Message.getFieldWithDefault(msg, 6, ""),
    deviceAppVersion: jspb.Message.getFieldWithDefault(msg, 7, ""),
    appSettings: (f = msg.getAppSettings()) && proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.toObject(includeInstance, f),
    networkType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    networkStrengthDb: (f = msg.getNetworkStrengthDb()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    deviceTempC: (f = msg.getDeviceTempC()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    deviceBatteryPercent: (f = msg.getDeviceBatteryPercent()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    availableRamBytes: (f = msg.getAvailableRamBytes()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    availableDiskBytes: (f = msg.getAvailableDiskBytes()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    cpuUtilization: (f = msg.getCpuUtilization()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.DeviceInformation;
  return proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceMake(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceModel(value);
      break;
    case 5:
      var value = /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.OsType} */ (reader.readEnum());
      msg.setDeviceOs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceOsVersion(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAppVersion(value);
      break;
    case 8:
      var value = new proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.deserializeBinaryFromReader);
      msg.setAppSettings(value);
      break;
    case 9:
      var value = /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.NetworkType} */ (reader.readEnum());
      msg.setNetworkType(value);
      break;
    case 10:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setNetworkStrengthDb(value);
      break;
    case 11:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setDeviceTempC(value);
      break;
    case 12:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setDeviceBatteryPercent(value);
      break;
    case 13:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setAvailableRamBytes(value);
      break;
    case 14:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setAvailableDiskBytes(value);
      break;
    case 15:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setCpuUtilization(value);
      break;
    case 16:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceMake();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceModel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeviceOs();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getDeviceOsVersion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDeviceAppVersion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAppSettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.serializeBinaryToWriter
    );
  }
  f = message.getNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getNetworkStrengthDb();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getDeviceTempC();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getDeviceBatteryPercent();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getAvailableRamBytes();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getAvailableDiskBytes();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getCpuUtilization();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.NetworkType = {
  WIFI: 0,
  CELLULAR: 1,
  NONE: 2
};

/**
 * @enum {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.OsType = {
  ANDROID: 0,
  IOS: 1,
  LINUX: 2,
  WINDOWS: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.repeatedFields_, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.displayName = 'proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioSamplingRate: jspb.Message.getFieldWithDefault(msg, 1, 0),
    audioSourceTuning: jspb.Message.getFieldWithDefault(msg, 2, 0),
    additionalInputSensorsList: jspb.Message.getRepeatedField(msg, 3),
    automaticallyRecord: jspb.Message.getFieldWithDefault(msg, 4, false),
    launchAtPowerUp: jspb.Message.getFieldWithDefault(msg, 5, false),
    redvoxId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pushToServer: jspb.Message.getFieldWithDefault(msg, 7, false),
    publishDataAsPrivate: jspb.Message.getFieldWithDefault(msg, 8, false),
    scrambleVoiceData: jspb.Message.getFieldWithDefault(msg, 9, false),
    provideBackfill: jspb.Message.getFieldWithDefault(msg, 10, false),
    useCustomTimeSyncServer: jspb.Message.getFieldWithDefault(msg, 11, false),
    timeSyncServerUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    useCustomDataServer: jspb.Message.getFieldWithDefault(msg, 13, false),
    dataServerUrl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    autoDeleteDataFiles: jspb.Message.getFieldWithDefault(msg, 15, false),
    storageSpaceAllowance: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    useSdCardForDataStorage: jspb.Message.getFieldWithDefault(msg, 17, false),
    useLocationServices: jspb.Message.getFieldWithDefault(msg, 18, false),
    useLatitude: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    useLongitude: +jspb.Message.getFieldWithDefault(msg, 20, 0.0),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings;
  return proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSamplingRate} */ (reader.readEnum());
      msg.setAudioSamplingRate(value);
      break;
    case 2:
      var value = /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSourceTuning} */ (reader.readEnum());
      msg.setAudioSourceTuning(value);
      break;
    case 3:
      var value = /** @type {!Array<!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.InputSensor>} */ (reader.readPackedEnum());
      msg.setAdditionalInputSensorsList(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutomaticallyRecord(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLaunchAtPowerUp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedvoxId(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPushToServer(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublishDataAsPrivate(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScrambleVoiceData(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProvideBackfill(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseCustomTimeSyncServer(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeSyncServerUrl(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseCustomDataServer(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataServerUrl(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoDeleteDataFiles(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStorageSpaceAllowance(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseSdCardForDataStorage(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseLocationServices(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUseLatitude(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUseLongitude(value);
      break;
    case 21:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioSamplingRate();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAudioSourceTuning();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAdditionalInputSensorsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getAutomaticallyRecord();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLaunchAtPowerUp();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRedvoxId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPushToServer();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPublishDataAsPrivate();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getScrambleVoiceData();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getProvideBackfill();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getUseCustomTimeSyncServer();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getTimeSyncServerUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getUseCustomDataServer();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDataServerUrl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getAutoDeleteDataFiles();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getStorageSpaceAllowance();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getUseSdCardForDataStorage();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getUseLocationServices();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getUseLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getUseLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(21, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSamplingRate = {
  HZ_80: 0,
  HZ_800: 1,
  HZ_8000: 2,
  HZ_16000: 3,
  HZ_48000: 4
};

/**
 * @enum {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSourceTuning = {
  INFRASOUND: 0,
  LOW_AUDIO: 1,
  AUDIO: 2
};

/**
 * @enum {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.InputSensor = {
  BAROMETER: 0,
  ACCELEROMETER: 1,
  ACCELEROMETER_FAST: 2,
  MAGNETOMETER: 3,
  MAGNETOMETER_FAST: 4,
  GYROSCOPE: 5,
  GYROSCOPE_FAST: 6,
  LUMINOSITY: 7
};

/**
 * optional AudioSamplingRate audio_sampling_rate = 1;
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSamplingRate}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getAudioSamplingRate = function() {
  return /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSamplingRate} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSamplingRate} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setAudioSamplingRate = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional AudioSourceTuning audio_source_tuning = 2;
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSourceTuning}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getAudioSourceTuning = function() {
  return /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSourceTuning} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.AudioSourceTuning} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setAudioSourceTuning = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated InputSensor additional_input_sensors = 3;
 * @return {!Array<!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.InputSensor>}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getAdditionalInputSensorsList = function() {
  return /** @type {!Array<!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.InputSensor>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.InputSensor>} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setAdditionalInputSensorsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.InputSensor} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.addAdditionalInputSensors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.clearAdditionalInputSensorsList = function() {
  this.setAdditionalInputSensorsList([]);
};


/**
 * optional bool automatically_record = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getAutomaticallyRecord = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setAutomaticallyRecord = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool launch_at_power_up = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getLaunchAtPowerUp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setLaunchAtPowerUp = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string redvox_id = 6;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getRedvoxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setRedvoxId = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool push_to_server = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getPushToServer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setPushToServer = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool publish_data_as_private = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getPublishDataAsPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setPublishDataAsPrivate = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool scramble_voice_data = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getScrambleVoiceData = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setScrambleVoiceData = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool provide_backfill = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getProvideBackfill = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setProvideBackfill = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool use_custom_time_sync_server = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getUseCustomTimeSyncServer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setUseCustomTimeSyncServer = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string time_sync_server_url = 12;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getTimeSyncServerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setTimeSyncServerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool use_custom_data_server = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getUseCustomDataServer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setUseCustomDataServer = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string data_server_url = 14;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getDataServerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setDataServerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bool auto_delete_data_files = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getAutoDeleteDataFiles = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setAutoDeleteDataFiles = function(value) {
  jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional double storage_space_allowance = 16;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getStorageSpaceAllowance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setStorageSpaceAllowance = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional bool use_sd_card_for_data_storage = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getUseSdCardForDataStorage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setUseSdCardForDataStorage = function(value) {
  jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool use_location_services = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getUseLocationServices = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setUseLocationServices = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional double use_latitude = 19;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getUseLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setUseLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double use_longitude = 20;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getUseLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 20, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.setUseLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * map<string, string> metadata = 21;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 21, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_uuid = 2;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_make = 3;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceMake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceMake = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string device_model = 4;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceModel = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional OsType device_os = 5;
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.OsType}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceOs = function() {
  return /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.OsType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.OsType} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceOs = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string device_os_version = 6;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceOsVersion = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string device_app_version = 7;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceAppVersion = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional AppSettings app_settings = 8;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getAppSettings = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings, 8));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.AppSettings|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setAppSettings = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearAppSettings = function() {
  this.setAppSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.hasAppSettings = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NetworkType network_type = 9;
 * @return {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.NetworkType}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getNetworkType = function() {
  return /** @type {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.NetworkType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.NetworkType} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setNetworkType = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional SummaryStatistics network_strength_db = 10;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getNetworkStrengthDb = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 10));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setNetworkStrengthDb = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearNetworkStrengthDb = function() {
  this.setNetworkStrengthDb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.hasNetworkStrengthDb = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SummaryStatistics device_temp_c = 11;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceTempC = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 11));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceTempC = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearDeviceTempC = function() {
  this.setDeviceTempC(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.hasDeviceTempC = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional SummaryStatistics device_battery_percent = 12;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getDeviceBatteryPercent = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 12));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setDeviceBatteryPercent = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearDeviceBatteryPercent = function() {
  this.setDeviceBatteryPercent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.hasDeviceBatteryPercent = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SummaryStatistics available_ram_bytes = 13;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getAvailableRamBytes = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 13));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setAvailableRamBytes = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearAvailableRamBytes = function() {
  this.setAvailableRamBytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.hasAvailableRamBytes = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SummaryStatistics available_disk_bytes = 14;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getAvailableDiskBytes = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 14));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setAvailableDiskBytes = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearAvailableDiskBytes = function() {
  this.setAvailableDiskBytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.hasAvailableDiskBytes = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SummaryStatistics cpu_utilization = 15;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getCpuUtilization = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 15));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.setCpuUtilization = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearCpuUtilization = function() {
  this.setCpuUtilization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.hasCpuUtilization = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * map<string, string> metadata = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.DeviceInformation.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.PacketInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.PacketInformation.displayName = 'proto.redvox_api1000.RedvoxPacket1000.PacketInformation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.PacketInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.PacketInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    isBackfilled: jspb.Message.getFieldWithDefault(msg, 1, false),
    isPrivate: jspb.Message.getFieldWithDefault(msg, 2, false),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.PacketInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.PacketInformation;
  return proto.redvox_api1000.RedvoxPacket1000.PacketInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.PacketInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.PacketInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBackfilled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPrivate(value);
      break;
    case 3:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.PacketInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.PacketInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsBackfilled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIsPrivate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional bool is_backfilled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.getIsBackfilled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.setIsBackfilled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool is_private = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.getIsPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.setIsPrivate = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * map<string, string> metadata = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.PacketInformation.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.redvox_api1000.RedvoxPacket1000.TimingInformation.repeatedFields_, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.TimingInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.TimingInformation.displayName = 'proto.redvox_api1000.RedvoxPacket1000.TimingInformation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.TimingInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetStartTsUsWall: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    packetStartTsUsMach: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    packetEndTsUsWall: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    packetEndTsUsMach: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    serverAcquisitionArrivalTsUs: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    appStartTsUsMach: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    synchExchangesList: jspb.Message.toObjectList(msg.getSynchExchangesList(),
    proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.toObject, includeInstance),
    bestLatencyUs: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    bestOffsetUs: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.TimingInformation;
  return proto.redvox_api1000.RedvoxPacket1000.TimingInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketStartTsUsWall(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketStartTsUsMach(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketEndTsUsWall(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPacketEndTsUsMach(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setServerAcquisitionArrivalTsUs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAppStartTsUsMach(value);
      break;
    case 7:
      var value = new proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.deserializeBinaryFromReader);
      msg.addSynchExchanges(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBestLatencyUs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBestOffsetUs(value);
      break;
    case 10:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.TimingInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketStartTsUsWall();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPacketStartTsUsMach();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPacketEndTsUsWall();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getPacketEndTsUsMach();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getServerAcquisitionArrivalTsUs();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAppStartTsUsMach();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getSynchExchangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.serializeBinaryToWriter
    );
  }
  f = message.getBestLatencyUs();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getBestOffsetUs();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.displayName = 'proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.toObject = function(includeInstance, msg) {
  var f, obj = {
    a1: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    a2: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    a3: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    b1: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    b2: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    b3: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange;
  return proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA3(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setB1(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setB2(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setB3(value);
      break;
    case 7:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA1();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getA2();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getA3();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getB1();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getB2();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getB3();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional double a1 = 1;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.getA1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.setA1 = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double a2 = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.getA2 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.setA2 = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double a3 = 3;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.getA3 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.setA3 = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double b1 = 4;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.getB1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.setB1 = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double b2 = 5;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.getB2 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.setB2 = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double b3 = 6;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.getB3 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.setB3 = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * map<string, string> metadata = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


/**
 * optional double packet_start_ts_us_wall = 1;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getPacketStartTsUsWall = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setPacketStartTsUsWall = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double packet_start_ts_us_mach = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getPacketStartTsUsMach = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setPacketStartTsUsMach = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double packet_end_ts_us_wall = 3;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getPacketEndTsUsWall = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setPacketEndTsUsWall = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double packet_end_ts_us_mach = 4;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getPacketEndTsUsMach = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setPacketEndTsUsMach = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double server_acquisition_arrival_ts_us = 5;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getServerAcquisitionArrivalTsUs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setServerAcquisitionArrivalTsUs = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double app_start_ts_us_mach = 6;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getAppStartTsUsMach = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setAppStartTsUsMach = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * repeated SynchExchange synch_exchanges = 7;
 * @return {!Array<!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange>}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getSynchExchangesList = function() {
  return /** @type{!Array<!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange, 7));
};


/** @param {!Array<!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange>} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setSynchExchangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.addSynchExchanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.redvox_api1000.RedvoxPacket1000.TimingInformation.SynchExchange, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.clearSynchExchangesList = function() {
  this.setSynchExchangesList([]);
};


/**
 * optional double best_latency_us = 8;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getBestLatencyUs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setBestLatencyUs = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double best_offset_us = 9;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getBestOffsetUs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.setBestOffsetUs = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * map<string, string> metadata = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.TimingInformation.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.ServerInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.ServerInformation.displayName = 'proto.redvox_api1000.RedvoxPacket1000.ServerInformation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.ServerInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.ServerInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    authServerUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    synchServerUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    acquisitionServerUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.ServerInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.ServerInformation;
  return proto.redvox_api1000.RedvoxPacket1000.ServerInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.ServerInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.ServerInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthServerUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSynchServerUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcquisitionServerUrl(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.ServerInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.ServerInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthServerUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSynchServerUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAcquisitionServerUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string auth_server_url = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.getAuthServerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.setAuthServerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string synch_server_url = 2;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.getSynchServerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.setSynchServerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string acquisition_server_url = 3;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.getAcquisitionServerUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.setAcquisitionServerUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.ServerInformation.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.SensorChannels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.displayName = 'proto.redvox_api1000.RedvoxPacket1000.SensorChannels';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.toObject = function(includeInstance, msg) {
  var f, obj = {
    microphoneChannel: (f = msg.getMicrophoneChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.toObject(includeInstance, f),
    barometerChannel: (f = msg.getBarometerChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.toObject(includeInstance, f),
    locationChannel: (f = msg.getLocationChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.toObject(includeInstance, f),
    accelerometerChannel: (f = msg.getAccelerometerChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.toObject(includeInstance, f),
    gyroscopeChannel: (f = msg.getGyroscopeChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.toObject(includeInstance, f),
    magnetometerChannel: (f = msg.getMagnetometerChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.toObject(includeInstance, f),
    lightChannel: (f = msg.getLightChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.toObject(includeInstance, f),
    infraredChannel: (f = msg.getInfraredChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.toObject(includeInstance, f),
    imageChannel: (f = msg.getImageChannel()) && proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels;
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.deserializeBinaryFromReader);
      msg.setMicrophoneChannel(value);
      break;
    case 2:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.deserializeBinaryFromReader);
      msg.setBarometerChannel(value);
      break;
    case 3:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.deserializeBinaryFromReader);
      msg.setLocationChannel(value);
      break;
    case 4:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.deserializeBinaryFromReader);
      msg.setAccelerometerChannel(value);
      break;
    case 5:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.deserializeBinaryFromReader);
      msg.setGyroscopeChannel(value);
      break;
    case 6:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.deserializeBinaryFromReader);
      msg.setMagnetometerChannel(value);
      break;
    case 7:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.deserializeBinaryFromReader);
      msg.setLightChannel(value);
      break;
    case 8:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.deserializeBinaryFromReader);
      msg.setInfraredChannel(value);
      break;
    case 9:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.deserializeBinaryFromReader);
      msg.setImageChannel(value);
      break;
    case 10:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMicrophoneChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.serializeBinaryToWriter
    );
  }
  f = message.getBarometerChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.serializeBinaryToWriter
    );
  }
  f = message.getLocationChannel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.serializeBinaryToWriter
    );
  }
  f = message.getAccelerometerChannel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.serializeBinaryToWriter
    );
  }
  f = message.getGyroscopeChannel();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.serializeBinaryToWriter
    );
  }
  f = message.getMagnetometerChannel();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.serializeBinaryToWriter
    );
  }
  f = message.getLightChannel();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.serializeBinaryToWriter
    );
  }
  f = message.getInfraredChannel();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.serializeBinaryToWriter
    );
  }
  f = message.getImageChannel();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.repeatedFields_, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.displayName = 'proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorDescription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstSampleTsUs: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    sampleRateHz: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    isScrambled: jspb.Message.getFieldWithDefault(msg, 4, false),
    samplesList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    sampleStatistics: (f = msg.getSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel;
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorDescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFirstSampleTsUs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSampleRateHz(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsScrambled(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSamplesList(value);
      break;
    case 6:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setSampleStatistics(value);
      break;
    case 7:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstSampleTsUs();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSampleRateHz();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getIsScrambled();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      5,
      f
    );
  }
  f = message.getSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string sensor_description = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.getSensorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.setSensorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double first_sample_ts_us = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.getFirstSampleTsUs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.setFirstSampleTsUs = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double sample_rate_hz = 3;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.getSampleRateHz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.setSampleRateHz = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bool is_scrambled = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.getIsScrambled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.setIsScrambled = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated double samples = 5;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.getSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.setSamplesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.addSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.clearSamplesList = function() {
  this.setSamplesList([]);
};


/**
 * optional SummaryStatistics sample_statistics = 6;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.getSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 6));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.setSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.clearSampleStatistics = function() {
  this.setSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.hasSampleStatistics = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, string> metadata = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.repeatedFields_, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.displayName = 'proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorDescription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meanSampleRateHz: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    sampleTsUsList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    samplesList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    sampleRateStatistics: (f = msg.getSampleRateStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    sampleStatistics: (f = msg.getSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel;
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorDescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeanSampleRateHz(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSampleTsUsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSamplesList(value);
      break;
    case 5:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setSampleRateStatistics(value);
      break;
    case 6:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setSampleStatistics(value);
      break;
    case 7:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeanSampleRateHz();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSampleTsUsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
  f = message.getSampleRateStatistics();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string sensor_description = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.getSensorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.setSensorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double mean_sample_rate_hz = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.getMeanSampleRateHz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.setMeanSampleRateHz = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated double sample_ts_us = 3;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.getSampleTsUsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.setSampleTsUsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.addSampleTsUs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.clearSampleTsUsList = function() {
  this.setSampleTsUsList([]);
};


/**
 * repeated double samples = 4;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.getSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.setSamplesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.addSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.clearSamplesList = function() {
  this.setSamplesList([]);
};


/**
 * optional SummaryStatistics sample_rate_statistics = 5;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.getSampleRateStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 5));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.setSampleRateStatistics = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.clearSampleRateStatistics = function() {
  this.setSampleRateStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.hasSampleRateStatistics = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SummaryStatistics sample_statistics = 6;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.getSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 6));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.setSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.clearSampleStatistics = function() {
  this.setSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.hasSampleStatistics = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, string> metadata = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.repeatedFields_, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.displayName = 'proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.repeatedFields_ = [3,4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorDescription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meanSampleRateHz: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    sampleTsUsList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    latitudeSamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    longitudeSamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    altitudeSamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    speedSamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 7),
    accuracySamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 8),
    locationPermissionsGranted: jspb.Message.getFieldWithDefault(msg, 9, false),
    locationServicesRequested: jspb.Message.getFieldWithDefault(msg, 10, false),
    locationServicesEnabled: jspb.Message.getFieldWithDefault(msg, 11, false),
    locationProvider: jspb.Message.getFieldWithDefault(msg, 12, 0),
    sampleRateStatistics: (f = msg.getSampleRateStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    latitudeSampleStatistics: (f = msg.getLatitudeSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    longitudeSampleStatistics: (f = msg.getLongitudeSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    altitudeSampleStatistics: (f = msg.getAltitudeSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    speedSampleStatistics: (f = msg.getSpeedSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    accuracySampleStatistics: (f = msg.getAccuracySampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel;
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorDescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeanSampleRateHz(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSampleTsUsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setLatitudeSamplesList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setLongitudeSamplesList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setAltitudeSamplesList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSpeedSamplesList(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setAccuracySamplesList(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocationPermissionsGranted(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocationServicesRequested(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocationServicesEnabled(value);
      break;
    case 12:
      var value = /** @type {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider} */ (reader.readEnum());
      msg.setLocationProvider(value);
      break;
    case 13:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setSampleRateStatistics(value);
      break;
    case 14:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setLatitudeSampleStatistics(value);
      break;
    case 15:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setLongitudeSampleStatistics(value);
      break;
    case 16:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setAltitudeSampleStatistics(value);
      break;
    case 17:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setSpeedSampleStatistics(value);
      break;
    case 18:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setAccuracySampleStatistics(value);
      break;
    case 19:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeanSampleRateHz();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSampleTsUsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getLatitudeSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
  f = message.getLongitudeSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      5,
      f
    );
  }
  f = message.getAltitudeSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      6,
      f
    );
  }
  f = message.getSpeedSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      7,
      f
    );
  }
  f = message.getAccuracySamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getLocationPermissionsGranted();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getLocationServicesRequested();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getLocationServicesEnabled();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getLocationProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getSampleRateStatistics();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getLatitudeSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getLongitudeSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getAltitudeSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getSpeedSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getAccuracySampleStatistics();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(19, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider = {
  NONE: 0,
  USER: 1,
  GPS: 2,
  NETWORK: 3
};

/**
 * optional string sensor_description = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getSensorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setSensorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double mean_sample_rate_hz = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getMeanSampleRateHz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setMeanSampleRateHz = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated double sample_ts_us = 3;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getSampleTsUsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setSampleTsUsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.addSampleTsUs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearSampleTsUsList = function() {
  this.setSampleTsUsList([]);
};


/**
 * repeated double latitude_samples = 4;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLatitudeSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLatitudeSamplesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.addLatitudeSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearLatitudeSamplesList = function() {
  this.setLatitudeSamplesList([]);
};


/**
 * repeated double longitude_samples = 5;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLongitudeSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLongitudeSamplesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.addLongitudeSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearLongitudeSamplesList = function() {
  this.setLongitudeSamplesList([]);
};


/**
 * repeated double altitude_samples = 6;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getAltitudeSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setAltitudeSamplesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.addAltitudeSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearAltitudeSamplesList = function() {
  this.setAltitudeSamplesList([]);
};


/**
 * repeated double speed_samples = 7;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getSpeedSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setSpeedSamplesList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.addSpeedSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearSpeedSamplesList = function() {
  this.setSpeedSamplesList([]);
};


/**
 * repeated double accuracy_samples = 8;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getAccuracySamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setAccuracySamplesList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.addAccuracySamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearAccuracySamplesList = function() {
  this.setAccuracySamplesList([]);
};


/**
 * optional bool location_permissions_granted = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLocationPermissionsGranted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLocationPermissionsGranted = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool location_services_requested = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLocationServicesRequested = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLocationServicesRequested = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool location_services_enabled = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLocationServicesEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLocationServicesEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional LocationProvider location_provider = 12;
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLocationProvider = function() {
  return /** @type {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.LocationProvider} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLocationProvider = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional SummaryStatistics sample_rate_statistics = 13;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getSampleRateStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 13));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setSampleRateStatistics = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearSampleRateStatistics = function() {
  this.setSampleRateStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.hasSampleRateStatistics = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SummaryStatistics latitude_sample_statistics = 14;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLatitudeSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 14));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLatitudeSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearLatitudeSampleStatistics = function() {
  this.setLatitudeSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.hasLatitudeSampleStatistics = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SummaryStatistics longitude_sample_statistics = 15;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getLongitudeSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 15));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setLongitudeSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearLongitudeSampleStatistics = function() {
  this.setLongitudeSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.hasLongitudeSampleStatistics = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SummaryStatistics altitude_sample_statistics = 16;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getAltitudeSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 16));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setAltitudeSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearAltitudeSampleStatistics = function() {
  this.setAltitudeSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.hasAltitudeSampleStatistics = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SummaryStatistics speed_sample_statistics = 17;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getSpeedSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 17));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setSpeedSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearSpeedSampleStatistics = function() {
  this.setSpeedSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.hasSpeedSampleStatistics = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional SummaryStatistics accuracy_sample_statistics = 18;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getAccuracySampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 18));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.setAccuracySampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearAccuracySampleStatistics = function() {
  this.setAccuracySampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.hasAccuracySampleStatistics = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * map<string, string> metadata = 19;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 19, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.repeatedFields_, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.displayName = 'proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.repeatedFields_ = [3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorDescription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meanSampleRateHz: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    sampleTsUsList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    xSamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    ySamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    zSamplesList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    sampleRateStatistics: (f = msg.getSampleRateStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    xSampleStatistics: (f = msg.getXSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    ySampleStatistics: (f = msg.getYSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    zSampleStatistics: (f = msg.getZSampleStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel;
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorDescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeanSampleRateHz(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSampleTsUsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setXSamplesList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setYSamplesList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setZSamplesList(value);
      break;
    case 7:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setSampleRateStatistics(value);
      break;
    case 8:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setXSampleStatistics(value);
      break;
    case 9:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setYSampleStatistics(value);
      break;
    case 10:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setZSampleStatistics(value);
      break;
    case 11:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeanSampleRateHz();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSampleTsUsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getXSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
  f = message.getYSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      5,
      f
    );
  }
  f = message.getZSamplesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      6,
      f
    );
  }
  f = message.getSampleRateStatistics();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getXSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getYSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getZSampleStatistics();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string sensor_description = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getSensorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setSensorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double mean_sample_rate_hz = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getMeanSampleRateHz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setMeanSampleRateHz = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated double sample_ts_us = 3;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getSampleTsUsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setSampleTsUsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.addSampleTsUs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearSampleTsUsList = function() {
  this.setSampleTsUsList([]);
};


/**
 * repeated double x_samples = 4;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getXSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setXSamplesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.addXSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearXSamplesList = function() {
  this.setXSamplesList([]);
};


/**
 * repeated double y_samples = 5;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getYSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setYSamplesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.addYSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearYSamplesList = function() {
  this.setYSamplesList([]);
};


/**
 * repeated double z_samples = 6;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getZSamplesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setZSamplesList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.addZSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearZSamplesList = function() {
  this.setZSamplesList([]);
};


/**
 * optional SummaryStatistics sample_rate_statistics = 7;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getSampleRateStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 7));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setSampleRateStatistics = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearSampleRateStatistics = function() {
  this.setSampleRateStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.hasSampleRateStatistics = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SummaryStatistics x_sample_statistics = 8;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getXSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 8));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setXSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearXSampleStatistics = function() {
  this.setXSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.hasXSampleStatistics = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SummaryStatistics y_sample_statistics = 9;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getYSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 9));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setYSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearYSampleStatistics = function() {
  this.setYSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.hasYSampleStatistics = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SummaryStatistics z_sample_statistics = 10;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getZSampleStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 10));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.setZSampleStatistics = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearZSampleStatistics = function() {
  this.setZSampleStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.hasZSampleStatistics = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * map<string, string> metadata = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.repeatedFields_, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.displayName = 'proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorDescription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    meanSampleRateHz: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    sampleTsUsList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    samplesList: msg.getSamplesList_asB64(),
    sampleRateStatistics: (f = msg.getSampleRateStatistics()) && proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(includeInstance, f),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel;
  return proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorDescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeanSampleRateHz(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setSampleTsUsList(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSamples(value);
      break;
    case 5:
      var value = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
      reader.readMessage(value,proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader);
      msg.setSampleRateStatistics(value);
      break;
    case 6:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMeanSampleRateHz();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSampleTsUsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getSamplesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getSampleRateStatistics();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string sensor_description = 1;
 * @return {string}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getSensorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.setSensorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double mean_sample_rate_hz = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getMeanSampleRateHz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.setMeanSampleRateHz = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated double sample_ts_us = 3;
 * @return {!Array<number>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getSampleTsUsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array<number>} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.setSampleTsUsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.addSampleTsUs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.clearSampleTsUsList = function() {
  this.setSampleTsUsList([]);
};


/**
 * repeated bytes samples = 4;
 * @return {!Array<string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getSamplesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes samples = 4;
 * This is a type-conversion wrapper around `getSamplesList()`
 * @return {!Array<string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getSamplesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSamplesList()));
};


/**
 * repeated bytes samples = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSamplesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getSamplesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSamplesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.setSamplesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.addSamples = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.clearSamplesList = function() {
  this.setSamplesList([]);
};


/**
 * optional SummaryStatistics sample_rate_statistics = 5;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getSampleRateStatistics = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, 5));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.setSampleRateStatistics = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.clearSampleRateStatistics = function() {
  this.setSampleRateStatistics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.hasSampleRateStatistics = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, string> metadata = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


/**
 * optional MicrophoneChannel microphone_channel = 1;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getMicrophoneChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel, 1));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.MicrophoneChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setMicrophoneChannel = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearMicrophoneChannel = function() {
  this.setMicrophoneChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasMicrophoneChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SingleChannel barometer_channel = 2;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getBarometerChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel, 2));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setBarometerChannel = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearBarometerChannel = function() {
  this.setBarometerChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasBarometerChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LocationChannel location_channel = 3;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getLocationChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel, 3));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.LocationChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setLocationChannel = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearLocationChannel = function() {
  this.setLocationChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasLocationChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional XyzChannel accelerometer_channel = 4;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getAccelerometerChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel, 4));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setAccelerometerChannel = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearAccelerometerChannel = function() {
  this.setAccelerometerChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasAccelerometerChannel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional XyzChannel gyroscope_channel = 5;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getGyroscopeChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel, 5));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setGyroscopeChannel = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearGyroscopeChannel = function() {
  this.setGyroscopeChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasGyroscopeChannel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional XyzChannel magnetometer_channel = 6;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getMagnetometerChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel, 6));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.XyzChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setMagnetometerChannel = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearMagnetometerChannel = function() {
  this.setMagnetometerChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasMagnetometerChannel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SingleChannel light_channel = 7;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getLightChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel, 7));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setLightChannel = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearLightChannel = function() {
  this.setLightChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasLightChannel = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SingleChannel infrared_channel = 8;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getInfraredChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel, 8));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.SingleChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setInfraredChannel = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearInfraredChannel = function() {
  this.setInfraredChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasInfraredChannel = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ImageChannel image_channel = 9;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getImageChannel = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel, 9));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels.ImageChannel|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.setImageChannel = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearImageChannel = function() {
  this.setImageChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.hasImageChannel = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * map<string, string> metadata = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.SensorChannels.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.displayName = 'proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    mean: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    median: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    mode: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    variance: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    min: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    max: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    range: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics;
  return proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMean(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMedian(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVariance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRange(value);
      break;
    case 9:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMean();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMedian();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getVariance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getRange();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional double count = 1;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getCount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setCount = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double mean = 2;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getMean = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setMean = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double median = 3;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getMedian = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setMedian = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double mode = 4;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getMode = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setMode = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double variance = 5;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getVariance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setVariance = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double min = 6;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getMin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setMin = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double max = 7;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setMax = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double range = 8;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getRange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.setRange = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * map<string, string> metadata = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.SummaryStatistics.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


/**
 * optional double api = 1;
 * @return {number}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getApi = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.redvox_api1000.RedvoxPacket1000.prototype.setApi = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional UserInformation user_information = 2;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.UserInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getUserInformation = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.UserInformation} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.UserInformation, 2));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.UserInformation|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.prototype.setUserInformation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.redvox_api1000.RedvoxPacket1000.prototype.clearUserInformation = function() {
  this.setUserInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.hasUserInformation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeviceInformation device_information = 3;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.DeviceInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getDeviceInformation = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.DeviceInformation} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.DeviceInformation, 3));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.DeviceInformation|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.prototype.setDeviceInformation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.redvox_api1000.RedvoxPacket1000.prototype.clearDeviceInformation = function() {
  this.setDeviceInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.hasDeviceInformation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PacketInformation packet_information = 4;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.PacketInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getPacketInformation = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.PacketInformation} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.PacketInformation, 4));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.PacketInformation|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.prototype.setPacketInformation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.redvox_api1000.RedvoxPacket1000.prototype.clearPacketInformation = function() {
  this.setPacketInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.hasPacketInformation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TimingInformation timing_information = 5;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.TimingInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getTimingInformation = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.TimingInformation} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.TimingInformation, 5));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.TimingInformation|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.prototype.setTimingInformation = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.redvox_api1000.RedvoxPacket1000.prototype.clearTimingInformation = function() {
  this.setTimingInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.hasTimingInformation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ServerInformation server_information = 6;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.ServerInformation}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getServerInformation = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.ServerInformation} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.ServerInformation, 6));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.ServerInformation|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.prototype.setServerInformation = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.redvox_api1000.RedvoxPacket1000.prototype.clearServerInformation = function() {
  this.setServerInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.hasServerInformation = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SensorChannels sensor_channels = 7;
 * @return {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getSensorChannels = function() {
  return /** @type{?proto.redvox_api1000.RedvoxPacket1000.SensorChannels} */ (
    jspb.Message.getWrapperField(this, proto.redvox_api1000.RedvoxPacket1000.SensorChannels, 7));
};


/** @param {?proto.redvox_api1000.RedvoxPacket1000.SensorChannels|undefined} value */
proto.redvox_api1000.RedvoxPacket1000.prototype.setSensorChannels = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.redvox_api1000.RedvoxPacket1000.prototype.clearSensorChannels = function() {
  this.setSensorChannels(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.hasSensorChannels = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * map<string, string> metadata = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.redvox_api1000.RedvoxPacket1000.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


proto.redvox_api1000.RedvoxPacket1000.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


