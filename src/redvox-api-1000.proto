syntax = "proto3";

// Message type for encoding API 1000 RedVox packets.
message RedvoxPacket1000 {
    // An enumeration for type safe network types
    enum NetworkType {
        WIFI = 0;
        CELLULAR = 1;
        NONE = 2;
    }

    // An enumeration for type sage OS types
    enum OsType {
        ANDROID = 0;
        IOS = 1;
        LINUX = 2;
        WINDOWS = 3;
    }

    // API Version
    uint32 api = 1;                                     // The API version, should always be 1000

    // User information
    string auth_email = 2;                              // The e-mail the user used to authenticate with
    string auth_token = 3;                              // The JWT token used for authentication
    string firebase_token = 4;                          // The assigned firebase token

    // Device information
    string device_id = 5;                               // The user selectable device id
    string device_uuid = 6;                             // The app provided UUID
    string device_make = 7;                             // Make of the device
    string device_model = 8;                            // Model of the device
    OsType device_os = 9;                               // OS of the device
    string device_os_version = 10;                      // OS version of the device
    string device_app_version = 11;                     // App version on the device
    double device_temp_c = 12;                          // Temperature of the device in degrees centigrade
    double device_battery_percent = 13;                 // Device battery level as a percentage between 0% and 100%
    NetworkType network_type = 14;                      // Type of network connection
    double network_strength_db = 15;                    // A value representing the strength of the network connection

    // Packet information
    bool is_backfilled = 16;                            // Field for if this packet has been backfilled or not
    bool is_private = 17;                               // Field for if this packet is private to the user or not
    bool is_mic_scrambled = 18;                         // Field that determines if the microphone data is scrambled or not (should be True for 8000Hz data)
    double uncompressed_size_bytes = 19;                // Size of the uncompressed packet
    double compressed_size_bytes = 20;                  // Size of the compressed packet

    // Server information
    string auth_server_url = 21;                        // URL of server used for authentication
    string synch_server_url = 22;                       // URL of server used for time synchronization
    string acquisition_server_url = 23;                 // URL or server used for data acquisition

    // Timing
    double packet_start_ts_us_wall = 24;                // Start timestamp of the packet using the wall clock (corresponding to first microphone sample)
    double packet_start_ts_us_mach = 25;                // Start timestamp of the packet using machine time (corresponding to the first microphone sample)
    double packet_end_ts_us_wall = 26;                  // End timestamp of the packet using the wall clock (corresponding to the last microphone sample)
    double packet_end_ts_us_mach = 27;                  // End timestamp of the packet using machine time (corresponding to the last microphone sample)
    double server_acquisition_arrival_ts_us = 28;       // Timestamp that the packet arrived at the acquisition server
    double app_start_ts_us_mach = 29;                   // The start of the app as machine time
    repeated double synch_params = 30;                  // An array of synchronization params from the synch server
    double best_latency_us = 31;                        // The best latency as determined from the synch params
    double best_offset_us = 32;                         // The best offset as determined from the synch params

    // Channels
    MicrophoneChannel microphone_channel = 33;          // The microphone channel
    SingleChannel barometer_channel = 34;               // The barometer channel
    LocationChannel location_channel = 35;              // The location channel
    XyzChannel accelerometer_channel = 36;              // The accelerometer channel
    XyzChannel gyroscope_channel = 37;                  // The gyroscope channel
    XyzChannel magnetometer_channel = 38;               // The magnetometer channel
    SingleChannel light_channel = 39;                   // The light channel
    SingleChannel infrared_channel = 40;                // The infrared channel

    // Metadata
    map<string, string> metadata = 41;                  // A map from string to string for including untyped metadata
}

// Message type for microphone channels
message MicrophoneChannel {
    string sensor_description = 1;                      // The name or description of the microphone sensor
    double first_sample_ts_us = 2;                      // Timestamp of the first microphone sample
    double sample_rate_hz = 3;                          // Microphone sample rate in Hz
    repeated double samples = 4;                        // List of microphone samples
    SummaryStatistics sample_statistics = 5;            // Statistics for microphone samples
    map<string, string> metadata = 6;                   // A map from string to string for including untyped metadata
}

// Message type for non-microphone single channel sensors (barometer, light, infrared)
message SingleChannel {
    string sensor_description = 1;                      // The name or description of the sensor
    double mean_sample_rate_hz = 2;                     // The mean sample rate in Hz
    repeated double sample_ts_us = 3;                   // A list of timestamps, one for each sample
    repeated double samples = 4;                        // A list of samples
    SummaryStatistics sample_rate_statistics = 5;       // Statistics for sample timestamps
    SummaryStatistics sample_statistics = 6;            // Statistics for samples
    map<string, string> metadata = 7;                   // A map from string to string for including untyped metadata
}

// Message type for channels that include x, y, and z samples (accelerometer, magnetometer, gyroscope)
message XyzChannel {
    string sensor_description = 1;                      // The name or description of the sensor
    double mean_sample_rate_hz = 2;                     // The mean sample rate in Hz
    repeated double sample_ts_us = 3;                   // A list of timestamps, one for each sample
    repeated double x_samples = 4;                      // A list of samples for the X-channel
    repeated double y_samples = 5;                      // A list of samples for the Y-channel
    repeated double z_samples = 6;                      // A list of samples for the Z-channel
    SummaryStatistics sample_rate_statistics = 7;       // Statistics for sample timestamps
    SummaryStatistics x_sample_statistics = 8;          // Statistics for X-channel
    SummaryStatistics y_sample_statistics = 9;          // Statistics for Y-channel
    SummaryStatistics z_sample_statistics = 10;         // Statistics for Z-channel
    map<string, string> metadata = 11;                  // A map from string to string for including untyped metadata
}

// Message type for the location channel
message LocationChannel {
    enum LocationProvider {
        NONE = 0;
        USER = 1;
        GPS = 2;
        NETWORK = 3;
    }

    string sensor_description = 1;                      // The name or description of the sensor
    double mean_sample_rate_hz = 2;                     // The mean sample rate in Hz
    repeated double sample_ts_us = 3;                   // A list of timestamps, one for each sample
    repeated double latitude_samples = 4;               // A list of latitude samples
    repeated double longitude_samples = 5;              // A list of longitude samples
    repeated double altitude_samples = 6;               // A list of altitude samples
    repeated double speed_samples = 7;                  // A list of speed samples
    repeated double accuracy_Samples = 8;               // A list of accuracy samples
    bool location_permissions_granted = 9;              // Have location permissions been granted by the user?
    bool location_services_requested = 10;              // Has location services been requested by the user?
    bool location_services_enabled = 11;                // Are location services enabled and working?
    LocationProvider location_provider = 12;            // Location provider enumeration
    SummaryStatistics sample_rate_statistics = 13;      // Statistics for sample timestamps
    SummaryStatistics latitude_sample_statistics = 14;  // Statistics for latitude samples
    SummaryStatistics longitude_sample_statistics = 15; // Statistics for longitude samples
    SummaryStatistics altitude_sample_statistics = 16;  // Statistics for altitude samples
    SummaryStatistics speed_sample_statistics = 17;     // Statistics for speed samples
    SummaryStatistics accuracy_sample_statistics = 18;  // Statistics for accuracy samples
    map<string, string> metadata = 19;                  // A map from string to string for including untyped metadata
}

// Message type for summary statistics
message SummaryStatistics {
    double count = 1;                                   // The total count of values included in the statistics
    double mean = 2;                                    // The mean of the values
    double median = 3;                                  // The median of the values
    double mode = 4;                                    // The mode of the values
    double variance = 5;                                // The variance of the values
    double min = 6;                                     // The minimum value
    double max = 7;                                     // The maximum value
    double range = 8;                                   // The range of the values
    map<string, string> metadata = 9;                  // A map from string to string for including untyped metadata
}