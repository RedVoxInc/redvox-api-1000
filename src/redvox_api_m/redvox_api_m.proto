/**
* This file contains the protobuf message definitions for RedVox API 1000 (M) data and network communications.
*
* Standards and related documentation for API M is available at:
*   - https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/README.md
*/

syntax = "proto3";
package redvox_api_m;
option java_package = "io.redvox.redvox_api_m";

message RedvoxPacketM {
    // Top level packet fields
    float api = 1;                              // The API version, should always be 1000
    StationInformation station_information = 2; // Station metadata/metrics
    TimingInformation timing_information = 3;   // Timing information, synch exchanges
    Sensors sensors = 4;                        // Sensors, payloads, etc
    map<string, string> metadata = 5;           // A map from string to string for including untyped metadata

    // --------- The rest of this message contains embedded message types

    // This message contains station metadata and related station state metrics
    message StationInformation {
        string id = 1;          // The user selectable station id
        string uuid = 2;        // The app provided UUID
        string auth_id = 3;     // Authentication ID (user's email)
        string make = 4;        // Make of the station
        string model = 5;       // Model of the station
        OsType os = 6;          // OS of the station
        string os_version = 7;  // OS version of the station
        string app_version = 8; // App version on the station
        bool is_private = 9;    // If the station was set to record privately when this packet was recorded
        AppSettings app_settings = 10;          // A copy of the App's settings
        StationMetrics station_metrics = 11;    // Detail station performance metrics
        ServiceUrls service_urls = 12;          // URLs of remote services utilized by this statation
        map<string, string> metadata = 13;      // A map from string to string for including untyped metadata

        // An enumeration specifying the available operating system types
        enum OsType {
            ANDROID = 0;
            IOS = 1;
            LINUX = 2;
            WINDOWS = 3;
            UNKNOWN_OS = 4;
        }

        // Collection of related service URLs
        message ServiceUrls {
            string auth_server = 1;             // The URL of the authentication server
            string synch_server = 2;            // The URL of the synch server
            string acquisition_server = 3;      // The URL of the acquisition server
            map<string, string> metadata = 4;   // A map from string to string for including untyped metadata
        }

        // Collection of station state and performance metrics
        message StationMetrics {
            TimingPayload timestamps = 1;                       // Timestamps associated with following sensor state metrics
            repeated NetworkType network_type = 2;              // Type of network connection
            repeated CellServiceState cell_service_state = 3;   // State of the cellular service
            SamplePayload network_strength = 4;     // A value representing the strength of the network connection in decibels
            SamplePayload temperature = 5;          // Internal temperature of station in degrees Celsius
            SamplePayload battery = 6;              // Remaining percentage of station's battery
            SamplePayload battery_current = 7;      // Current in microamperes
            SamplePayload available_ram = 8;        // Available ram in bytes
            SamplePayload available_disk = 9;       // Available disk space in bytes
            SamplePayload cpu_utilization = 10;     // CPU utilization as a percentage
            repeated PowerState power_state = 11;   // Power state enumeration
            WifiWakeLock wifi_wake_lock = 12;       // If a wifi wake lock is being utilized
            map<string, string> metadata = 13;      // A map from string to string for including untyped metadata

            // An enumeration specifying the available network types
            enum NetworkType {
                NO_NETWORK = 0;
                WIFI = 1;
                CELLULAR = 2;
            }

            // Type of WiFi wake lock un use
            enum WifiWakeLock {
                NONE = 0;
                HIGH_PERF = 1;
                LOW_LATENCY = 2;
                OTHER = 3;
            }

            // State of the cellular service
            enum CellServiceState {
                UNKNOWN = 0;        // State is unknown
                EMERGENCY = 1;      // Only emergency calls
                NOMINAL = 2;        // Everything is working fine
                OUT_OF_SERVICE = 3; // Cell is searching for service, no available networks
                POWER_OFF = 4;      // Cellular radio is powered off
            }

            // The state of power supply to station
            enum PowerState {
                UNPLUGGED = 0;
                CHARGING = 1;
                CHARGED = 2;
            }
        }

        // A message the encapsulates the state of the app settings
        message AppSettings {
            AudioSamplingRate audio_sampling_rate = 1;          // The selected audio sampling rate
            AudioSourceTuning audio_source_tuning = 2;          // The selected audio source tuning
            repeated InputSensor additional_input_sensors = 3;  // Additional input sensors
            bool automatically_record = 4;                      // Station automatically records on start
            bool launch_at_power_up = 5;                        // App automatically starts on station
            string station_id = 6;                              // User selectable station id
            bool push_to_server = 7;                            // Is station data pushed to server?
            bool publish_data_as_private = 8;                   // Is station data published as private?
            bool scramble_audio_data = 9;                       // Is station audio data scrambled?
            bool provide_backfill = 10;                         // Should station backfill unsent data?
            bool remove_sensor_dc_offset = 11;                  // Does station remove DC offset?
            FftOverlap fft_overlap = 12;                        // Station FFT overlap
            bool use_custom_time_sync_server = 13;              // Should station use custom time synch server?
            string time_sync_server_url = 14;                   // URL of custom time synch server
            bool use_custom_data_server = 15;                   // Should station use custom data server?
            string data_server_url = 16;                        // URL of custom data server
            bool auto_delete_data_files = 17;                   // Should station auto delete data?
            float storage_space_allowance = 18;                 // Station data allowance in bytes
            bool use_sd_card_for_data_storage = 19;             // Should station use SD card for storage?
            bool use_location_services = 20;                    // Should station use location services?
            float use_latitude = 21;                            // User set latitude decimal degrees
            float use_longitude = 22;                           // User set longitude decimal degrees
            float use_altitude = 23;                            // User set altitude meters
            map<string, string> metadata = 24;                  // A map from string to string for including untyped metadata

            enum FftOverlap {
                PERCENT_25 = 0;
                PERCENT_50 = 1;
                PERCENT_75 = 2;
            }

            enum AudioSamplingRate {
                HZ_80 = 0;
                HZ_800 = 1;
                HZ_8000 = 2;
                HZ_16000 = 3;
                HZ_48000 = 4;
            }

            enum AudioSourceTuning {
                INFRASOUND_TUNING = 0;
                LOW_AUDIO_TUNING = 1;
                AUDIO_TUNING = 2;
            }

            enum InputSensor {
                ACCELEROMETER = 0;
                AMBIENT_TEMPERATURE = 1;
                AUDIO = 2;
                COMPRESSED_AUDIO = 3;
                GRAVITY = 4;
                GYROSCOPE = 5;
                IMAGE = 6;
                LIGHT = 7;
                LINEAR_ACCELERATION = 8;
                LOCATION = 9;
                MAGNETOMETER = 10;
                ORIENTATION = 11;
                PRESSURE = 12;
                PROXIMITY = 13;
                RELATIVE_HUMIDITY = 14;
                ROTATION_VECTOR = 15;
            }
        }
    }

    // See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/keeping_time.md
    message TimingInformation {
        double packet_start_os_timestamp = 1;               // Start timestamp of the packet using the os clock (corresponding to first audio sample)
        double packet_start_mach_timestamp = 2;             // Start timestamp of the packet using machine time (corresponding to the first audio sample)
        double packet_end_os_timestamp = 3;                 // End timestamp of the packet using the os clock (corresponding to the last audio sample)
        double packet_end_mach_timestamp = 4;               // End timestamp of the packet using machine time (corresponding to the last audio sample)
        double server_acquisition_arrival_timestamp = 5;    // Timestamp that the packet arrived at the acquisition server
        double app_start_mach_timestamp = 6;                // The start of the app as machine time
        repeated SynchExchange synch_exchanges = 7;         // An array of synchronization params from the synch server
        float best_latency = 8;                             // The best latency as determined from the synch params in microseconds
        float best_offset = 9;                              // The best offset as determined from the synch params in microseconds
        float score = 10;                                   // The overall timing score
        TimingScoreMethod score_method = 11;                // Method used to provide score
        Unit unit = 12;                                     // A unit describing the time (should always be MICROSECONDS_SINCE_UNIX_EPOCH)
        map<string, string> metadata = 13;                  // A map from string to string for including untyped metadata

        // Type-safe synchronization exchange values
        message SynchExchange {
            double a1 = 1;
            double a2 = 2;
            double a3 = 3;
            double b1 = 4;
            double b2 = 5;
            double b3 = 6;
            Unit unit = 7;
            map<string, string> metadata = 8;   // A map from string to string for including untyped metadata
        }

        // Method used to score timing metrics
        enum TimingScoreMethod {
            UNKNOWN = 0;
        }
    }

    // Collection of available sensor types
    // See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/standard_sensor_units.md
    message Sensors {
        Xyz accelerometer = 1;                  // meters/second^2
        Single ambient_temperature = 2;         // degrees Celsius
        Audio audio = 3;                        // normalized counts
        CompressedAudio compressed_audio = 4;   // bytes (codec specific)
        Xyz gravity = 5;                        // meters/second^2
        Xyz gyroscope = 6;                      // radians/second
        Image image = 7;                        // bytes (codec specific)
        Single light = 8;                       // lux
        Xyz linear_acceleration = 9;            // meters/second^2
        Location location = 10;                 // See standard
        Xyz magnetometer = 11;                  // microtesla
        Xyz orientation = 12;                   // radians
        Single pressure = 13;                   // kilopascal
        Single proximity =14;                   // on, off, cm
        Single relative_humidity = 15;          // percentage
        Xyz rotation_vector = 16;               // Unitless

        map<string, string> metadata = 17; // A map from string to string for including untyped metadata

        // This message describes a stable audio channel
        // See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_audio_data.md
        message Audio {
            string sensor_description = 1;      // The name or description of the audio sensor
            double first_sample_timestamp = 2;  // Timestamp of the first audio sample
            float sample_rate = 3;              // Microphone sample rate in Hz
            float bits_of_precision = 4;        // Bits of precision for normalized audio samples
            bool is_scrambled = 5;              // If audio data has been scrambled to remove voice
            string encoding = 6;                // The audio encoding used... TODO: Turn this into an enum!
            SamplePayload samples = 7;          // List of audio samples
            map<string, string> metadata = 8;   // A map from string to string for including untyped metadata
        }

        message CompressedAudio {
            string sensor_description = 1;      // The name or description of the audio sensor
            double first_sample_timestamp = 2;  // Timestamp of the first audio sample
            float sample_rate = 3;              // Microphone sample rate in Hz
            bool is_scrambled = 4;              // If audio data has been scrambled to remove voice
            bytes audio_bytes = 5;              // Bytes that make up audio payload
            AudioCodec audio_codec = 6;         // Codec used to compress audio
            map<string, string> metadata = 7;   // A map from string to string for including untyped metadata

            enum AudioCodec {
                // TODO
                TODO = 0;
            }
        }

        // A single channel of data
        // See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_single_channel_data.md
        message Single {
            string sensor_description = 1;      // The name or description of the sensor
            TimingPayload timestamps = 2;       // List of timestamps per sample and associated stats
            SamplePayload samples = 3;          // List of samples and associated stats
            map<string, string> metadata = 4;   // A map from string to string for including untyped metadata
        }

        // Location channels
        // See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_location_data.md
        message Location {
            string sensor_description = 1;      // The name or description of the sensor
            TimingPayload timestamps = 2;       // Timestamps and stats
            SamplePayload latitude_samples = 3; // A list of latitude samples
            SamplePayload longitude_samples = 4;// A list of longitude samples
            SamplePayload altitude_samples = 5; // A list of altitude samples
            SamplePayload speed_samples = 6;    // A list of speed samples
            SamplePayload bearing_samples = 7;  // A list of bearing samples
            SamplePayload horizontal_accuracy_samples = 8;  // A list of horizontal accuracy samples
            SamplePayload vertical_accuracy_samples = 9;    // A list of vertical accuracy samples
            SamplePayload speed_accuracy_samples = 10;      // A list of speed accuracy samples
            SamplePayload bearing_accuracy_samples = 11;    // A list of bearing accuracy samples

            float best_latitude = 14;   // The best latitude
            float best_longitude = 15;  // The best longitude
            float best_altitude = 16;   // The best altitude
            float best_speed = 17;      // The nest speed
            float best_bearing = 18;    // The best bearing
            float score = 19;           // An overall location QA score

            LocationScoreMethod location_score_method = 20; // Method used to find location score

            bool location_permissions_granted = 21;     // Have location permissions been granted by the user?
            bool location_services_requested = 22;      // Has location services been requested by the user?
            bool location_services_enabled = 23;        // Are location services enabled and working?
            LocationProvider location_provider = 24;    // Location provider enumeration

            map<string, string> metadata = 25; // A map from string to string for including untyped metadata

            // An enumeration for the various scoring methods for the "best of" metrics
            enum LocationScoreMethod {
                // TODO
                TODO = 0;
            }

            // An enumeration of location providers
            enum LocationProvider {
                NONE = 0;
                USER = 1;
                GPS = 2;
                NETWORK = 3;
            }
        }

        // Message representing data channels with X, Y, and Z components
        // See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_xyz_channel_data.md
        message Xyz {
            string sensor_description = 1;      // The name or description of the sensor
            TimingPayload timestamps = 2;       // List of timestamps per sample
            SamplePayload x_samples = 3;        // A list of samples for the X-channel
            SamplePayload y_samples = 4;        // A list of samples for the Y-channel
            SamplePayload z_samples = 5;        // A list of samples for the Z-channel
            map<string, string> metadata = 6;   // A map from string to string for including untyped metadata
        }

        // Image/video channel
        // See: https://bitbucket.org/redvoxhi/redvox-api-1000/src/master/docs/standards/storing_image_data.md
        message Image {
            string sensor_description = 1;      // The name or description of the sensor
            TimingPayload timestamps = 2;       // Timestamps per sample
            repeated bytes samples = 3;         // A list of bytes each representing a single image
            ImageCodec image_codec = 4;         // The image codec being used
            map<string, string> metadata = 5;   // A map from string to string for including untyped metadata

            // Codec used to encode the image
            enum ImageCodec {
                PNG = 0;
                JPG = 1;
                BMP = 2;
            }
        }
    }

    // Combines a unit, sample values, and value statistics
    // Used to store collections of samples, their unit, and the statistics for those samples.
    message SamplePayload {
        Unit unit = 1;                          // Unit of payload values
        repeated float values = 2;              // Values in payload
        SummaryStatistics value_statistics = 3; // Statistics of stored values
        map<string, string> metadata = 4;       // A map from string to string for including untyped metadata
    }

    // Combines a unit, sample values, and value statistics
    // Used to store collections of samples, their unit, and the statistics for those samples.
    message TimingPayload {
        Unit unit = 1;                                  // Unit of payload values
        repeated double timestamps = 2;                 // Values in payload
        SummaryStatistics timestamp_statistics = 3;     // Statistics of stored values
        float mean_sample_rate = 4;                     // Mean sample rate in Hz
        float stdev_sample_rate = 5;                    // Standard deviation of sample rate in Hz
        map<string, string> metadata = 6;               // A map from string to string for including untyped metadata
    }

    // Enumeration of API M supported units
    enum Unit {
        METERS_PER_SECOND_SQUARED = 0;
        KILOPASCAL = 1;
        RADIANS_PER_SECOND = 2;
        DECIMAL_DEGREES = 3;
        METERS = 4;
        METERS_PER_SECOND = 5;
        MICROTESLA = 6;
        LSB_PLUS_MINUS_COUNTS = 7;
        MICROSECONDS_SINCE_UNIX_EPOCH = 8;
        DECIBEL = 9;
        DEGREES_CELSIUS = 10;
        BYTE = 11;
        PERCENTAGE = 12;
        RADIANS = 13;
        MICROAMPERES = 14;
        CENTIMETERS = 15;
        NORMALIZED_COUNTS = 16;
        LUX = 17;
        UNITLESS = 18;
    }

    // Common statistics stored with payloads
    message SummaryStatistics {
        float count = 1;                   // The total count of values included in the statistics
        float mean = 2;                    // The mean of the values
        float median = 3;                  // The median of the values
        float mode = 4;                    // The mode of the values
        float variance = 5;                // The variance of the values
        float min = 6;                     // The minimum value
        float max = 7;                     // The maximum value
        float range = 8;                   // The range of the values
        map<string, string> metadata = 9;  // A map from string to string for including untyped metadata
    }
}

// --------- E2E Encryption

// Message type for providing E2E encryption.
// The header is encrypted via RedVox keys.
// The body is encrypted via user keys.
// Each payload consists of bytes from the following transformations
//   Serialization: Object -> serialize to bytes -> LZ4 frame compress -> encrypt -> payload bytes
//   Deserialization: Payload bytes -> decrypt -> LZ4 frame decompress -> deserialize from bytes -> object
message EncryptedRedvoxPacketM {
    bytes header = 1;   // redvox encrypt(compress(EncryptedRedvoxPacket1000.Header))
    bytes packet = 2;   // user encrypt(compress(RedvoxPacketApi1000))

    message Header {
        string station_id = 1;
        string station_uuid = 2;
        string auth_token = 3;
        string firebase_token = 4;
        string auth_email = 5;
    }
}

// --------- Message types for communicating with RedVox data acquisition servers
// Message for sending RedVox data to a redvox.io data acquisition service.
message AcquisitionRequest {
    string auth_token = 1;      // The server provided authentication token
    string firebase_token = 2;  // The API provided firebase token
    int64 checksum = 3;         // A checksum of the payload bytes
    bool is_encrypted = 4;      // If set, then the payload contains
    bytes payload = 5;          // The compressed packet to send
}

// Response from data acquisition services.
message AcquisitionResponse {
    ResponseType response_type = 1; // Response type (as above)
    int64 checksum = 2;             // Checksum computed by server
    string details = 3;             // Any other error details
    bool resend = 4;                // If set, client to should attempt to resend the file
                                    // otherwise, don't resend the file.

    enum ResponseType {
        OK = 0;             // No issues with packet
        AUTH_ERROR = 1;     // An authentication error has occurred
        DATA_ERROR = 2;     // An error with the data decoding or data quality
        OTHER_ERROR = 3;    // Any other errors
    }
}

// --------- Message types for communicating with RedVox v3 time synchronization service
message SynchRequest {
    string station_id = 1;      // Id of the station
    string station_uuid = 2;    // Uuid of the station
    uint32 seq_id = 3;          // The overall number of synch requests made. Starts at 0 on recording start.
    uint32 sub_seq_id = 4;      // The seq id within a single exchange
}

message SynchResponse {
    string station_id = 1;      // Should match same field from request
    string station_uuid = 2;    // Should match same field from request
    uint32 seq_id = 3;          // Should match same field from request
    uint32 sub_seq_id = 4;      // Should be req field + 1
    uint64 recv_ts_us = 5;      // Time synch server received request
    uint64 send_ts_us = 6;      // Time synch server sent response
}

// --------- Message types for custom logging
// TODO

// --------- Message types for command, control, and communication
// TODO
