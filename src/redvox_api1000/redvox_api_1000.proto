/**
* This file contains the protobuf message definitions for RedVox API 1000 data and network communications.
* All times in microseconds.
* Start and end OS and machine times in UTC relative to the Unix epoch (1970/01/01/0Z).
* Location (lat, lon, height) relative to WGS 84
*/

syntax = "proto3";
package redvox_api1000;
option java_package = "io.redvox.redvox_api1000";

message RedvoxPacket1000 {
    // Top level packet fields
    double api = 1;                             // The API version, should always be 1000
    UserInformation user_information = 2;       // User information
    StationInformation station_information = 3; // Station information
    PacketInformation packet_information = 4;   // Packet information
    TimingInformation timing_information = 5;   // Timing information
    ServerInformation server_information = 6;
    SensorChannels sensor_channels = 7;         // Sensor channels
    map<string, string> metadata = 8;           // A map from string to string for including untyped metadata

    // --------- The rest of this message contains embedded message types

    message UserInformation {
        string auth_email = 1;              // The e-mail the user used to authenticate with
        string auth_token = 2;              // The JWT token used for authentication
        string firebase_token = 3;          // The assigned firebase token
        map<string, string> metadata = 4;   // A map from string to string for including untyped metadata
    }

    message StationInformation {
        string id = 1;                                  // The user selectable station id
        string uuid = 2;                                // The app provided UUID
        string make = 3;                                // Make of the station
        string model = 4;                               // Model of the station
        OsType os = 5;                                  // OS of the station
        string os_version = 6;                          // OS version of the station
        string app_version = 7;                         // App version on the station
        AppSettings app_settings = 8;                   // A copy of the App's settings
        NetworkType network_type = 9;                   // Type of network connection
        Payload station_information_timestamps = 10;
        Payload network_strength = 11;     // A value representing the strength of the network connection
        Payload temperature = 12;
        Payload battery = 13;
        Payload available_ram = 14;
        Payload available_disk = 15;
        Payload cpu_utilization = 16;
        map<string, string> metadata = 17;              // A map from string to string for including untyped metadata

        enum NetworkType {
            WIFI = 0;
            CELLULAR = 1;
            NONE = 2;
        }

        enum OsType {
            ANDROID = 0;
            IOS = 1;
            LINUX = 2;
            WINDOWS = 3;
        }

        message AppSettings {
            AudioSamplingRate audio_sampling_rate_hz = 1;
            AudioSourceTuning audio_source_tuning = 2;
            repeated InputSensor additional_input_sensors = 3;
            bool automatically_record = 4;
            bool launch_at_power_up = 5;
            string redvox_id = 6;
            bool push_to_server = 7;
            bool publish_data_as_private = 8;
            bool scramble_voice_data = 9;
            bool provide_backfill = 10;
            bool remove_sensor_dc_offset = 11;
            FftOverlap fft_overlap = 12;
            bool use_custom_time_sync_server = 13;
            string time_sync_server_url = 14;
            bool use_custom_data_server = 15;
            string data_server_url = 16;
            bool auto_delete_data_files = 17;
            double storage_space_allowance = 18;
            bool use_sd_card_for_data_storage = 19;
            bool use_location_services = 20;
            double use_latitude = 21;
            double use_longitude = 22;
            map<string, string> metadata = 23;                   // A map from string to string for including untyped metadata

            enum FftOverlap {
                PERCENT_25 = 0;
                PERCENT_50 = 1;
                PERCENT_75 = 2;
            }

            enum AudioSamplingRate {
                HZ_80 = 0;
                HZ_800 = 1;
                HZ_8000 = 2;
                HZ_16000 = 3;
                HZ_48000 = 4;
            }

            enum AudioSourceTuning {
                INFRASOUND = 0;
                LOW_AUDIO = 1;
                AUDIO = 2;
            }

            enum InputSensor {
                BAROMETER = 0;
                ACCELEROMETER = 1;
                ACCELEROMETER_FAST = 2;
                MAGNETOMETER = 3;
                MAGNETOMETER_FAST = 4;
                GYROSCOPE = 5;
                GYROSCOPE_FAST = 6;
                LUMINOSITY = 7;
            }
        }
    }

    message PacketInformation {
        bool is_backfilled = 1;             // Field for if this packet has been backfilled or not
        bool is_private = 2;                // Field for if this packet is private to the user or not
        map<string, string> metadata = 3;   // A map from string to string for including untyped metadata
    }

    message TimingInformation {
        double packet_start_os_timestamp = 1;               // Start timestamp of the packet using the os clock (corresponding to first audio sample)
        double packet_start_mach_timestamp = 2;             // Start timestamp of the packet using machine time (corresponding to the first audio sample)
        double packet_end_os_timestamp = 3;                 // End timestamp of the packet using the os clock (corresponding to the last audio sample)
        double packet_end_mach_timestamp = 4;               // End timestamp of the packet using machine time (corresponding to the last audio sample)
        double server_acquisition_arrival_timestamp = 5;    // Timestamp that the packet arrived at the acquisition server
        double app_start_mach_timestamp = 6;                // The start of the app as machine time
        repeated SynchExchange synch_exchanges = 7;         // An array of synchronization params from the synch server
        double best_latency = 8;                            // The best latency as determined from the synch params
        double best_offset = 9;                             // The best offset as determined from the synch params
        double score = 10;                                  // The overall timing score
        TimingScoreMethod score_method = 11;                // Method used to provide score
        Unit unit = 12;                                     // A unit describing the time (should always be MICROSECONDS_SINCE_UNIX_EPOCH)
        map<string, string> metadata = 13;                  // A map from string to string for including untyped metadata

        message SynchExchange {
            double a1 = 1;
            double a2 = 2;
            double a3 = 3;
            double b1 = 4;
            double b2 = 5;
            double b3 = 6;
            Unit unit = 7;
            map<string, string> metadata = 8;   // A map from string to string for including untyped metadata
        }

        enum TimingScoreMethod {
            // TODO
            TODO = 0;
        }
    }

    message ServerInformation {
        string auth_server_url = 1;         // The URL of the authentication server
        string synch_server_url = 2;        // The URL of the synch server
        string acquisition_server_url = 3;  // The URL of the acquisition server
        map<string, string> metadata = 4;   // A map from string to string for including untyped metadata
    }

    message SensorChannels {
        AudioChannel audio_channel = 1;         // The audio channel
        SingleChannel barometer_channel = 2;    // The barometer channel
        LocationChannel location_channel = 3;   // The location channel
        XyzChannel accelerometer_channel = 4;   // The accelerometer channel
        XyzChannel gyroscope_channel = 5;       // The gyroscope channel
        XyzChannel magnetometer_channel = 6;    // The magnetometer channel
        SingleChannel light_channel = 7;        // The light channel
        SingleChannel proximity_channel = 8;    // The proximity channel
        ImageChannel image_channel = 9;         // The image channel
        map<string, string> metadata = 10;      // A map from string to string for including untyped metadata

        message AudioChannel {
            string sensor_description = 1;      // The name or description of the audio sensor
            double first_sample_timestamp = 2;  // Timestamp of the first audio sample
            double sample_rate_hz = 3;          // Microphone sample rate in Hz
            bool is_scrambled = 4;              // If audio data has been scrambled to remove voice
            Payload samples = 5;                // List of audio samples
            map<string, string> metadata = 6;   // A map from string to string for including untyped metadata
        }

        message CompressedAudioChannel {
            string sensor_description = 1;      // The name or description of the audio sensor
            double first_sample_timestamp = 2;  // Timestamp of the first audio sample
            double sample_rate_hz = 3;          // Microphone sample rate in Hz
            bool is_scrambled = 4;              // If audio data has been scrambled to remove voice
            bytes audio_bytes = 5;
            AudioCodec audio_codec = 6;
            map<string, string> metadata = 7;   // A map from string to string for including untyped metadata

            enum AudioCodec {
                // TODO
                TODO = 0;
            }
        }

        message SingleChannel {
            string sensor_description = 1;      // The name or description of the sensor
            Payload timestamps = 2;             // List of timestamps per sample and associated stats
            Payload samples = 3;                // List of samples and associated stats
            map<string, string> metadata = 4;   // A map from string to string for including untyped metadata
        }

        message LocationChannel {
            string sensor_description = 1;              // The name or description of the sensor
            Payload timestamps = 2;                     // Timestamps and stats
            Payload latitude_samples = 3;               // A list of latitude samples
            Payload longitude_samples = 4;              // A list of longitude samples
            Payload altitude_samples = 5;               // A list of altitude samples
            Payload speed_samples = 6;                  // A list of speed samples
            Payload bearing_samples = 7;                // A list of bearing samples
            Payload horizontal_accuracy_samples = 8;    // A list of horizontal accuracy samples
            Payload vertical_accuracy_samples = 9;      // A list of vertical accuracy samples
            Payload speed_accuracy_samples = 10;        // A list of speed accuracy samples
            Payload bearing_accuracy_samples = 11;      // A list of bearing accuracy samples

            double best_latitude = 12;                  // The best latitude
            double best_longitude = 13;                 // The best longitude
            double best_altitude = 14;                  // The best altitude
            double best_speed = 15;                     // The nest speed
            double best_bearing = 16;                   // The best bearing
            double score = 17;                          // An overall location QA score
            LocationScoreMethod location_score_method = 18; // Method used to find location score

            bool location_permissions_granted = 19;     // Have location permissions been granted by the user?
            bool location_services_requested = 20;      // Has location services been requested by the user?
            bool location_services_enabled = 21;        // Are location services enabled and working?
            LocationProvider location_provider = 22;    // Location provider enumeration

            map<string, string> metadata = 26;          // A map from string to string for including untyped metadata

            // An enumeration for the various scoring methods for the "best of" metrics
            enum LocationScoreMethod {
                // TODO
                TODO = 0;
            }

            // An enumeration of location providers
            enum LocationProvider {
                NONE = 0;
                USER = 1;
                GPS = 2;
                NETWORK = 3;
            }
        }

        message XyzChannel {
            string sensor_description = 1;                  // The name or description of the sensor
            Payload timestamps = 2;
            Payload x_samples = 4;                  // A list of samples for the X-channel
            Payload y_samples = 5;                  // A list of samples for the Y-channel
            Payload z_samples = 6;                  // A list of samples for the Z-channel
            map<string, string> metadata = 11;              // A map from string to string for including untyped metadata
        }

        message ImageChannel {
            string sensor_description = 1;                  // The name or description of the sensor
            double mean_sample_rate_hz = 2;                 // The mean sample rate in Hz
            repeated double sample_ts_us = 3;               // A list of timestamps, one for each sample
            repeated bytes samples = 4;                     // A list of bytes each representing a single image
            SummaryStatistics sample_rate_statistics = 5;   // Statistics for sample timestamps
            ImageCodec image_codec = 6;                     // The image codec being used
            map<string, string> metadata = 7;               // A map from string to string for including untyped metadata

            enum ImageCodec {
                PNG = 0;
                JPG = 1;
                BMP = 2;
            }
        }
    }

    message Payload {
        Unit unit = 1;
        repeated double values = 2;
        SummaryStatistics value_statistics = 3;
        map<string, string> metadata = 4;
    }

    enum Unit {
        METERS_PER_SECOND_SQUARED = 0;
        KILOPASCAL = 1;
        RADIANS_PER_SECOND = 2;
        DECIMAL_DEGREES = 3;
        METERS = 4;
        METERS_PER_SECOND = 5;
        MICROTESLA = 6;
        LSB_PLUS_MINUS_COUNTS = 7;
        MICROSECONDS_SINCE_UNIX_EPOCH = 8;
        DECIBEL = 9;
        DEGREES_CELSIUS = 10;
        BYTE = 11;
        PERCENTAGE = 12;
    }

    message SummaryStatistics {
        double count = 1;                   // The total count of values included in the statistics
        double mean = 2;                    // The mean of the values
        double median = 3;                  // The median of the values
        double mode = 4;                    // The mode of the values
        double variance = 5;                // The variance of the values
        double min = 6;                     // The minimum value
        double max = 7;                     // The maximum value
        double range = 8;                   // The range of the values
        map<string, string> metadata = 9;   // A map from string to string for including untyped metadata
    }
}

// Message type for providing E2E encryption.
// The header is encrypted via RedVox keys.
// The body is encrypted via user keys.
// Each payload consists of bytes from the following transformations
//   Serialization: Object -> serialize to bytes -> LZ4 frame compress -> encrypt -> payload bytes
//   Deserialization: Payload bytes -> decrypt -> LZ4 frame decompress -> deserialize from bytes -> object
message EncryptedRedvoxPacket1000 {
    bytes header = 1;   // redvox encrypt(compress(EncryptedRedvoxPacket1000.Header))
    bytes packet = 2;   // user encrypt(compress(RedvoxPacketApi1000))

    message Header {
        string station_id = 1;
        string station_uuid = 2;
        string auth_token = 3;
        string auth_email = 4;
    }
}

// Message for sending RedVox data to a redvox.io data acquisition service.
message AcquisitionRequest {
    bytes payload = 1;    // The compressed packet to send.
    bool is_encrypted = 2;
    int64 checksum = 3;                         // A checksum of the bytes in field 1.
}

// Response from data acquisition services.
message AcquisitionResponse {
    ResponseType response_type = 1; // Response type (as above)
    int64 checksum = 2;             // Checksum computed by server
    string details = 3;             // Any other error details
    bool resend = 4;                // If set, client to should attempt to resend the file
                                    // otherwise, don't resend the file.

    enum ResponseType {
        OK = 0;             // No issues with packet
        AUTH_ERROR = 1;     // An authentication error has occurred
        DATA_ERROR = 2;     // An error with the data decoding or data quality
        OTHER_ERROR = 3;    // Any other errors
    }
}

message SynchRequest {
    string station_id = 1;
    string station_uuid = 2;
    uint32 seq_id = 3;
    uint32 sub_seq_id = 4;
}

message SynchResponse {
    string station_id = 1;
    string station_uuid = 2;
    uint32 seq_id = 3;
    uint32 sub_seq_id = 4;
    uint64 recv_ts_us = 5;
    uint64 send_ts_us = 6;
}
